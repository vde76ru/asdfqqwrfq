"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô WEBSOCKET –°–ï–†–í–ï–†
============================
–§–∞–π–ª: src/web/enhanced_websocket.py

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
"""

import asyncio
import json
import logging
from typing import Dict, Any, List, Set, Optional
from datetime import datetime
from fastapi import WebSocket, WebSocketDisconnect
from collections import defaultdict
import traceback

logger = logging.getLogger(__name__)

class EnhancedWebSocketManager:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    """
    
    def __init__(self):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections: Set[WebSocket] = set()
        
        # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        self.subscriptions: Dict[str, Set[WebSocket]] = defaultdict(set)
        
        # –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.message_queues: Dict[WebSocket, asyncio.Queue] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_connections': 0,
            'messages_sent': 0,
            'messages_failed': 0,
            'bytes_sent': 0,
            'uptime_start': datetime.utcnow()
        }
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        self.background_tasks = []
        
        # –ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {
            'bot_status': {},
            'balance': {},
            'positions': [],
            'tickers': {},
            'trades': [],
            'strategies': {},
            'logs': []
        }
        
        logger.info("‚úÖ EnhancedWebSocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def connect(self, websocket: WebSocket) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        await websocket.accept()
        
        self.active_connections.add(websocket)
        self.message_queues[websocket] = asyncio.Queue()
        self.stats['total_connections'] += 1
        
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_connections)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self._send_initial_data(websocket)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        task = asyncio.create_task(self._handle_client_messages(websocket))
        self.background_tasks.append(task)
    
    def disconnect(self, websocket: WebSocket) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.active_connections.discard(websocket)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        for subscribers in self.subscriptions.values():
            subscribers.discard(websocket)
        
        # –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        if websocket in self.message_queues:
            del self.message_queues[websocket]
        
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_connections)}")
    
    async def _send_initial_data(self, websocket: WebSocket) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            initial_data = {
                'type': 'initial',
                'timestamp': datetime.utcnow().isoformat(),
                'data': {
                    'bot_status': self.data_cache['bot_status'],
                    'balance': self.data_cache['balance'],
                    'positions': self.data_cache['positions'],
                    'tickers': self.data_cache['tickers'],
                    'recent_trades': self.data_cache['trades'][-10:],
                    'strategies': self.data_cache['strategies']
                }
            }
            
            await websocket.send_json(initial_data)
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _handle_client_messages(self, websocket: WebSocket) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            while websocket in self.active_connections:
                try:
                    # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    data = await asyncio.wait_for(
                        websocket.receive_text(), 
                        timeout=60.0  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                    )
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self._process_client_message(websocket, data)
                    
                except asyncio.TimeoutError:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    await websocket.send_json({'type': 'ping'})
                    
                except WebSocketDisconnect:
                    break
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
        finally:
            self.disconnect(websocket)
    
    async def _process_client_message(self, websocket: WebSocket, data: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            message = json.loads(data)
            msg_type = message.get('type')
            
            if msg_type == 'ping':
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                await websocket.send_json({'type': 'pong'})
                
            elif msg_type == 'subscribe':
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                topics = message.get('topics', [])
                for topic in topics:
                    self.subscriptions[topic].add(websocket)
                logger.info(f"üìä –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: {topics}")
                
            elif msg_type == 'unsubscribe':
                # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                topics = message.get('topics', [])
                for topic in topics:
                    self.subscriptions[topic].discard(websocket)
                    
            elif msg_type == 'command':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                await self._handle_command(websocket, message)
                
        except json.JSONDecodeError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_command(self, websocket: WebSocket, message: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        command = message.get('command')
        params = message.get('params', {})
        
        try:
            if command == 'get_history':
                # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
                data_type = params.get('type', 'trades')
                limit = params.get('limit', 50)
                
                response = {
                    'type': 'history',
                    'data_type': data_type,
                    'data': self._get_history(data_type, limit)
                }
                
                await websocket.send_json(response)
                
            elif command == 'get_chart_data':
                # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                symbol = params.get('symbol', 'BTCUSDT')
                interval = params.get('interval', '5m')
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                response = {
                    'type': 'chart_data',
                    'symbol': symbol,
                    'interval': interval,
                    'data': []  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                }
                
                await websocket.send_json(response)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await websocket.send_json({
                'type': 'error',
                'message': str(e)
            })
    
    def _get_history(self, data_type: str, limit: int) -> List[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞"""
        if data_type == 'trades':
            return self.data_cache['trades'][-limit:]
        elif data_type == 'logs':
            return self.data_cache['logs'][-limit:]
        else:
            return []
    
    # =================================================================
    # BROADCAST –ú–ï–¢–û–î–´
    # =================================================================
    
    async def broadcast(self, message_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        message = {
            'type': message_type,
            'timestamp': datetime.utcnow().isoformat(),
            'data': data
        }
        
        await self._broadcast_to_subscribers('all', message)
    
    async def broadcast_to_topic(self, topic: str, message_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞"""
        message = {
            'type': message_type,
            'topic': topic,
            'timestamp': datetime.utcnow().isoformat(),
            'data': data
        }
        
        await self._broadcast_to_subscribers(topic, message)
    
    async def _broadcast_to_subscribers(self, topic: str, message: Dict[str, Any]) -> None:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if topic == 'all':
            subscribers = self.active_connections
        else:
            subscribers = self.subscriptions.get(topic, set())
        
        if not subscribers:
            return
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        message_json = json.dumps(message, default=str, ensure_ascii=False)
        message_bytes = len(message_json.encode('utf-8'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        tasks = []
        for websocket in list(subscribers):
            tasks.append(self._send_to_client(websocket, message_json))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for r in results if r is True)
        self.stats['messages_sent'] += successful
        self.stats['messages_failed'] += len(results) - successful
        self.stats['bytes_sent'] += message_bytes * successful
    
    async def _send_to_client(self, websocket: WebSocket, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await websocket.send_text(message)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            self.disconnect(websocket)
            return False
    
    # =================================================================
    # –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
    # =================================================================
    
    async def update_bot_status(self, status: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        self.data_cache['bot_status'] = status
        await self.broadcast('bot_status', status)
    
    async def update_balance(self, balance: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        self.data_cache['balance'] = balance
        await self.broadcast('balance_update', balance)
    
    async def update_positions(self, positions: List[Dict[str, Any]]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        self.data_cache['positions'] = positions
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_pnl = sum(p.get('pnl', 0) for p in positions)
        
        await self.broadcast('position_update', {
            'positions': positions,
            'total_pnl': total_pnl,
            'count': len(positions)
        })
    
    async def update_ticker(self, symbol: str, ticker_data: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞"""
        self.data_cache['tickers'][symbol] = ticker_data
        
        await self.broadcast_to_topic('tickers', 'ticker_update', {
            'symbol': symbol,
            'ticker': ticker_data
        })
    
    async def add_trade(self, trade: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
        self.data_cache['trades'].append(trade)
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–¥–µ–ª–æ–∫
        if len(self.data_cache['trades']) > 1000:
            self.data_cache['trades'] = self.data_cache['trades'][-1000:]
        
        await self.broadcast('new_trade', trade)
    
    async def update_strategies(self, strategies: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        self.data_cache['strategies'] = strategies
        await self.broadcast('strategy_update', {'strategies': strategies})
    
    async def add_log(self, level: str, message: str, source: str = 'system') -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞"""
        log_entry = {
            'timestamp': datetime.utcnow().isoformat(),
            'level': level,
            'message': message,
            'source': source
        }
        
        self.data_cache['logs'].append(log_entry)
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –ª–æ–≥–æ–≤
        if len(self.data_cache['logs']) > 500:
            self.data_cache['logs'] = self.data_cache['logs'][-500:]
        
        await self.broadcast_to_topic('logs', 'log_message', log_entry)
    
    # =================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =================================================================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        uptime = (datetime.utcnow() - self.stats['uptime_start']).total_seconds()
        
        return {
            'active_connections': len(self.active_connections),
            'total_connections': self.stats['total_connections'],
            'messages_sent': self.stats['messages_sent'],
            'messages_failed': self.stats['messages_failed'],
            'bytes_sent': self.stats['bytes_sent'],
            'uptime_seconds': int(uptime),
            'subscriptions': {
                topic: len(subscribers) 
                for topic, subscribers in self.subscriptions.items()
            }
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            test_message = {'type': 'health_check', 'timestamp': datetime.utcnow().isoformat()}
            
            tasks = []
            for ws in self.active_connections:
                tasks.append(ws.send_json(test_message))
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            healthy_connections = sum(1 for r in results if not isinstance(r, Exception))
            
            return {
                'status': 'healthy' if healthy_connections == len(self.active_connections) else 'degraded',
                'healthy_connections': healthy_connections,
                'total_connections': len(self.active_connections),
                'timestamp': datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await self.broadcast('shutdown', {'message': 'Server is shutting down'})
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in list(self.active_connections):
            try:
                await websocket.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.background_tasks:
            if not task.done():
                task.cancel()
        
        logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


# =================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° BOT MANAGER
# =================================================================

class WebSocketBotIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è WebSocket —Å BotManager –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    """
    
    def __init__(self, ws_manager: EnhancedWebSocketManager, bot_manager):
        self.ws_manager = ws_manager
        self.bot_manager = bot_manager
        self.update_interval = 2  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        self.running = False
        self._update_task = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.running = True
        self._update_task = asyncio.create_task(self._update_loop())
        logger.info("‚úÖ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.running = False
        if self._update_task:
            self._update_task.cancel()
        logger.info("‚èπÔ∏è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
                if self.bot_manager:
                    # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                    bot_status = self.bot_manager.get_status()
                    await self.ws_manager.update_bot_status(bot_status)
                    
                    # –ë–∞–ª–∞–Ω—Å
                    balance = self._get_balance_from_bot()
                    if balance:
                        await self.ws_manager.update_balance(balance)
                    
                    # –ü–æ–∑–∏—Ü–∏–∏
                    positions = self._get_positions_from_bot()
                    await self.ws_manager.update_positions(positions)
                    
                    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    strategies = self._get_strategies_from_bot()
                    await self.ws_manager.update_strategies(strategies)
                
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _get_balance_from_bot(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –±–æ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            return {
                'total_usdt': 10000,
                'available_usdt': 9500,
                'in_positions': 500,
                'change_24h': 2.5
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    def _get_positions_from_bot(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Ç –±–æ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def _get_strategies_from_bot(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return {}


# =================================================================
# WEBSOCKET ENDPOINT
# =================================================================

async def enhanced_websocket_endpoint(websocket: WebSocket, ws_manager: EnhancedWebSocketManager):
    """
    WebSocket endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    await ws_manager.connect(websocket)
    
    try:
        while True:
            # –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
            # –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ _handle_client_messages
            await asyncio.sleep(1)
            
    except WebSocketDisconnect:
        pass
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket endpoint: {e}")
        logger.error(traceback.format_exc())
    finally:
        ws_manager.disconnect(websocket)


# =================================================================
# –§–ê–ë–†–ò–ö–ê
# =================================================================

def create_enhanced_websocket_manager() -> EnhancedWebSocketManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return EnhancedWebSocketManager()


# =================================================================
# –≠–ö–°–ü–û–†–¢–´
# =================================================================

__all__ = [
    'EnhancedWebSocketManager',
    'WebSocketBotIntegration',
    'enhanced_websocket_endpoint',
    'create_enhanced_websocket_manager'
]