"""
–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
–§–∞–π–ª: src/bot/internal/trade_execution.py
"""

import asyncio
import logging
import traceback
import uuid
import inspect
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from src.core.unified_config import UnifiedConfig

logger = logging.getLogger(__name__)

def get_trade_execution(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
    
    class TradeExecution:
        def __init__(self, bot):
            self.bot = bot
            
        async def execute_trade_decision(self, decision):
            """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
            return await execute_trade_decision(self.bot, decision)
            
        async def place_order_with_retry(self, order_params):
            """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
            return await place_order_with_retry(self.bot, order_params)
    
    return TradeExecution(bot_instance)

async def _execute_best_trades(bot_instance, opportunities: list) -> int:
    """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –≤—ã–∑–æ–≤–æ–º calculate_position_size"""
    try:
        trades_executed = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if not opportunities:
            logger.debug("üìä –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        max_trades = min(
            getattr(bot_instance.config, 'MAX_DAILY_TRADES', 50) - getattr(bot_instance, 'trades_today', 0),
            getattr(bot_instance.config, 'MAX_POSITIONS', 15) - len(getattr(bot_instance, 'positions', {})),
            3  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–¥–µ–ª–∫–∏ –∑–∞ —Ü–∏–∫–ª
        )
        
        if max_trades <= 0:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–π")
            return 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        sorted_opportunities = sorted(
            opportunities,
            key=lambda x: x.get('confidence', 0),
            reverse=True
        )
        
        # –ò—Å–ø–æ–ª–Ω—è–µ–º –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏
        for opportunity in sorted_opportunities[:max_trades]:
            symbol = opportunity['symbol']
            signal = opportunity['signal']
            confidence = opportunity.get('confidence', 0.6)
            price = opportunity['price']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            min_confidence = getattr(bot_instance.config, 'MIN_CONFIDENCE', 0.6)
            if confidence < min_confidence:
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f} < {min_confidence}")
                continue
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
            if hasattr(bot_instance._calculate_position_size, '__call__'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                if inspect.iscoroutinefunction(bot_instance._calculate_position_size):
                    position_size = await bot_instance._calculate_position_size(symbol, price)
                else:
                    # –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π - –≤—ã–∑—ã–≤–∞–µ–º –±–µ–∑ await
                    position_size = bot_instance._calculate_position_size(symbol, price)
            else:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
                logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _calculate_position_size –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç")
                # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                balance = getattr(bot_instance, 'available_balance', 10000)
                risk_amount = balance * (getattr(bot_instance.config, 'RISK_PER_TRADE_PERCENT', 1.5) / 100)
                position_size = risk_amount / price
                
            if position_size <= 0:
                logger.warning(f"‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
                continue
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            # –î–ª—è Bybit –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ 0.001
            min_size = 0.001
            if position_size < min_size:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_size}")
                position_size = min_size
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            position_size = round(position_size, 3)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–∫–∏
            trade_data = {
                'confidence': confidence,
                'stop_loss': opportunity.get('stop_loss'),
                'take_profit': opportunity.get('take_profit'),
                'strategy': opportunity.get('strategy', 'unknown'),
                'indicators': opportunity.get('indicators', {}),
                'market_conditions': opportunity.get('market_conditions', {}),
                'risk_reward_ratio': opportunity.get('risk_reward_ratio')
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º risk/reward –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if not trade_data.get('risk_reward_ratio') and trade_data.get('stop_loss') and trade_data.get('take_profit'):
                if signal.upper() == 'BUY':
                    risk = price - trade_data['stop_loss']
                    reward = trade_data['take_profit'] - price
                else:  # SELL
                    risk = trade_data['stop_loss'] - price
                    reward = price - trade_data['take_profit']
                
                if risk > 0:
                    trade_data['risk_reward_ratio'] = reward / risk
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Å–¥–µ–ª–∫–∏
            logger.info("üéØ –ü–û–î–ì–û–¢–û–í–ö–ê –°–î–ï–õ–ö–ò:")
            logger.info(f"üìä –°–∏–º–≤–æ–ª: {symbol}")
            logger.info(f"üìà –°–∏–≥–Ω–∞–ª: {signal}")
            logger.info(f"üíµ –¶–µ–Ω–∞: ${price:.4f}")
            logger.info(f"üìè –†–∞–∑–º–µ—Ä: {position_size}")
            if trade_data.get('stop_loss'):
                logger.info(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${trade_data['stop_loss']:.4f}")
            if trade_data.get('take_profit'):
                logger.info(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${trade_data['take_profit']:.4f}")
            if trade_data.get('risk_reward_ratio'):
                logger.info(f"‚öñÔ∏è Risk/Reward: 1:{trade_data['risk_reward_ratio']:.2f}")
            logger.info(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            logger.info(f"üîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {trade_data.get('strategy')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            paper_trading = bot_instance.config.PAPER_TRADING
            testnet = bot_instance.config.TESTNET
            live_trading = bot_instance.config.LIVE_TRADING
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
            logger.debug(f"üîç –†–µ–∂–∏–º—ã: PAPER_TRADING={paper_trading}, TESTNET={testnet}, LIVE_TRADING={live_trading}")
            
             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî paper ‚Üí live ‚Üí testnet ‚Üí fallback)
            if paper_trading:
                logger.info("üìù –†–ï–ñ–ò–ú PAPER TRADING - —Å–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏")
                success = await _simulate_trade(bot_instance, symbol, signal, position_size, price, trade_data)
            elif live_trading:
                if testnet:
                    logger.info("üß™ –†–ï–ñ–ò–ú TESTNET - —Ä–µ–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∏—Ä–∂–µ")
                else:
                    logger.info("üí∏ –†–ï–ñ–ò–ú LIVE TRADING - —Ä–µ–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏—Ä–∂–µ")
                success = await _execute_real_order(bot_instance, symbol, signal, position_size, price, trade_data)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã LIVE_TRADING –∏–ª–∏ PAPER_TRADING ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–∏–º—É–ª—è—Ü–∏—é")
                success = await _simulate_trade(bot_instance, symbol, signal, position_size, price, trade_data)
                
            if success:
                trades_executed += 1
                bot_instance.trades_today = getattr(bot_instance, 'trades_today', 0) + 1
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ #{trades_executed} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
                if not hasattr(bot_instance, 'positions'):
                    bot_instance.positions = {}
                    
                bot_instance.positions[symbol] = {
                    'side': signal,
                    'size': position_size,
                    'entry_price': price,
                    'stop_loss': trade_data.get('stop_loss'),
                    'take_profit': trade_data.get('take_profit'),
                    'strategy': trade_data.get('strategy'),
                    'confidence': confidence,
                    'timestamp': datetime.utcnow()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if hasattr(bot_instance, 'notifier') and bot_instance.notifier:
                    try:
                        await bot_instance.notifier.send_trade_notification(
                            symbol=symbol,
                            side=signal,
                            price=price,
                            amount=position_size,
                            strategy=trade_data.get('strategy'),
                            confidence=confidence
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É –¥–ª—è {symbol}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                if hasattr(bot_instance, 'trade_cooldown'):
                    bot_instance.trade_cooldown[symbol] = datetime.utcnow() + timedelta(minutes=30)
                    logger.info(f"‚è∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown –Ω–∞ 30 –º–∏–Ω—É—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if trades_executed > 0:
            logger.info(f"üìä –ò—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ: {trades_executed}")
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {bot_instance.trades_today}")
            logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(bot_instance.positions)}")
        
        return trades_executed
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return 0

async def _execute_trade(bot_instance, opportunity: Dict[str, Any]) -> bool:
    """
    –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏. 
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É (Paper Trading) –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ.
    """
    symbol = opportunity['symbol']
    signal = opportunity['signal']
    price = opportunity['price']

    logger.info(f"üéØ –ò–°–ü–û–õ–ù–ï–ù–ò–ï –°–î–ï–õ–ö–ò –¥–ª—è {symbol}...")

    try:
        # 1. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
        position_size = _calculate_position_size(bot_instance, symbol, price)
        if position_size <= 0:
            logger.warning(f"‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ ({position_size}) –¥–ª—è {symbol}. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ unified_config
        is_paper_trading = getattr(bot_instance.config, 'PAPER_TRADING', True)
        is_live_trading = getattr(bot_instance.config, 'LIVE_TRADING', False)

        trade_data = {
            'confidence': opportunity.get('confidence', 0.6),
            'stop_loss': opportunity.get('stop_loss'),
            'take_profit': opportunity.get('take_profit'),
            'strategy': opportunity.get('strategy', 'unknown'),
            'indicators': opportunity.get('indicators', {})
        }

        success = False
        if is_paper_trading:
            logger.info(f"üìù –†–ï–ñ–ò–ú PAPER TRADING: –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è {symbol}")
            success = await _simulate_trade(bot_instance, symbol, signal, position_size, price, trade_data)
        elif is_live_trading:
            logger.info(f"üí∏ –†–ï–ñ–ò–ú LIVE TRADING: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è {symbol}")
            # _execute_real_order_internal –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            success = await _execute_real_order_internal(bot_instance, symbol, signal, position_size, price, trade_data)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (PAPER_TRADING –∏–ª–∏ LIVE_TRADING). –°–¥–µ–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            return False

        if success:
            logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –¥–ª—è {symbol} ({signal}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            await _save_trade_to_db(bot_instance, symbol, trade_data, success=True)
            await _send_trade_notification(bot_instance, symbol, signal, position_size, price)
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É –¥–ª—è {symbol}.")

        return success

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è {symbol}: {e}")
        logger.error(traceback.format_exc())
        return False

async def _execute_real_order_internal(bot_instance, symbol: str, signal: str, position_size: float, 
                                     price: float, trade_data: Dict[str, Any]) -> bool:
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –†–ï–ê–õ–¨–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º enhanced_exchange_client –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π.
    """
    client = bot_instance.enhanced_exchange_client or bot_instance.exchange_client
    if not client:
        logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏.")
        return False

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(client, 'place_order_from_signal'):
             # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            from ..common.types import UnifiedTradingSignal, SignalAction
            unified_signal = UnifiedTradingSignal(
                symbol=symbol,
                action=SignalAction(signal.upper()),
                price=price,
                stop_loss=trade_data.get('stop_loss'),
                take_profit=trade_data.get('take_profit'),
                strategy=trade_data.get('strategy', 'unknown'),
                confidence=trade_data.get('confidence', 0.6)
            )
            result = await client.place_order_from_signal(signal=unified_signal, amount=position_size)
        else: # Fallback –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
             result = await client.place_order(
                symbol=symbol,
                side=signal.lower(),
                amount=position_size,
                order_type='market',
                params={
                    'stopLoss': trade_data.get('stop_loss'),
                    'takeProfit': trade_data.get('take_profit'),
                }
            )

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result and (result.get('success') or (result.get('retCode') == 0 and result.get('result'))):
            order_id = result.get('order_id') or result.get('result', {}).get('orderId', 'N/A')
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –¥–ª—è {symbol} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. ID: {order_id}")
            return True
        else:
            error_msg = result.get('error') or result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∏—Ä–∂–∏')
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {error_msg}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        return False

async def _simulate_trade(bot_instance, symbol: str, signal: str, position_size: float,
                         price: float, trade_data: Dict[str, Any]) -> bool:
    """
    –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Paper Trading
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (BUY/SELL)
        position_size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        trade_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        logger.info("üìù –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–î–ï–õ–ö–ò (Paper Trading)")
        logger.info(f"üìä –°–∏–º–≤–æ–ª: {symbol}")
        logger.info(f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}")
        logger.info(f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.4f}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        order_id = f"PAPER_{uuid.uuid4().hex[:8]}"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        position_value = position_size * price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
        available_balance = getattr(bot_instance, 'paper_balance', UnifiedConfig.INITIAL_CAPITAL)
        if position_value > available_balance:
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ ${position_value:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance:.2f}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
        simulated_trade = {
            'order_id': order_id,
            'symbol': symbol,
            'side': signal,
            'size': position_size,
            'entry_price': price,
            'position_value': position_value,
            'stop_loss': trade_data.get('stop_loss'),
            'take_profit': trade_data.get('take_profit'),
            'strategy': trade_data.get('strategy', 'unknown'),
            'confidence': trade_data.get('confidence', 0.6),
            'timestamp': datetime.utcnow(),
            'status': 'FILLED',
            'pnl': 0.0,
            'pnl_percent': 0.0,
            'commission': position_value * 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º paper –±–∞–ª–∞–Ω—Å
        bot_instance.paper_balance = available_balance - position_value - simulated_trade['commission']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ paper –ø–æ–∑–∏—Ü–∏–∏
        if not hasattr(bot_instance, 'paper_positions'):
            bot_instance.paper_positions = {}
        
        bot_instance.paper_positions[symbol] = simulated_trade
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é paper —Å–¥–µ–ª–æ–∫
        if not hasattr(bot_instance, 'paper_trades_history'):
            bot_instance.paper_trades_history = []
        
        bot_instance.paper_trades_history.append(simulated_trade.copy())
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
        logger.info(f"‚úÖ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        logger.info(f"üîñ Order ID: {order_id}")
        logger.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${position_value:.2f}")
        logger.info(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${simulated_trade['commission']:.2f}")
        logger.info(f"üíµ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${bot_instance.paper_balance:.2f}")
        
        if trade_data.get('stop_loss'):
            potential_loss = abs(price - trade_data['stop_loss']) * position_size
            logger.info(f"üõë Stop Loss: ${trade_data['stop_loss']:.4f} (—Ä–∏—Å–∫: ${potential_loss:.2f})")
            
        if trade_data.get('take_profit'):
            potential_profit = abs(trade_data['take_profit'] - price) * position_size
            logger.info(f"üéØ Take Profit: ${trade_data['take_profit']:.4f} (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${potential_profit:.2f})")
        
        if trade_data.get('risk_reward_ratio'):
            logger.info(f"‚öñÔ∏è Risk/Reward: 1:{trade_data['risk_reward_ratio']:.2f}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if hasattr(bot_instance, '_monitor_paper_position'):
            asyncio.create_task(_monitor_paper_position(bot_instance, symbol, simulated_trade))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not hasattr(bot_instance, 'paper_stats'):
            bot_instance.paper_stats = {
                'total_trades': 0,
                'winning_trades': 0,
                'losing_trades': 0,
                'total_pnl': 0.0,
                'total_commission': 0.0,
                'max_drawdown': 0.0,
                'best_trade': 0.0,
                'worst_trade': 0.0,
                'average_win': 0.0,
                'average_loss': 0.0,
                'win_rate': 0.0,
                'profit_factor': 0.0
            }
        
        bot_instance.paper_stats['total_trades'] += 1
        bot_instance.paper_stats['total_commission'] += simulated_trade['commission']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
        if hasattr(bot_instance, 'notifier') and bot_instance.notifier:
            try:
                message = f"üìù PAPER TRADE EXECUTED\n"
                message += f"Symbol: {symbol}\n"
                message += f"Side: {signal}\n"
                message += f"Price: ${price:.4f}\n"
                message += f"Size: {position_size}\n"
                message += f"Value: ${position_value:.2f}\n"
                message += f"Strategy: {trade_data.get('strategy', 'unknown')}\n"
                message += f"Balance: ${bot_instance.paper_balance:.2f}"
                
                await bot_instance.notifier.send_message(message)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def _monitor_paper_position(bot_instance, symbol: str, position: Dict[str, Any]):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è P&L
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        position: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        while symbol in bot_instance.paper_positions:
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await _get_current_price(bot_instance, symbol)
            if not current_price:
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
            entry_price = position['entry_price']
            size = position['size']
            side = position['side']
            
            if side.upper() == 'BUY':
                pnl = (current_price - entry_price) * size
                pnl_percent = ((current_price - entry_price) / entry_price) * 100
            else:  # SELL
                pnl = (entry_price - current_price) * size
                pnl_percent = ((entry_price - current_price) / entry_price) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            bot_instance.paper_positions[symbol]['current_price'] = current_price
            bot_instance.paper_positions[symbol]['pnl'] = pnl
            bot_instance.paper_positions[symbol]['pnl_percent'] = pnl_percent
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            if position.get('stop_loss'):
                if (side.upper() == 'BUY' and current_price <= position['stop_loss']) or \
                   (side.upper() == 'SELL' and current_price >= position['stop_loss']):
                    logger.warning(f"üõë STOP LOSS —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol} @ ${current_price:.4f}")
                    await _close_paper_position(bot_instance, symbol, current_price, 'STOP_LOSS')
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if position.get('take_profit'):
                if (side.upper() == 'BUY' and current_price >= position['take_profit']) or \
                   (side.upper() == 'SELL' and current_price <= position['take_profit']):
                    logger.info(f"üéØ TAKE PROFIT —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol} @ ${current_price:.4f}")
                    await _close_paper_position(bot_instance, symbol, current_price, 'TAKE_PROFIT')
                    break
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ paper –ø–æ–∑–∏—Ü–∏–∏: {e}")

async def _close_paper_position(bot_instance, symbol: str, exit_price: float, reason: str):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
        reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    """
    try:
        if symbol not in bot_instance.paper_positions:
            return
        
        position = bot_instance.paper_positions[symbol]
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç P&L
        entry_price = position['entry_price']
        size = position['size']
        side = position['side']
        
        if side.upper() == 'BUY':
            pnl = (exit_price - entry_price) * size
        else:  # SELL
            pnl = (entry_price - exit_price) * size
        
        # –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
        exit_commission = size * exit_price * 0.001
        total_commission = position['commission'] + exit_commission
        net_pnl = pnl - exit_commission
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        bot_instance.paper_balance += position['position_value'] + net_pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_instance.paper_stats['total_pnl'] += net_pnl
        
        if net_pnl > 0:
            bot_instance.paper_stats['winning_trades'] += 1
            bot_instance.paper_stats['best_trade'] = max(bot_instance.paper_stats['best_trade'], net_pnl)
        else:
            bot_instance.paper_stats['losing_trades'] += 1
            bot_instance.paper_stats['worst_trade'] = min(bot_instance.paper_stats['worst_trade'], net_pnl)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º win rate
        total = bot_instance.paper_stats['winning_trades'] + bot_instance.paper_stats['losing_trades']
        if total > 0:
            bot_instance.paper_stats['win_rate'] = (bot_instance.paper_stats['winning_trades'] / total) * 100
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
        logger.info(f"üìù PAPER POSITION CLOSED: {symbol}")
        logger.info(f"üì§ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        logger.info(f"üíµ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${exit_price:.4f}")
        logger.info(f"üí∞ P&L: ${net_pnl:.2f} ({(net_pnl/position['position_value'])*100:.2f}%)")
        logger.info(f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${bot_instance.paper_balance:.2f}")
        logger.info(f"üìä Win Rate: {bot_instance.paper_stats['win_rate']:.1f}%")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del bot_instance.paper_positions[symbol]
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è paper –ø–æ–∑–∏—Ü–∏–∏: {e}")

async def _get_current_price(bot_instance, symbol: str) -> Optional[float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        
    Returns:
        Optional[float]: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None
    """
    try:
        # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ enhanced exchange client —Å –∫–µ—à–µ–º
        if hasattr(bot_instance, 'enhanced_exchange_client') and bot_instance.enhanced_exchange_client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(bot_instance.enhanced_exchange_client, 'price_cache'):
                cached_price = bot_instance.enhanced_exchange_client.price_cache.get(symbol)
                if cached_price and cached_price.get('timestamp'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
                    age = (datetime.utcnow() - cached_price['timestamp']).total_seconds()
                    if age < 5:
                        return cached_price['price']
            
            # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ V5 API
            if hasattr(bot_instance.enhanced_exchange_client, 'v5_client'):
                try:
                    ticker = await bot_instance.enhanced_exchange_client.v5_client.get_ticker(
                        category='linear',
                        symbol=symbol
                    )
                    if ticker and ticker.get('retCode') == 0:
                        result = ticker.get('result', {})
                        if result.get('list'):
                            return float(result['list'][0].get('lastPrice', 0))
                except Exception as e:
                    logger.debug(f"V5 ticker error: {e}")
        
        # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π exchange client
        if hasattr(bot_instance, 'exchange_client') and bot_instance.exchange_client:
            try:
                # –ú–µ—Ç–æ–¥ fetch_ticker –¥–ª—è CCXT
                if hasattr(bot_instance.exchange_client, 'fetch_ticker'):
                    ticker = await bot_instance.exchange_client.fetch_ticker(symbol)
                    if ticker and 'last' in ticker:
                        return float(ticker['last'])
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ get_ticker
                elif hasattr(bot_instance.exchange_client, 'get_ticker'):
                    ticker = await bot_instance.exchange_client.get_ticker(symbol)
                    if ticker:
                        return float(ticker.get('last', 0))
            except Exception as e:
                logger.debug(f"Exchange client ticker error: {e}")
        
        # –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ WebSocket –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(bot_instance, 'websocket_manager') and bot_instance.websocket_manager:
            ws_data = getattr(bot_instance.websocket_manager, 'market_data', {})
            if symbol in ws_data and 'price' in ws_data[symbol]:
                return float(ws_data[symbol]['price'])
        
        # –°–ø–æ—Å–æ–± 4: –ò–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        if hasattr(bot_instance, 'data_collector') and bot_instance.data_collector:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                candles = await bot_instance.data_collector.get_latest_candles(symbol, limit=1)
                if candles and len(candles) > 0:
                    return float(candles[-1]['close'])
            except Exception as e:
                logger.debug(f"Data collector error: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∑–∞–ø—Ä–æ—Å
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
        
        # Fallback: –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Bybit API
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                url = f"https://api-testnet.bybit.com/v5/market/tickers?category=linear&symbol={symbol}"
                if not getattr(bot_instance.config, 'TESTNET', True):
                    url = f"https://api.bybit.com/v5/market/tickers?category=linear&symbol={symbol}"
                
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('retCode') == 0:
                            result = data.get('result', {})
                            if result.get('list'):
                                return float(result['list'][0].get('lastPrice', 0))
        except Exception as e:
            logger.error(f"‚ùå Fallback API error: {e}")
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

def _validate_trade_params(bot_instance, symbol: str, signal: str, 
                          position_size: float, price: float) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        position_size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        price: –¶–µ–Ω–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
    if not symbol or not isinstance(symbol, str):
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}")
        return False
    
    if not symbol.endswith('USDT'):
        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–µ USDT –ø–∞—Ä–∞): {symbol}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    if signal.upper() not in ['BUY', 'SELL']:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {signal}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    if not isinstance(position_size, (int, float)) or position_size <= 0:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
    if not isinstance(price, (int, float)) or price <= 0:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price}")
        return False
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    min_position_size = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è BTC
    if position_size < min_position_size:
        logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {position_size} < {min_position_size}")
    
    logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ –≤–∞–ª–∏–¥–Ω—ã: {symbol} {signal} size={position_size} price={price}")
    return True

def _validate_stop_loss(bot_instance, signal: str, price: float, stop_loss: Optional[float]) -> Optional[float]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è stop loss"""
    if not stop_loss:
        return None
        
    if signal.upper() == 'BUY':
        # –î–ª—è –ø–æ–∫—É–ø–∫–∏ SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã
        if stop_loss >= price:
            corrected = price * 0.97  # 3% –Ω–∏–∂–µ
            logger.warning(f"‚ö†Ô∏è SL —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: {stop_loss} -> {corrected}")
            return corrected
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã
        if stop_loss <= price:
            corrected = price * 1.03  # 3% –≤—ã—à–µ
            logger.warning(f"‚ö†Ô∏è SL —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: {stop_loss} -> {corrected}")
            return corrected
    
    return stop_loss

def _validate_take_profit(bot_instance, signal: str, price: float, take_profit: Optional[float]) -> Optional[float]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è take profit"""
    if not take_profit:
        return None
        
    if signal.upper() == 'BUY':
        # –î–ª—è –ø–æ–∫—É–ø–∫–∏ TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã
        if take_profit <= price:
            corrected = price * 1.06  # 6% –≤—ã—à–µ
            logger.warning(f"‚ö†Ô∏è TP —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: {take_profit} -> {corrected}")
            return corrected
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã
        if take_profit >= price:
            corrected = price * 0.94  # 6% –Ω–∏–∂–µ
            logger.warning(f"‚ö†Ô∏è TP —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: {take_profit} -> {corrected}")
            return corrected
    
    return take_profit

def _save_order_info(bot_instance, order_result: Dict[str, Any], signal):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
    if not hasattr(bot_instance, 'active_orders'):
        bot_instance.active_orders = {}
    
    order_id = order_result.get('order_id') or order_result.get('id')
    if order_id:
        bot_instance.active_orders[order_id] = {
            'symbol': signal.symbol,
            'side': signal.side_str,
            'action': signal.action_str,
            'size': order_result.get('amount'),
            'price': signal.price,
            'stop_loss': signal.stop_loss,
            'take_profit': signal.take_profit,
            'timestamp': datetime.utcnow(),
            'strategy': signal.strategy,
            'confidence': signal.confidence
        }

async def _set_position_sl_tp(bot_instance, symbol: str, stop_loss: float = None, take_profit: float = None):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP –¥–ª—è {symbol}: SL={stop_loss}, TP={take_profit}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ enhanced client
        if hasattr(bot_instance, 'enhanced_exchange_client') and bot_instance.enhanced_exchange_client:
            if hasattr(bot_instance.enhanced_exchange_client, 'set_position_sl_tp'):
                result = await bot_instance.enhanced_exchange_client.set_position_sl_tp(
                    symbol=symbol,
                    stop_loss=stop_loss,
                    take_profit=take_profit
                )
                if result:
                    logger.info(f"‚úÖ SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {symbol}")
                    return True
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP –¥–ª—è {symbol}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP: {e}")

async def _save_trade_to_db(bot_instance, symbol: str, trade_data: dict, success: bool):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ –≤ –ë–î"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ {symbol} –≤ –ë–î (success={success})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

async def _send_trade_notification(bot_instance, symbol: str, signal: str, size: float, price: float):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
    try:
        if hasattr(bot_instance, 'notifier') and bot_instance.notifier:
            message = f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞:\n{symbol} {signal}\n–†–∞–∑–º–µ—Ä: {size}\n–¶–µ–Ω–∞: ${price:.4f}"
            await bot_instance.notifier.send_message(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def _calculate_position_size(bot_instance, symbol: str, price: float) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        
    Returns:
        float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –¥–ª—è BTCUSDT)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        available_balance = getattr(bot_instance, 'available_balance', 10000)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å enhanced_exchange_client, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if hasattr(bot_instance, 'enhanced_exchange_client') and bot_instance.enhanced_exchange_client:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
                if hasattr(bot_instance.enhanced_exchange_client, 'get_balance'):
                    balance_info = bot_instance.enhanced_exchange_client.get_balance()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—É—Ç–∏–Ω–æ–π
                    import inspect
                    if inspect.iscoroutine(balance_info):
                        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å
                        logger.debug("get_balance –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                    elif balance_info and isinstance(balance_info, dict) and 'USDT' in balance_info:
                        available_balance = float(balance_info['USDT'].get('free', available_balance))
                        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –∏–∑ enhanced_exchange_client: ${available_balance:.2f}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        risk_per_trade = getattr(bot_instance.config, 'RISK_PER_TRADE_PERCENT', 1.5) / 100
        max_position_percent = getattr(bot_instance.config, 'MAX_POSITION_SIZE_PERCENT', 10) / 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        risk_amount = available_balance * risk_per_trade
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        max_position_value = available_balance * max_position_percent
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        stop_loss_percent = getattr(bot_instance.config, 'STOP_LOSS_PERCENT', 3.0) / 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
        # –†–∞–∑–º–µ—Ä = –†–∏—Å–∫ / (–¶–µ–Ω–∞ * –ü—Ä–æ—Ü–µ–Ω—Ç_—Å—Ç–æ–ø_–ª–æ—Å—Å–∞)
        position_size_by_risk = risk_amount / (price * stop_loss_percent)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        position_size_by_max = max_position_value / price
        
        # –ë–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        position_size = min(position_size_by_risk, position_size_by_max)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Bybit
        min_order_size = _get_min_order_size(bot_instance, symbol)
        if position_size < min_order_size:
            logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size:.4f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_order_size}")
            return 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        current_positions = len(getattr(bot_instance, 'positions', {}))
        max_positions = getattr(bot_instance.config, 'MAX_POSITIONS', 15)
        
        if current_positions >= max_positions:
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π: {current_positions}/{max_positions}")
            return 0.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
        # –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏–π, —Ç–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–π
        position_adjustment = 1.0 - (current_positions / max_positions * 0.5)
        position_size *= position_adjustment
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        position_size = _round_to_precision(bot_instance, position_size, symbol)
        
        logger.debug(f"üí∞ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}:")
        logger.debug(f"   –ë–∞–ª–∞–Ω—Å: ${available_balance:.2f}")
        logger.debug(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${risk_amount:.2f} ({risk_per_trade*100:.1f}%)")
        logger.debug(f"   –†–∞–∑–º–µ—Ä –ø–æ —Ä–∏—Å–∫—É: {position_size_by_risk:.4f}")
        logger.debug(f"   –†–∞–∑–º–µ—Ä –ø–æ –º–∞–∫—Å–∏–º—É–º—É: {position_size_by_max:.4f}")
        logger.debug(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {position_size:.4f}")
        
        return position_size
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

def _get_min_order_size(bot_instance, symbol: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        
    Returns:
        float: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
    min_sizes = {
        'BTCUSDT': 0.001,
        'ETHUSDT': 0.01,
        'BNBUSDT': 0.01,
        'SOLUSDT': 0.1,
        'ADAUSDT': 10,
        'DOTUSDT': 1,
        'MATICUSDT': 10,
        'AVAXUSDT': 0.1,
        'LINKUSDT': 0.1,
        'ATOMUSDT': 0.1
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∏—Ä–∂–∏
    if hasattr(bot_instance, 'exchange_client') and bot_instance.exchange_client:
        try:
            markets = bot_instance.exchange_client.exchange.markets
            if markets and symbol in markets:
                market = markets[symbol]
                if 'limits' in market and 'amount' in market['limits']:
                    return market['limits']['amount']['min']
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å –±–∏—Ä–∂–∏: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return min_sizes.get(symbol, 0.001)

def _round_to_precision(bot_instance, value: float, symbol: str) -> float:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        
    Returns:
        float: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
    precision = {
        'BTCUSDT': 3,
        'ETHUSDT': 3,
        'BNBUSDT': 2,
        'SOLUSDT': 1,
        'ADAUSDT': 0,
        'DOTUSDT': 1,
        'MATICUSDT': 0,
        'AVAXUSDT': 1,
        'LINKUSDT': 1,
        'ATOMUSDT': 1
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∏—Ä–∂–∏
    if hasattr(bot_instance, 'exchange_client') and bot_instance.exchange_client:
        try:
            markets = bot_instance.exchange_client.exchange.markets
            if markets and symbol in markets:
                market = markets[symbol]
                if 'precision' in market and 'amount' in market['precision']:
                    decimals = market['precision']['amount']
                    return round(value, decimals)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å —Å –±–∏—Ä–∂–∏: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    decimals = precision.get(symbol, 3)
    return round(value, decimals)

def _calculate_stop_loss(bot_instance, entry_price: float, side: str) -> float:
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        sl_percent = getattr(bot_instance.config, 'STOP_LOSS_PERCENT', 2.0) / 100
        
        if side == 'BUY':
            return entry_price * (1 - sl_percent)
        else:  # SELL
            return entry_price * (1 + sl_percent)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
        return entry_price * 0.98 if side == 'BUY' else entry_price * 1.02

def _calculate_take_profit(bot_instance, entry_price: float, side: str) -> float:
    """–†–∞—Å—á–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        tp_percent = getattr(bot_instance.config, 'TAKE_PROFIT_PERCENT', 4.0) / 100
        
        if side == 'BUY':
            return entry_price * (1 + tp_percent)
        else:  # SELL
            return entry_price * (1 - tp_percent)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}")
        return entry_price * 1.04 if side == 'BUY' else entry_price * 0.96