#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø BYBIT V5 –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô
======================================================
–§–∞–π–ª: src/exchange/bybit_integration.py

‚úÖ –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –°–û –í–°–ï–ú–ò –ú–ï–¢–û–î–ê–ú–ò
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –ü–†–û–ë–õ–ï–ú–´:
‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ Bybit API
"""

import asyncio
import logging
import time
import threading
from typing import Dict, Any, Optional, Union, List, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass
import pandas as pd

try:
    from .bybit_client_v5 import BybitClientV5, create_bybit_client_from_env, BybitAPIError
    V5_AVAILABLE = True
except ImportError:
    V5_AVAILABLE = False
    BybitClientV5 = None
    create_bybit_client_from_env = None
    BybitAPIError = Exception

try:
    from ..core.unified_config import unified_config
    CONFIG_AVAILABLE = True
except ImportError:
    unified_config = None
    CONFIG_AVAILABLE = False

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç TradingSignal
try:
    from ..common.types import UnifiedTradingSignal as TradingSignal
except ImportError:
    try:
        from ..common.types import TradingSignal
    except ImportError:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        @dataclass
        class TradingSignal:
            action: str
            confidence: float
            price: float
            symbol: str
            order_type: str = 'market'
            stop_loss: Optional[float] = None
            take_profit: Optional[float] = None

logger = logging.getLogger(__name__)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
_cached_clients = {}
_client_locks = {}
_initialization_lock = threading.Lock()
_websocket_initialized = {}

from ..common.types import UnifiedTradingSignal as TradingSignal

@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: str
    size: float
    entry_price: float
    unrealized_pnl: float
    percentage: float
    leverage: float

class BybitWebSocketHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, integration_manager):
        self.integration_manager = integration_manager
        self.callbacks = {
            'position': [],
            'order': [],
            'wallet': [],
            'ticker': [],
            'orderbook': [],
            'trade': [],
            'execution': []
        }
        
    def add_callback(self, event_type: str, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if event_type in self.callbacks:
            self.callbacks[event_type].append(callback)
            logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω callback –¥–ª—è {event_type}")
    
    def handle_private_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = message.get('topic', '')
            data = message.get('data', [])
            
            self.integration_manager.stats['websocket_messages'] += 1
            
            if 'position' in topic:
                self._handle_position_update(data)
            elif 'order' in topic:
                self._handle_order_update(data)
            elif 'wallet' in topic:
                self._handle_wallet_update(data)
            elif 'execution' in topic:
                self._handle_execution_update(data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_public_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = message.get('topic', '')
            data = message.get('data', {})
            
            self.integration_manager.stats['websocket_messages'] += 1
            
            if 'tickers' in topic:
                self._handle_ticker_update(data)
            elif 'orderbook' in topic:
                self._handle_orderbook_update(data)
            elif 'publicTrade' in topic:
                self._handle_trade_update(data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _handle_position_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        try:
            for position_data in data:
                try:
                    symbol = position_data.get('symbol', '')
                    size = float(position_data.get('size', 0))
                    
                    if size > 0:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        position = PositionInfo(
                            symbol=symbol,
                            side=position_data.get('side', ''),
                            size=size,
                            entry_price=float(position_data.get('avgPrice', 0)),
                            unrealized_pnl=float(position_data.get('unrealisedPnl', 0)),
                            percentage=float(position_data.get('unrealisedPnl', 0)) / float(position_data.get('positionValue', 1)) * 100,
                            leverage=float(position_data.get('leverage', 1))
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                        self.integration_manager.cache['positions'][symbol] = position
                        
                        logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {symbol} {position.side} {position.size}")
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ callbacks
                        for callback in self.callbacks.get('position', []):
                            try:
                                callback(position)
                            except Exception as callback_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ position callback: {callback_error}")
                                
                except (ValueError, TypeError) as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _handle_position_update: {e}")
    
    def _handle_order_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            for order in data:
                order_id = order.get('orderId')
                symbol = order.get('symbol')
                status = order.get('orderStatus')
                
                logger.info(f"üìù –û—Ä–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {order_id} {symbol} {status}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                if order_id:
                    self.integration_manager.cache['orders'][order_id] = order
                    self.integration_manager.cache['last_update']['orders'] = time.time()
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.callbacks['order']:
                    try:
                        callback(order)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ order callback: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_order_update: {e}")
    
    def _handle_wallet_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            for wallet_data in data:
                account_type = wallet_data.get('accountType', 'UNIFIED')
                total_equity = wallet_data.get('totalEquity', '0')
                
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {account_type} - {total_equity}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                coins = wallet_data.get('coin', [])
                for coin_data in coins:
                    coin = coin_data.get('coin')
                    if coin:
                        self.integration_manager.cache['balance'][coin] = {
                            'free': float(coin_data.get('availableToWithdraw', 0)),
                            'used': float(coin_data.get('locked', 0)),
                            'total': float(coin_data.get('walletBalance', 0))
                        }
                
                self.integration_manager.cache['last_update']['balance'] = time.time()
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.callbacks['wallet']:
                    try:
                        callback(wallet_data)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ wallet callback: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_wallet_update: {e}")
    
    def _handle_execution_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"""
        try:
            for execution in data:
                exec_id = execution.get('execId')
                symbol = execution.get('symbol')
                side = execution.get('side')
                exec_qty = execution.get('execQty')
                exec_price = execution.get('execPrice')
                
                logger.info(f"‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {symbol} {side} {exec_qty} @ {exec_price}")
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.callbacks['execution']:
                    try:
                        callback(execution)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ execution callback: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_execution_update: {e}")
    
    def _handle_ticker_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        try:
            if isinstance(data, list):
                for ticker in data:
                    symbol = ticker.get('symbol')
                    if symbol:
                        self.integration_manager.cache['market_info'][symbol] = ticker
                        
                self.integration_manager.cache['last_update']['tickers'] = time.time()
                
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['ticker']:
                try:
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ticker callback: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_ticker_update: {e}")
    
    def _handle_orderbook_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            symbol = data.get('s')
            if symbol:
                orderbook_data = {
                    'symbol': symbol,
                    'bids': data.get('b', []),
                    'asks': data.get('a', []),
                    'timestamp': data.get('ts', int(time.time() * 1000))
                }
                
                self.integration_manager.cache['market_info'][f"{symbol}_orderbook"] = orderbook_data
                
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['orderbook']:
                try:
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ orderbook callback: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_orderbook_update: {e}")
    
    def _handle_trade_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['trade']:
                try:
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ trade callback: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_trade_update: {e}")

class BybitIntegrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bybit V5 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, testnet: bool = True):
        self.testnet = testnet
        self.v5_client: Optional[BybitClientV5] = None
        self.is_initialized = False
        
        # WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.ws_connected = {'private': False, 'public': False}
        self.ws_handler = BybitWebSocketHandler(self)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.cache = {
            'positions': {},
            'orders': {},
            'balance': {},
            'symbols': [],
            'market_info': {},
            'last_update': {}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'v5_requests': 0,
            'legacy_requests': 0,
            'websocket_messages': 0,
            'errors': 0,
            'start_time': time.time(),
            'orders_placed': 0,   
            'orders_failed': 0,
            'orders_cancelled': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_update_interval = 30
        self.auto_update_task = None
        self._running = True
        
        logger.info("üîß BybitIntegrationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self, force_new: bool = False) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        global _cached_clients, _client_locks, _websocket_initialized
        
        if not V5_AVAILABLE:
            logger.error("‚ùå Bybit V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        with _initialization_lock:
            try:
                logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
                
                client_key = f"bybit_v5_{'testnet' if self.testnet else 'mainnet'}"
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                if not force_new and client_key in _cached_clients:
                    cached_client = _cached_clients[client_key]
                    if (hasattr(cached_client, 'is_initialized') and 
                        cached_client.is_initialized and
                        hasattr(cached_client, 'ws_manager') and
                        cached_client.ws_manager):
                        
                        logger.info("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π V5 –∫–ª–∏–µ–Ω—Ç")
                        self.v5_client = cached_client
                        self.is_initialized = True
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket
                        if not _websocket_initialized.get(client_key, False):
                            await self._setup_websockets()
                            _websocket_initialized[client_key] = True
                        else:
                            logger.info("‚ÑπÔ∏è WebSocket —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                            if hasattr(self.v5_client.ws_manager, 'ws_connected'):
                                self.ws_connected.update(self.v5_client.ws_manager.ws_connected)
                        
                        return True
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ V5 –∫–ª–∏–µ–Ω—Ç–∞...")
                
                try:
                    self.v5_client = create_bybit_client_from_env(testnet=self.testnet)
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                    initialization_timeout = 60
                    initialized = await asyncio.wait_for(
                        self.v5_client.initialize(), 
                        timeout=initialization_timeout
                    )
                    
                    if initialized:
                        # –ö—ç—à–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                        _cached_clients[client_key] = self.v5_client
                        if client_key not in _client_locks:
                            _client_locks[client_key] = asyncio.Lock()
                        
                        self.is_initialized = True
                        logger.info("‚úÖ V5 –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket
                        await self._setup_websockets()
                        _websocket_initialized[client_key] = True
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        await self._start_auto_update()
                        
                        return True
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å V5 –∫–ª–∏–µ–Ω—Ç")
                        return False
                        
                except asyncio.TimeoutError:
                    logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ({initialization_timeout}s)")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return False

    async def _setup_websockets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.v5_client or not self.v5_client.ws_manager:
                logger.error("‚ùå V5 –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ WebSocket
            if (hasattr(self.v5_client.ws_manager, 'ws_connected') and
                any(self.v5_client.ws_manager.ws_connected.values())):
                logger.info("‚ÑπÔ∏è WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
                self.ws_connected.update(self.v5_client.ws_manager.ws_connected)
                return True
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket
            try:
                private_ws = self.v5_client.start_private_websocket(
                    self.ws_handler.handle_private_message
                )
                if private_ws:
                    logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
                    await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ callback –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    self.ws_connected['private'] = True
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket: {e}")
            
            # –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket
            try:
                public_ws = self.v5_client.start_public_websocket(
                    self.ws_handler.handle_public_message
                )
                if public_ws:
                    logger.info("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    self.ws_connected['public'] = True
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π WebSocket")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞
            if hasattr(self.v5_client.ws_manager, 'ws_connected'):
                self.v5_client.ws_manager.ws_connected.update(self.ws_connected)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self._start_auto_update()
            logger.info("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ")
            
            return any(self.ws_connected.values())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket: {e}")
            return False

    async def _start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.auto_update_task and not self.auto_update_task.done():
            logger.debug("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        try:
            self.auto_update_task = asyncio.create_task(self._auto_update_loop())
            logger.info("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    async def _auto_update_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        while self._running and self.is_initialized:
            try:
                await asyncio.sleep(self.auto_update_interval)
                
                if not self.v5_client:
                    continue
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    positions = await self.get_positions(settleCoin="USDT")
                    if positions:
                        self.cache['positions'] = {pos.symbol: pos for pos in positions}
                        self.cache['last_update']['positions'] = time.time()
                        logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –æ—á–∏—â–∞–µ–º –∫—ç—à
                        self.cache['positions'] = {}
                        self.cache['last_update']['positions'] = time.time()
                        logger.debug("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
                        
                except Exception as e:
                    logger.debug(f"‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                try:
                    balance = await self.get_balance("USDT")
                    if balance is not None and balance > 0:
                        self.cache['balance']['USDT'] = balance
                        self.cache['last_update']['balance'] = time.time()
                        logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {balance} USDT")
                except Exception as e:
                    logger.debug(f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω: {e}")
                    
            except asyncio.CancelledError:
                logger.info("üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5)

    # ================== –û–°–ù–û–í–ù–´–ï –¢–û–†–ì–û–í–´–ï –ú–ï–¢–û–î–´ ==================

    async def get_balance(self, coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ V5 API"""
        try:
            if not self.v5_client:
                raise BybitAPIError("V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.stats['v5_requests'] += 1
            balance = await self.v5_client.get_balance(coin)
            
            return balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            self.stats['errors'] += 1
            raise

    async def get_positions(self, category: str = "linear", symbol: str = None, settleCoin: str = "USDT") -> List[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.v5_client or not self.v5_client.is_initialized:
                await self.initialize()
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º settleCoin –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            response = await self.v5_client.get_positions(
                category=category, 
                symbol=symbol, 
                settleCoin=settleCoin
            )
            
            if not response.get('success', False):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {response.get('error')}")
                return []
            
            positions_data = response.get('data', {})
            positions_list = positions_data.get('list', [])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PositionInfo –æ–±—ä–µ–∫—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            positions = []
            for pos_data in positions_list:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                    size = float(pos_data.get('size', 0))
                    if size == 0:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    
                    position_info = PositionInfo(
                        symbol=pos_data.get('symbol', ''),
                        side=pos_data.get('side', ''),
                        size=size,
                        entry_price=float(pos_data.get('avgPrice', 0)),
                        unrealized_pnl=float(pos_data.get('unrealisedPnl', 0)),
                        percentage=float(pos_data.get('unrealisedPnl', 0)) / float(pos_data.get('positionValue', 1)) * 100,
                        leverage=float(pos_data.get('leverage', 1))
                    )
                    positions.append(position_info)
                    
                except (ValueError, TypeError, KeyError) as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ {pos_data}: {e}")
                    continue
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            return positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_positions: {e}")
            return []

    async def place_smart_order(self, signal: TradingSignal, amount: float = None, **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.v5_client or not self.v5_client.is_initialized:
                await self.initialize()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            symbol = signal.symbol
            side = "Buy" if signal.action.upper() == "BUY" else "Sell"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if amount:
                qty = str(amount)
            elif hasattr(signal, 'size') and signal.size:
                qty = str(signal.size)
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
                balance = await self.get_balance("USDT")
                risk_amount = balance * 0.02  # 2% —Ä–∏—Å–∫–∞
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                market_data = await self.v5_client.get_market_data(symbol)
                if not market_data:
                    raise BybitAPIError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                
                current_price = float(market_data['lastPrice'])
                qty = str(round(risk_amount / current_price, 4))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            order_type = getattr(signal, 'order_type', 'Market').title()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'category': 'linear',
                'symbol': symbol,
                'side': side,
                'order_type': order_type,
                'qty': qty
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if order_type == 'Limit' and hasattr(signal, 'price') and signal.price:
                order_params['price'] = str(signal.price)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if hasattr(signal, 'stop_loss') and signal.stop_loss:
                order_params['stop_loss'] = str(signal.stop_loss)
            
            if hasattr(signal, 'take_profit') and signal.take_profit:
                order_params['take_profit'] = str(signal.take_profit)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º TP/SL –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏
            tp_sl_params = kwargs.get('tp_sl_params', {})
            if tp_sl_params.get('takeProfit') or tp_sl_params.get('stopLoss'):
                order_params['tpslMode'] = 'Full'
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            response = await self.v5_client.place_order(**order_params)
            
            if response.get('retCode') == 0:
                result = response.get('result', {})
                order_id = result.get('orderId')
                
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {symbol} {side} {qty} - ID: {order_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['orders_placed'] += 1
                
                return {
                    'success': True,
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'qty': qty,
                    'details': result
                }
            else:
                error_msg = response.get('retMsg', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                
                self.stats['orders_failed'] += 1
                
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': response.get('retCode')
                }
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ place_smart_order: {e}")
            self.stats['orders_failed'] += 1
            return {
                'success': False,
                'error': str(e)
            }

    async def close_position(self, symbol: str) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.v5_client:
                return {"success": False, "error": "V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions_response = await self.v5_client.get_positions("linear", symbol)
            if not positions_response.get('success'):
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"}
            
            position_list = positions_response.get('data', {}).get('list', [])
            if not position_list:
                return {"success": True, "message": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            position = position_list[0]
            size = float(position['size'])
            
            if size == 0:
                return {"success": True, "message": "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "Sell" if position['side'] == "Buy" else "Buy"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º market –æ—Ä–¥–µ—Ä–æ–º
            result = await self.v5_client.place_market_order(
                symbol=symbol,
                side=close_side,
                qty=str(abs(size)),
                category="linear",
                reduce_only=True
            )
            
            if result.get('retCode') == 0:
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                return {"success": True, "order_id": result['result']['orderId']}
            else:
                return {"success": False, "error": result.get('retMsg')}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def close_all_positions(self, symbols: List[str] = None) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = await self.get_positions()
            
            results = []
            for position in positions:
                if symbols is None or position.symbol in symbols:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ close_position –∏–∑ v5_client
                    result = await self.close_position(position.symbol)
                    results.append({
                        "symbol": position.symbol,
                        "result": result
                    })
            
            success_count = sum(1 for r in results if r['result'].get('success'))
            
            return {
                "success": True,
                "closed_positions": success_count,
                "total_positions": len(results),
                "details": results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"success": False, "error": str(e)}

    async def emergency_stop(self) -> dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ v5_client
            cancel_result = await self.v5_client._make_request('POST', '/v5/order/cancel-all', {"category": "linear"})
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            close_result = await self.close_all_positions()
            
            logger.warning("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return {
                "success": True,
                "orders_cancelled": cancel_result.get('retCode') == 0,
                "positions_closed": close_result.get('success', False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return {"success": False, "error": str(e)}

    # ================== –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ==================

    async def get_market_overview(self, symbols: List[str] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        try:
            if symbols is None:
                symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT", "DOTUSDT"]
            
            market_data = {}
            
            for symbol in symbols:
                ticker_data = await self.v5_client.get_market_data(symbol)
                if ticker_data:
                    market_data[symbol] = {
                        'price': float(ticker_data['lastPrice']),
                        'change_24h': float(ticker_data['price24hPcnt']) * 100,
                        'volume_24h': float(ticker_data['volume24h']),
                        'high_24h': float(ticker_data['highPrice24h']),
                        'low_24h': float(ticker_data['lowPrice24h'])
                    }
            
            return {
                "success": True,
                "timestamp": datetime.now(),
                "data": market_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def get_portfolio_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.get_positions()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await self.get_balance("USDT")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            total_unrealized_pnl = sum(pos.unrealized_pnl for pos in positions)
            total_position_value = sum(pos.size * pos.entry_price for pos in positions)
            
            portfolio_stats = {
                "balance": balance,
                "positions_count": len(positions),
                "total_position_value": total_position_value,
                "unrealized_pnl": total_unrealized_pnl,
                "unrealized_pnl_percent": (total_unrealized_pnl / balance * 100) if balance > 0 else 0,
                "positions": [
                    {
                        "symbol": pos.symbol,
                        "side": pos.side,
                        "size": pos.size,
                        "entry_price": pos.entry_price,
                        "unrealized_pnl": pos.unrealized_pnl,
                        "percentage": pos.percentage
                    }
                    for pos in positions
                ]
            }
            
            return {"success": True, "data": portfolio_stats}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {"success": False, "error": str(e)}

    # ================== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–û–î–´ ==================

    def get_integration_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        uptime = time.time() - self.stats['start_time']
        
        return {
            'uptime_seconds': uptime,
            'uptime_formatted': str(timedelta(seconds=int(uptime))),
            'v5_client_available': self.v5_client is not None,
            'is_initialized': self.is_initialized,
            'websocket_status': self.ws_connected,
            'requests': {
                'v5_requests': self.stats['v5_requests'],
                'legacy_requests': self.stats['legacy_requests'],
                'total': self.stats['v5_requests'] + self.stats['legacy_requests']
            },
            'orders': {
                'placed': self.stats['orders_placed'],
                'failed': self.stats['orders_failed'],
                'cancelled': self.stats['orders_cancelled']
            },
            'websocket_messages': self.stats['websocket_messages'],
            'errors': self.stats['errors'],
            'cache_info': {
                'positions_count': len(self.cache['positions']),
                'last_position_update': self.cache['last_update'].get('positions'),
                'last_balance_update': self.cache['last_update'].get('balance')
            }
        }

    def _handle_bybit_response(self, response: dict, operation: str) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API"""
        if not response:
            return {'success': False, 'error': f'{operation}: No response from server'}
        
        ret_code = response.get('retCode', -1)
        ret_msg = response.get('retMsg', 'Unknown error')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ Bybit
        if ret_code == 0:
            return {'success': True, 'data': response.get('result', {})}
        elif ret_code == 10006:  # Rate limit
            return {'success': False, 'error': 'rate_limit', 'retry_after': 1}
        elif ret_code in [10003, 10004, 10005]:  # Auth errors
            return {'success': False, 'error': 'authentication_failed', 'details': ret_msg}
        elif ret_code == 10001:  # Invalid parameter
            return {'success': False, 'error': 'invalid_parameter', 'details': ret_msg}
        else:
            return {'success': False, 'error': f'{operation}_failed', 'code': ret_code, 'details': ret_msg}

    # ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==================

    async def get_order_history(self, symbol: str = None, limit: int = 50) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            if not self.v5_client:
                return {'success': False, 'data': []}
            
            params = {
                'category': 'linear',
                'limit': limit
            }
            if symbol:
                params['symbol'] = symbol
                
            response = await self.v5_client.get_order_history(**params)
            
            if response.get('retCode') == 0:
                return {
                    'success': True,
                    'data': response.get('result', {}).get('list', [])
                }
            
            return {'success': False, 'data': []}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {'success': False, 'data': []}

    async def cancel_order(self, symbol: str, order_id: str) -> dict:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if not self.v5_client:
                return {"success": False, "error": "V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            response = await self.v5_client.cancel_order("linear", symbol, order_id)
            
            if response.get('retCode') == 0:
                self.stats['orders_cancelled'] += 1
                logger.info(f"‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {order_id}")
            
            return self._handle_bybit_response(response, "cancel_order")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"success": False, "error": str(e)}

    # ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–°–£–†–°–ê–ú–ò ==================

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self._running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if self.auto_update_task and not self.auto_update_task.done():
                self.auto_update_task.cancel()
                try:
                    await self.auto_update_task
                except asyncio.CancelledError:
                    pass
            
            # –û—á–∏—â–∞–µ–º V5 –∫–ª–∏–µ–Ω—Ç
            if self.v5_client:
                self.v5_client.cleanup()
            
            logger.info("üßπ BybitIntegrationManager –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

class EnhancedUnifiedExchangeClient:
    """Enhanced –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Bybit V5 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, testnet: bool = True):
        self.testnet = testnet
        self.bybit_integration = BybitIntegrationManager(testnet)
        self.is_ready = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            success = await self.bybit_integration.initialize()
            if success:
                self.is_ready = True
                logger.info("‚úÖ Enhanced –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ enhanced –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    # ================== –¢–û–†–ì–û–í–´–ï –ú–ï–¢–û–î–´ ==================
    
    async def get_balance(self, coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.get_balance(coin)
    
    async def place_order(self, signal: TradingSignal, **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.place_smart_order(signal, **kwargs)
    
    async def get_positions(self) -> List[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.get_positions()
    
    async def close_position(self, symbol: str) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.close_position(symbol)
    
    async def emergency_stop(self) -> dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.emergency_stop()
    
    # ================== –ú–ï–¢–û–î–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==================
    
    async def fetch_ticker(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_collector"""
        try:
            if not self.bybit_integration.v5_client:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ V5 API
            ticker_data = await self.bybit_integration.v5_client.get_market_data(symbol)
            
            if ticker_data:
                return {
                    'symbol': symbol,
                    'last': float(ticker_data.get('lastPrice', 0)),
                    'bid': float(ticker_data.get('bid1Price', 0)),
                    'ask': float(ticker_data.get('ask1Price', 0)),
                    'baseVolume': float(ticker_data.get('volume24h', 0)),
                    'quoteVolume': float(ticker_data.get('turnover24h', 0)),
                    'percentage': float(ticker_data.get('price24hPcnt', 0)) * 100,
                    'high': float(ticker_data.get('highPrice24h', 0)),
                    'low': float(ticker_data.get('lowPrice24h', 0)),
                    'timestamp': int(time.time() * 1000)
                }
            
            return {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
            return {}
            
            
    async def get_klines(self, symbol: str, interval: str = '1h', limit: int = 200) -> dict:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_collector
        """
        try:
            if not self.bybit_integration.v5_client:
                logger.error("‚ùå V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            logger.debug(f"üìä –ó–∞–ø—Ä–æ—Å klines –¥–ª—è {symbol}, interval={interval}, limit={limit}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ V5 –∫–ª–∏–µ–Ω—Ç–∞
            response = await self.bybit_integration.v5_client.get_klines(
                category="linear",
                symbol=symbol,
                interval=interval,
                limit=limit
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"üìã –û—Ç–≤–µ—Ç –æ—Ç API: {json.dumps(response, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            if response and response.get('retCode') == 0:
                return response
            else:
                error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è klines –¥–ª—è {symbol}: {error_msg}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ klines –¥–ª—è {symbol}: {e}", exc_info=True)
            return None
            
    async def get_market_data(self, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ - –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò"""
        try:
            ticker_data = await self.get_tickers("linear", symbol)
            if ticker_data.get('retCode') == 0:
                result = ticker_data.get('result', {})
                ticker_list = result.get('list', [])
                if ticker_list:
                    return ticker_list[0]
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market data –¥–ª—è {symbol}: {e}")
            return None
    
    async def fetch_ohlcv(self, symbol: str, timeframe: str = '5m', limit: int = 100) -> List[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_collector"""
        try:
            if not self.bybit_integration.v5_client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º kline –¥–∞–Ω–Ω—ã–µ
            klines = await self.bybit_integration.v5_client.get_klines(
                category="linear",
                symbol=symbol,
                interval=timeframe,
                limit=limit
            )
            
            if klines and klines.get('retCode') == 0:
                klines_list = klines.get('result', {}).get('list', [])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CCXT [timestamp, open, high, low, close, volume]
                ohlcv_data = []
                for kline in klines_list:
                    ohlcv_data.append([
                        int(kline[0]),  # timestamp
                        float(kline[1]),  # open
                        float(kline[2]),  # high
                        float(kline[3]),  # low
                        float(kline[4]),  # close
                        float(kline[5])   # volume
                    ])
                
                return ohlcv_data
            
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–ª—è {symbol}: {e}")
            return []
    
    async def fetch_trades(self, symbol: str, limit: int = 100) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_collector"""
        try:
            if not self.bybit_integration.v5_client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            trades = await self.bybit_integration.v5_client.get_public_trading_records(
                category="linear",
                symbol=symbol,
                limit=limit
            )
            
            if trades and trades.get('retCode') == 0:
                trades_list = trades.get('result', {}).get('list', [])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CCXT
                ccxt_trades = []
                for trade in trades_list:
                    ccxt_trades.append({
                        'id': trade.get('execId'),
                        'price': float(trade.get('price', 0)),
                        'amount': float(trade.get('size', 0)),
                        'side': trade.get('side', '').lower(),
                        'timestamp': int(trade.get('time', 0)),
                        'datetime': datetime.fromtimestamp(int(trade.get('time', 0)) / 1000).isoformat()
                    })
                
                return ccxt_trades
            
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {e}")
            return []
    
    async def fetch_order_book(self, symbol: str, limit: int = 25) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_collector"""
        try:
            if not self.bybit_integration.v5_client:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º orderbook
            orderbook = await self.bybit_integration.v5_client.get_orderbook(
                category="linear",
                symbol=symbol,
                limit=limit
            )
            
            if orderbook and orderbook.get('retCode') == 0:
                result = orderbook.get('result', {})
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CCXT
                return {
                    'bids': [[float(bid[0]), float(bid[1])] for bid in result.get('b', [])],
                    'asks': [[float(ask[0]), float(ask[1])] for ask in result.get('a', [])],
                    'timestamp': int(result.get('ts', int(time.time() * 1000))),
                    'datetime': datetime.fromtimestamp(int(result.get('ts', int(time.time() * 1000))) / 1000).isoformat()
                }
            
            return {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook –¥–ª—è {symbol}: {e}")
            return {}
    
    # ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==================
    
    async def get_ticker(self, symbol: str) -> dict:
        """–ê–ª–∏–∞—Å –¥–ª—è fetch_ticker"""
        return await self.fetch_ticker(symbol)
    
    async def get_klines(self, symbol: str, interval: str = '5m', limit: int = 100) -> List[List]:
        """–ê–ª–∏–∞—Å –¥–ª—è fetch_ohlcv"""
        return await self.fetch_ohlcv(symbol, interval, limit)
    
    async def get_order_book(self, symbol: str, limit: int = 25) -> dict:
        """–ê–ª–∏–∞—Å –¥–ª—è fetch_order_book"""
        return await self.fetch_order_book(symbol, limit)
    
    # ================== –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ==================
    
    async def get_market_overview(self, symbols: List[str] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        return await self.bybit_integration.get_market_overview(symbols)
    
    async def get_portfolio_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return await self.bybit_integration.get_portfolio_summary()
    
    # ================== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–û–î–´ ==================
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return self.bybit_integration.get_integration_stats()
    
    async def get_order_history(self, symbol: str = None, limit: int = 50) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        return await self.bybit_integration.get_order_history(symbol, limit)
    
    # ================== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô ==================
    
    async def connect(self, exchange_name: str = 'bybit', testnet: bool = True) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bybit_integration –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.is_ready:
                success = await self.initialize()
                if not success:
                    return False
            
            self.is_ready = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        try:
            await self.cleanup()
            self.is_ready = False
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.is_ready and self.bybit_integration.is_initialized
    
    # ================== LEGACY SUPPORT ==================
    
    async def place_order_legacy(self, symbol: str, side: str, amount: float, 
                                price: float = None, order_type: str = 'market',
                                params: Dict[str, Any] = None) -> Dict[str, Any]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (legacy –º–µ—Ç–æ–¥)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è place_smart_order
            signal = TradingSignal(
                action='BUY' if side.lower() == 'buy' else 'SELL',
                confidence=0.8,
                price=price or 0,
                symbol=symbol,
                order_type=order_type,
                stop_loss=params.get('stopLoss') if params else None,
                take_profit=params.get('takeProfit') if params else None
            )
            
            return await self.bybit_integration.place_smart_order(signal, amount=amount)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"success": False, "error": str(e)}
    
    # ================== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==================
    
    async def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        from datetime import datetime
        
        health_status = {
            'overall_status': 'unknown',
            'timestamp': datetime.utcnow().isoformat(),
            'components': {
                'connection': False,
                'authentication': False,
                'websocket': False,
                'trading': False,
                'data_feed': False
            },
            'errors': [],
            'statistics': self.bybit_integration.get_integration_stats()
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.bybit_integration.is_initialized:
                health_status['components']['connection'] = True
            else:
                health_status['errors'].append('Exchange –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                if (self.bybit_integration.v5_client and 
                    self.bybit_integration.v5_client.is_initialized):
                    health_status['components']['authentication'] = True
            except Exception as e:
                health_status['errors'].append(f'–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
            if any(self.bybit_integration.ws_connected.values()):
                health_status['components']['websocket'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            health_status['components']['trading'] = (
                health_status['components']['connection'] and 
                health_status['components']['authentication']
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ data feed
            health_status['components']['data_feed'] = health_status['components']['websocket']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            critical_components = ['connection', 'authentication']
            if all(health_status['components'][comp] for comp in critical_components):
                health_status['overall_status'] = 'healthy'
            elif any(health_status['components'][comp] for comp in critical_components):
                health_status['overall_status'] = 'degraded'
            else:
                health_status['overall_status'] = 'unhealthy'
            
            return health_status
            
        except Exception as e:
            health_status['overall_status'] = 'error'
            health_status['errors'].append(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ health_check: {str(e)}')
            return health_status
    
    # ================== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ==================
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ enhanced –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.bybit_integration.cleanup()

# ================== FACTORY FUNCTIONS ==================

def get_enhanced_exchange_client(testnet: bool = True) -> EnhancedUnifiedExchangeClient:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ enhanced exchange –∫–ª–∏–µ–Ω—Ç–∞"""
    return EnhancedUnifiedExchangeClient(testnet)

def upgrade_existing_client(base_client, testnet: bool = True) -> EnhancedUnifiedExchangeClient:
    """–ê–ø–≥—Ä–µ–π–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ enhanced –≤–µ—Ä—Å–∏–∏"""
    logger.info("üîÑ –ê–ø–≥—Ä–µ–π–¥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ enhanced –≤–µ—Ä—Å–∏–∏...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º testnet —Ä–µ–∂–∏–º
    testnet = getattr(base_client, 'testnet', True)
    
    enhanced_client = EnhancedUnifiedExchangeClient(testnet=testnet)
    
    logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–ø–≥—Ä–µ–π–¥–µ–Ω")
    return enhanced_client

# ================== EXPORTS ==================

__all__ = [
    'BybitIntegrationManager',
    'EnhancedUnifiedExchangeClient', 
    'BybitWebSocketHandler',
    'upgrade_existing_client',
    'get_enhanced_exchange_client',
    'TradingSignal',
    'PositionInfo'
]