#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±–æ—Ç–∞
–§–∞–π–ª: src/core/component_system.py

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
"""

import logging
import asyncio
from typing import Dict, Any, List, Optional, Callable, Set, Tuple
from enum import Enum
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

class ComponentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    NOT_INITIALIZED = "not_initialized"
    INITIALIZING = "initializing"
    READY = "ready"
    FAILED = "failed"
    DISABLED = "disabled"

@dataclass
class ComponentInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""
    name: str
    status: ComponentStatus
    instance: Any = None
    error: Optional[str] = None
    dependencies: List[str] = None
    is_critical: bool = False
    retry_count: int = 0
    max_retries: int = 3
    
    def __post_init__(self):
        if self.dependencies is None:
            self.dependencies = []

class ComponentManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self):
        self.components: Dict[str, ComponentInfo] = {}
        self.initialization_order: List[str] = []
        self._lock = asyncio.Lock()
        
    def register_component(
        self,
        name: str,
        initializer: Callable,
        dependencies: List[str] = None,
        is_critical: bool = False,
        max_retries: int = 3
    ):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            initializer: –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            dependencies: –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            is_critical: –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        if dependencies is None:
            dependencies = []
            
        self.components[name] = ComponentInfo(
            name=name,
            status=ComponentStatus.NOT_INITIALIZED,
            dependencies=dependencies,
            is_critical=is_critical,
            max_retries=max_retries
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setattr(self, f"_init_{name}", initializer)
        
        logger.debug(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {name}")
    
    def _resolve_dependencies(self) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        
        Returns:
            List[str]: –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            
        Raises:
            ValueError: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        visited = set()
        temp_visited = set()
        order = []
        dependency_path = []  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        def visit(component_name: str):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–∏–∫–ª–æ–≤"""
            
            # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if component_name in temp_visited:
                cycle_path = " -> ".join(dependency_path + [component_name])
                logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:")
                logger.error(f"   –ü—É—Ç—å —Ü–∏–∫–ª–∞: {cycle_path}")
                logger.error(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                if component_name in self.components:
                    deps = self.components[component_name].dependencies
                    logger.error(f"   –ï–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps}")
                
                raise ValueError(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {cycle_path}")
            
            if component_name not in visited:
                temp_visited.add(component_name)
                dependency_path.append(component_name)  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–∏
                
                component = self.components.get(component_name)
                if component:
                    logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {component_name}: {component.dependencies}")
                    
                    for dep in component.dependencies:
                        if dep in self.components:
                            visit(dep)
                        else:
                            # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
                            logger.warning(f"‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '{dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component_name}'")
                            logger.warning(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {list(self.components.keys())}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–ø–µ—á–∞—Ç–∫–æ–π
                            similar_components = [name for name in self.components.keys() 
                                                if dep.lower() in name.lower() or name.lower() in dep.lower()]
                            if similar_components:
                                logger.warning(f"   –í–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É: {similar_components}")
                else:
                    logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                
                dependency_path.pop()  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –∏–∑ –ø—É—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                temp_visited.remove(component_name)
                visited.add(component_name)
                order.append(component_name)
                
                logger.debug(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {len(self.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        # –ü–æ—Å–µ—â–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for component_name in self.components:
            if component_name not in visited:
                logger.debug(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component_name}")
                try:
                    visit(component_name)
                except ValueError as e:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –æ—à–∏–±–∫–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component_name}': {e}")
                    raise
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.info(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ({len(order)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤): {' -> '.join(order)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        critical_components = [name for name, comp in self.components.items() if comp.is_critical]
        critical_positions = {name: order.index(name) for name in critical_components if name in order}
        logger.info(f"üî• –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏: {critical_positions}")
        
        return order
    
    def validate_dependencies(self) -> Tuple[bool, List[str]]:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        
        Returns:
            Tuple[bool, List[str]]: (–í–∞–ª–∏–¥–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
        """
        errors = []
        
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        for component_name, component in self.components.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            for dep in component.dependencies:
                if dep not in self.components:
                    error_msg = f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ '{dep}'"
                    errors.append(error_msg)
                    logger.error(f"‚ùå {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if component.is_critical:
                for dep in component.dependencies:
                    if dep in self.components and not self.components[dep].is_critical:
                        warning_msg = f"–ö—Ä–∏—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ '{dep}'"
                        logger.warning(f"‚ö†Ô∏è {warning_msg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            self._resolve_dependencies()
            logger.info("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        except ValueError as e:
            errors.append(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {str(e)}")
        
        is_valid = len(errors) == 0
        
        if is_valid:
            logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã")
        else:
            logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
            for error in errors:
                logger.error(f"   ‚Ä¢ {error}")
        
        return is_valid, errors
    
    async def diagnose_component_health(self) -> Dict[str, Any]:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        diagnosis = {
            'timestamp': datetime.utcnow().isoformat(),
            'total_components': len(self.components),
            'components_by_status': {},
            'critical_components': {},
            'dependency_graph': {},
            'initialization_order': self.initialization_order.copy(),
            'health_score': 0,
            'recommendations': []
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        critical_ready = 0
        critical_total = 0
        
        for name, component in self.components.items():
            status = component.status.value
            status_counts[status] = status_counts.get(status, 0) + 1
            
            if component.is_critical:
                critical_total += 1
                if component.status == ComponentStatus.READY:
                    critical_ready += 1
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            diagnosis['dependency_graph'][name] = {
                'dependencies': component.dependencies.copy(),
                'status': status,
                'is_critical': component.is_critical,
                'error': component.error,
                'retry_count': component.retry_count
            }
        
        diagnosis['components_by_status'] = status_counts
        diagnosis['critical_components'] = {
            'ready': critical_ready,
            'total': critical_total,
            'percentage': (critical_ready / critical_total * 100) if critical_total > 0 else 0
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π health score
        ready_count = status_counts.get('ready', 0)
        total_count = len(self.components)
        critical_health = diagnosis['critical_components']['percentage']
        
        diagnosis['health_score'] = int((ready_count / total_count * 50) + (critical_health * 0.5))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if critical_ready < critical_total:
            diagnosis['recommendations'].append("–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ")
        
        if status_counts.get('failed', 0) > 0:
            diagnosis['recommendations'].append(f"–ï—Å—Ç—å {status_counts['failed']} –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if diagnosis['health_score'] < 80:
            diagnosis['recommendations'].append("–ù–∏–∑–∫–∏–π health score - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if not diagnosis['recommendations']:
            diagnosis['recommendations'].append("–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        return diagnosis
    
    async def initialize_all(self) -> Dict[str, bool]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        async with self._lock:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                self.initialization_order = self._resolve_dependencies()
                logger.info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {self.initialization_order}")
            except ValueError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                return {}
            
            results = {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            for component_name in self.initialization_order:
                result = await self._initialize_component(component_name)
                results[component_name] = result
                
                # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                component = self.components[component_name]
                if component.is_critical and not result:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    break
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._log_initialization_summary(results)
            return results
    
    async def _initialize_component(self, name: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        component = self.components.get(name)
        if not component:
            logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for dep in component.dependencies:
            dep_component = self.components.get(dep)
            if not dep_component or dep_component.status != ComponentStatus.READY:
                logger.error(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep} –¥–ª—è {name} –Ω–µ –≥–æ—Ç–æ–≤–∞")
                component.status = ComponentStatus.FAILED
                component.error = f"Dependency {dep} not ready"
                return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        for attempt in range(component.max_retries):
            try:
                logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º {name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{component.max_retries})")
                component.status = ComponentStatus.INITIALIZING
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                initializer = getattr(self, f"_init_{name}", None)
                if not initializer:
                    raise AttributeError(f"Initializer for {name} not found")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                if asyncio.iscoroutinefunction(initializer):
                    instance = await initializer()
                else:
                    instance = initializer()
                
                # –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                component.instance = instance
                component.status = ComponentStatus.READY
                component.error = None
                component.retry_count = attempt + 1
                
                logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {str(e)}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                component.error = error_msg
                component.retry_count = attempt + 1
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                if attempt == component.max_retries - 1:
                    component.status = ComponentStatus.FAILED
                    logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ {component.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    return False
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(1)
        
        return False
    
    def get_component(self, name: str) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            Any: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        component = self.components.get(name)
        if component and component.status == ComponentStatus.READY:
            return component.instance
        return None
    
    def get_status(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        status = {}
        for name, component in self.components.items():
            status[name] = {
                'status': component.status.value,
                'is_critical': component.is_critical,
                'dependencies': component.dependencies,
                'retry_count': component.retry_count,
                'error': component.error,
                'has_instance': component.instance is not None
            }
        return status
    
    async def restart_component(self, name: str) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        component = self.components.get(name)
        if not component:
            return False
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {name}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        component.status = ComponentStatus.NOT_INITIALIZED
        component.instance = None
        component.error = None
        component.retry_count = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        return await self._initialize_component(name)
    
    def _log_initialization_summary(self, results: Dict[str, bool]):
        """
        –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        total = len(results)
        success = sum(1 for r in results.values() if r)
        failed = total - success
        
        logger.info("=" * 50)
        logger.info("üìä –ò–¢–û–ì–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        logger.info("=" * 50)
        logger.info(f"üìà –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")
        logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
        logger.info("=" * 50)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        for name, success in results.items():
            component = self.components[name]
            status_icon = "‚úÖ" if success else "‚ùå"
            critical_icon = "üî•" if component.is_critical else "üì¶"
            
            logger.info(f"{status_icon} {critical_icon} {name}")
            if not success and component.error:
                logger.info(f"    ‚îî‚îÄ –û—à–∏–±–∫–∞: {component.error}")
        
        logger.info("=" * 50)
        
    def is_ready(self, component_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ —Ä–∞–±–æ—Ç–µ
        
        –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:
        1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
        2. –ò–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å READY
        3. –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        
        Args:
            component_name (str): –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
            
        Raises:
            None: –ú–µ—Ç–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            
        Example:
            >>> component_manager.is_ready('exchange')
            True
            >>> component_manager.is_ready('non_existent')
            False
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if component_name not in self.components:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
            component_info = self.components[component_name]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            is_component_ready = component_info.status == ComponentStatus.READY
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            if not is_component_ready and component_info.is_critical:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –Ω–µ –≥–æ—Ç–æ–≤. "
                            f"–°—Ç–∞—Ç—É—Å: {component_info.status.value}")
            elif not is_component_ready:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –Ω–µ –≥–æ—Ç–æ–≤. "
                             f"–°—Ç–∞—Ç—É—Å: {component_info.status.value}")
            else:
                logger.debug(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            return is_component_ready
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component_name}': {str(e)}")
            return False
    
    def get_component_status(self, component_name: str) -> Optional[ComponentStatus]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            component_name (str): –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            Optional[ComponentStatus]: –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if component_name not in self.components:
            logger.debug(f"üîç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        return self.components[component_name].status
    
    def get_ready_components(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º READY
        """
        ready_components = []
        for name, component in self.components.items():
            if component.status == ComponentStatus.READY:
                ready_components.append(name)
        
        return ready_components
    
    def get_failed_components(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º FAILED
        """
        failed_components = []
        for name, component in self.components.items():
            if component.status == ComponentStatus.FAILED:
                failed_components.append(name)
        
        return failed_components
    
    def validate_critical_components(self) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            Tuple[bool, List[str]]: (–í—Å–µ –ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –≥–æ—Ç–æ–≤—ã, –°–ø–∏—Å–æ–∫ –Ω–µ–≥–æ—Ç–æ–≤—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö)
        """
        critical_not_ready = []
        
        for name, component in self.components.items():
            if component.is_critical and component.status != ComponentStatus.READY:
                critical_not_ready.append(name)
        
        all_critical_ready = len(critical_not_ready) == 0
        
        if not all_critical_ready:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã: {critical_not_ready}")
        else:
            logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        
        return all_critical_ready, critical_not_ready

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
component_manager = ComponentManager()