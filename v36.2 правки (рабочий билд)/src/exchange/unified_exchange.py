"""
–ï–î–ò–ù–´–ô –ö–õ–ò–ï–ù–¢ –ë–ò–†–ñ–ò - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö exchange –º–æ–¥—É–ª–µ–π
======================================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑:
- client.py
- real_client.py

–§–∞–π–ª: src/exchange/unified_exchange.py
"""

import asyncio
import ccxt
import json
import logging
import random
import time
from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union, Tuple
import urllib3
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

try:
    from ..core.unified_config import unified_config
    UNIFIED_CONFIG_AVAILABLE = True
except ImportError:
    unified_config = None
    UNIFIED_CONFIG_AVAILABLE = False

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ –õ–û–ì–ì–ï–†–ê - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback
import logging
logger = logging.getLogger('crypto_bot')



# =================================================================
# –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´ (–∏–∑ client.py)
# =================================================================

# –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
class CustomHTTPAdapter(HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º maxsize –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        if 'maxsize' in kwargs:
            kwargs.pop('maxsize')
        kwargs['maxsize'] = 50  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à —Ä–∞–∑–º–µ—Ä
        return super().init_poolmanager(*args, **kwargs)
        
class BaseExchangeClient(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏—Ä–∂
    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ params –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self):
        self.exchange = None
        self.is_connected = False
        self.last_request_time = None
        self.rate_limiter = {}
        self.testnet = True
        
    @abstractmethod
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        pass
    
    @abstractmethod
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        pass
    
    @abstractmethod
    async def get_balance(self, coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        pass
    
    @abstractmethod
    async def place_order(self, symbol: str, side: str, amount: float, 
                         price: float = None, order_type: str = 'market',
                         params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ ('buy' –∏–ª–∏ 'sell')
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ('market' –∏–ª–∏ 'limit')
            params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
                - stopLoss: —Ü–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
                - takeProfit: —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                - reduceOnly: —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                - postOnly: —Ç–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä –æ—Ä–¥–µ—Ä
                
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        pass
    
    async def place_order_from_signal(self, signal: 'UnifiedTradingSignal', 
                                     amount: float = None) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {}
        if signal.stop_loss:
            params['stopLoss'] = signal.stop_loss
        if signal.take_profit:
            params['takeProfit'] = signal.take_profit
            
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        return await self.place_order(
            symbol=signal.symbol,
            side=signal.action_str.lower(),
            amount=amount or self._calculate_position_size(signal),
            price=signal.price if signal.signal_type == 'limit' else None,
            order_type='market',
            params=params
        )
    
    @abstractmethod
    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        pass
    
    @abstractmethod
    async def get_ticker(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞"""
        pass
    
    @abstractmethod
    async def get_order_book(self, symbol: str, limit: int = 20) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        pass
    
    @abstractmethod
    async def get_positions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        pass
    
    @abstractmethod
    async def close_position(self, symbol: str) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        pass
    
    def _calculate_position_size(self, signal: 'UnifiedTradingSignal') -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        return 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    def _check_rate_limit(self, endpoint: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        if endpoint in self.rate_limiter:
            if current_time - self.rate_limiter[endpoint] < 0.1:  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                return False
        self.rate_limiter[endpoint] = current_time
        return True

# =================================================================
# –û–°–ù–û–í–ù–û–ô –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ö–õ–ò–ï–ù–¢
# =================================================================

class UnifiedExchangeClient(BaseExchangeClient):
    """
    –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ client.py + real_client.py
    """
    
    def __init__(self):
        super().__init__()
        self.exchange = None
        self.is_connected = False
        self.supported_exchanges = ['bybit', 'binance', 'okx']
        self.current_exchange = 'bybit'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Bybit
        self.markets = {}
        self.last_price_update = {}
        self.connection_attempts = 0
        self.max_connection_attempts = 3
        self._session = None
        self._setup_connection_pool()
        
        
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            logger.info("üîó UnifiedExchangeClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except:
            print("INFO: üîó UnifiedExchangeClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    # =================================================================
    # –ú–ï–¢–û–î–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (–∏–∑ real_client.py)
    # =================================================================
    
    def _setup_connection_pool(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è CCXT"""
        try:
            import requests
            session = requests.Session()
            
            retry_strategy = Retry(
                total=3,
                backoff_factor=0.3,
                status_forcelist=[429, 500, 502, 503, 504],
            )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º CustomHTTPAdapter –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            adapter = CustomHTTPAdapter(max_retries=retry_strategy)
            
            session.mount("http://", adapter)
            session.mount("https://", adapter)
            
            self._session = session
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            
    async def _wait_for_rate_limit(self, endpoint: str):
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
        –ª–∏–º–∏—Ç–æ–≤ API –±–∏—Ä–∂–∏.
        """
        try:
            if endpoint in self.rate_limiter:
                last_call_time = self.rate_limiter[endpoint]
                elapsed = time.time() - last_call_time
                if elapsed < 0.2: # 200ms
                    await asyncio.sleep(0.2 - elapsed)
            
            self.rate_limiter[endpoint] = time.time()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _wait_for_rate_limit: {e}")

    async def connect(self, exchange_name: str = 'bybit', testnet: bool = True) -> bool:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if self._session and hasattr(self.exchange, 'session'):
            self.exchange.session = self._session
            logger.info("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–µ—Å—Å–∏—è –∫ exchange")
        
        # –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limit
        if hasattr(self.exchange, 'rateLimit'):
            self.exchange.rateLimit = 100  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            self.exchange.enableRateLimit = True
            logger.info("‚úÖ Rate limit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 100ms")
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∏—Ä–∂–µ
        –ò–∑: real_client.py
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∂–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (–∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)
            if self.is_connected and self.exchange:
                try:
                    logger.info("‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ", category='exchange')
                except:
                    print("INFO: ‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")
                return True
            
            self.current_exchange = exchange_name.lower()
            
            if self.current_exchange == 'bybit':
                return await self._connect_bybit(testnet)
            elif self.current_exchange == 'binance':
                return await self._connect_binance(testnet)
            elif self.current_exchange == 'okx':
                return await self._connect_okx(testnet)
            else:
                try:
                    logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
                except:
                    print(f"ERROR: ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {e}")
            self.connection_attempts += 1
            
            if self.connection_attempts < self.max_connection_attempts:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({self.connection_attempts}/{self.max_connection_attempts})")
                await asyncio.sleep(5)
                return await self.connect(exchange_name, testnet)
            
            return False
    
    async def _connect_bybit(self, testnet: bool = True) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        import os
        import time
        import random
        import logging
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π logger –¥–ª—è –º–µ—Ç–æ–¥–∞
        method_logger = logging.getLogger('crypto_bot')
        
        def safe_log(level, message):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å fallback –Ω–∞ print"""
            try:
                getattr(method_logger, level)(message)
            except Exception:
                print(f"{level.upper()}: {message}")
        
        for attempt in range(self.max_connection_attempts):
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if UNIFIED_CONFIG_AVAILABLE and unified_config:
                    try:
                        config = unified_config.get_bybit_exchange_config()
                        safe_log('info', "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ unified_config")
                    except Exception as e:
                        safe_log('warning', f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ unified_config: {e}")
                        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ unified_config
                        config = {
                            'apiKey': getattr(unified_config, 'BYBIT_API_KEY', ''),
                            'secret': getattr(unified_config, 'BYBIT_API_SECRET', ''),
                            'enableRateLimit': True,
                            'rateLimit': 100
                        }
                else:
                    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    safe_log('info', "üìã –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    config = {
                        'apiKey': os.getenv('BYBIT_TESTNET_API_KEY' if testnet else 'BYBIT_MAINNET_API_KEY', 
                                           os.getenv('BYBIT_API_KEY', '')),
                        'secret': os.getenv('BYBIT_TESTNET_API_SECRET' if testnet else 'BYBIT_MAINNET_API_SECRET',
                                           os.getenv('BYBIT_API_SECRET', '')),
                        'enableRateLimit': True,
                        'rateLimit': 100
                    }
                
                # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
                config['sandbox'] = testnet
                config['timeout'] = 30000  # 30 —Å–µ–∫—É–Ω–¥
                config['rateLimit'] = 100  # –°–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
                
                # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
                config['options'] = {
                    **config.get('options', {}),
                    'adjustForTimeDifference': True,
                    'recvWindow': 10000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ
                    'fetchCurrencies': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∞–ª—é—Ç (–ø—Ä–æ–±–ª–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
                    'fetchFundingHistory': False,
                    'fetchOHLCV': 'emulated',
                    'defaultType': 'spot'
                }
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                config['headers'] = {
                    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
                    'Accept': 'application/json',
                    'Connection': 'keep-alive'
                }
                
                # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú API –ö–õ–Æ–ß–ò
                if not config['apiKey'] or not config['secret']:
                    safe_log('error', "‚ùå API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False
                    
                safe_log('info', f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit #{attempt + 1}/{self.max_connection_attempts}")
                safe_log('info', f"üîê API Key: {config['apiKey'][:8]}..." if config['apiKey'] else "üîê API Key: –ù–ï –ù–ê–ô–î–ï–ù")
                
                # ‚úÖ –°–û–ó–î–ê–ï–ú EXCHANGE –û–ë–™–ï–ö–¢
                self.exchange = ccxt.bybit(config)
                
                # ‚úÖ –ü–û–≠–¢–ê–ü–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –° –ü–†–û–í–ï–†–ö–ê–ú–ò
                safe_log('info', "üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ–π ping
                try:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º await –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    def ping_sync():
                                return self.exchange.fetch_time()
                    
                    await asyncio.get_event_loop().run_in_executor(None, self.exchange.fetch_time)
                    safe_log('info', "‚úÖ Ping —É—Å–ø–µ—à–Ω—ã–π")
                except Exception as ping_error:
                    safe_log('warning', f"‚ö†Ô∏è Ping –æ—à–∏–±–∫–∞: {ping_error}")
                    if self.exchange:
                        self.exchange = None
                    continue
                
                # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏ –ë–ï–ó –≤–∞–ª—é—Ç
                safe_log('info', "üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã...")
                try:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º await –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    def load_markets_sync():
                        return self.exchange.load_markets(reload=False)
                    
                    markets = await asyncio.get_event_loop().run_in_executor(
                        None, 
                        self.exchange.load_markets, 
                        False  # reload –ø–∞—Ä–∞–º–µ—Ç—Ä
                    )
                    
                    if not markets:
                        raise Exception("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤")
                        
                    self.markets = markets
                    self.is_connected = True
                    self.connection_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    
                    safe_log('info', f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (testnet: {testnet}, markets: {len(markets)})")
                    
                    # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
                    try:
                        try:
                            balance_test = await asyncio.wait_for(
                                asyncio.get_event_loop().run_in_executor(
                                    None, 
                                    self.exchange.fetch_balance
                                ), 
                                timeout=10
                            )
                            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–∞")
                        except Exception as balance_error:
                            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {balance_error}")
                            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º
                        safe_log('info', "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–∞")
                    except Exception as balance_error:
                        safe_log('warning', f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {balance_error}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º
                    
                    return True
                    
                except asyncio.TimeoutError:
                    safe_log('warning', f"‚ö†Ô∏è Timeout –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    if self.exchange:
                        self.exchange = None
                    continue
                except Exception as market_error:
                    safe_log('warning', f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤: {market_error}")
                    if self.exchange:
                        self.exchange = None
                    continue
                    
            except Exception as e:
                safe_log('error', f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bybit: {e}")
                if self.exchange:
                    self.exchange = None
                
                if attempt < self.max_connection_attempts - 1:
                    delay = 5 + (attempt * 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    safe_log('info', f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
        
        # ‚úÖ –í–°–ï –ü–û–ü–´–¢–ö–ò –ò–°–ß–ï–†–ü–ê–ù–´
        safe_log('error', f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit –ø–æ—Å–ª–µ {self.max_connection_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        self.is_connected = False
        self.exchange = None
        return False
        
    async def _connect_binance(self, testnet: bool = True) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance"""
        try:
            self.exchange = ccxt.binance({
                'apiKey': unified_config.BINANCE_API_KEY,
                'secret': unified_config.BINANCE_API_SECRET,
                'sandbox': testnet,
                'enableRateLimit': True,
                'rateLimit': 50,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True
                }
            })
            
            markets = await self.exchange.load_markets()
            self.markets = markets
            self.is_connected = True
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º V5 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é - –î–û–ë–ê–í–õ–ï–ù–û
            try:
                await self.initialize_v5_integration()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è V5 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (testnet: {testnet})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            return False
    
    async def _connect_okx(self, testnet: bool = True) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX"""
        try:
            self.exchange = ccxt.okx({
                'apiKey': unified_config.OKX_API_KEY,
                'secret': unified_config.OKX_API_SECRET,
                'password': unified_config.OKX_PASSPHRASE,
                'sandbox': testnet,
                'enableRateLimit': True,
                'rateLimit': 100,
                'options': {
                    'defaultType': 'spot'
                }
            })
            
            markets = await self.exchange.load_markets()
            self.markets = markets
            self.is_connected = True
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (testnet: {testnet})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX: {e}")
            return False
    
    async def disconnect(self) -> bool:
        """
        –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏
        –ò–∑: real_client.py
        """
        try:
            if self.exchange:
                # CCXT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –Ω–æ –æ–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                self.exchange = None
                self.is_connected = False
                self.markets = {}
                
                logger.info(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±–∏—Ä–∂–∏ {self.current_exchange}")
                return True
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    # =================================================================
    # –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• (–∏–∑ real_client.py)
    # =================================================================
    
    async def get_balance(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –±–∏—Ä–∂–∏
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        try:
            await self._wait_for_rate_limit('balance')
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            loop = asyncio.get_event_loop()
            balance = await loop.run_in_executor(None, self.exchange.fetch_balance)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            formatted_balance = {
                'total_usdt': 0,
                'free_usdt': 0,
                'used_usdt': 0,
                'assets': {},
                'exchange': self.current_exchange,
                'timestamp': datetime.utcnow().isoformat()
            }
            
            for symbol, amounts in balance['total'].items():
                if amounts > 0:
                    free_amount = balance['free'].get(symbol, 0)
                    used_amount = balance['used'].get(symbol, 0)
                    
                    formatted_balance['assets'][symbol] = {
                        'free': float(free_amount),
                        'used': float(used_amount),
                        'total': float(amounts)
                    }
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º USDT
                    if symbol == 'USDT':
                        formatted_balance['total_usdt'] = float(amounts)
                        formatted_balance['free_usdt'] = float(free_amount)
                        formatted_balance['used_usdt'] = float(used_amount)
            
            return formatted_balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {'error': str(e)}
    
    async def get_ticker(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        try:
            await self._wait_for_rate_limit('ticker')
            
            loop = asyncio.get_event_loop()
            ticker = await loop.run_in_executor(None, self.exchange.fetch_ticker, symbol)
            
            return {
                'symbol': symbol,
                'price': float(ticker['last']),
                'bid': float(ticker['bid']) if ticker['bid'] else None,
                'ask': float(ticker['ask']) if ticker['ask'] else None,
                'volume': float(ticker['baseVolume']) if ticker['baseVolume'] else 0,
                'volume_quote': float(ticker['quoteVolume']) if ticker['quoteVolume'] else 0,
                'change_24h': float(ticker['change']) if ticker['change'] else 0,
                'change_percent_24h': float(ticker['percentage']) if ticker['percentage'] else 0,
                'high_24h': float(ticker['high']) if ticker['high'] else None,
                'low_24h': float(ticker['low']) if ticker['low'] else None,
                'timestamp': ticker['timestamp'],
                'exchange': self.current_exchange
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            return {'error': str(e)}
    
    async def get_order_book(self, symbol: str, limit: int = 20) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        try:
            await self._wait_for_rate_limit('orderbook')
            
            loop = asyncio.get_event_loop()
            orderbook = await loop.run_in_executor(None, self.exchange.fetch_order_book, symbol, limit)
            
            return {
                'symbol': symbol,
                'bids': orderbook['bids'][:limit],
                'asks': orderbook['asks'][:limit],
                'timestamp': orderbook['timestamp'],
                'nonce': orderbook['nonce'],
                'exchange': self.current_exchange
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            return {'error': str(e)}
    
    async def get_klines(self, symbol: str, interval: str = None, timeframe: str = '1m', limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–≤–µ—á–µ–π) - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω interval, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ timeframe
        if interval:
            timeframe = interval
            
        if not self.is_connected or not self.exchange:
            return []
        
        try:
            await self._wait_for_rate_limit('klines')
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            loop = asyncio.get_event_loop()
            ohlcv = await loop.run_in_executor(
                None, 
                self.exchange.fetch_ohlcv, 
                symbol, 
                timeframe, 
                None,  # since
                limit
            )
            
            klines = []
            for candle in ohlcv:
                klines.append({
                    'timestamp': candle[0],
                    'open': float(candle[1]),
                    'high': float(candle[2]),
                    'low': float(candle[3]),
                    'close': float(candle[4]),
                    'volume': float(candle[5]) if candle[5] else 0
                })
            
            return klines
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            return []
    
    # =================================================================
    # –ú–ï–¢–û–î–´ –¢–û–†–ì–û–í–õ–ò (–∏–∑ real_client.py)
    # =================================================================
    
    async def place_order(self, symbol: str, side: str, amount: float, price: float = None, order_type: str = 'market') -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        if unified_config.PAPER_TRADING:
            return self._simulate_order(symbol, side, amount, price, order_type)
        
        try:
            await self._wait_for_rate_limit('trade')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
            min_size = self._get_min_order_size(symbol)
            if amount < min_size:
                return {'error': f'Amount {amount} below minimum {min_size} for {symbol}'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            if order_type == 'market':
                order = await self.exchange.create_market_order(symbol, side, amount)
            elif order_type == 'limit':
                if price is None:
                    return {'error': 'Price required for limit orders'}
                order = await self.exchange.create_limit_order(symbol, side, amount, price)
            else:
                return {'error': f'Unsupported order type: {order_type}'}
            
            return {
                'success': True,
                'order_id': order['id'],
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'price': price,
                'type': order_type,
                'status': order['status'],
                'filled': order.get('filled', 0),
                'timestamp': order['timestamp'],
                'exchange': self.current_exchange
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
            return {'error': str(e)}

    async def get_positions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.is_connected:
            logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            loop = asyncio.get_event_loop()
            positions = await loop.run_in_executor(
                None, 
                self.exchange.fetch_positions
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            unified_positions = []
            for pos in positions:
                unified_positions.append({
                    'symbol': pos['symbol'],
                    'side': pos['side'],
                    'contracts': pos['contracts'],
                    'contractSize': pos['contractSize'],
                    'unrealizedPnl': pos['unrealizedPnl'],
                    'percentage': pos['percentage'],
                    'markPrice': pos['markPrice'],
                    'entryPrice': pos['info'].get('entry_price', 0)
                })
            
            return unified_positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def close_position(self, symbol: str) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        if not self.is_connected:
            return {"success": False, "error": "–ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions = await self.get_positions()
            position = next((p for p in positions if p['symbol'] == symbol), None)
            
            if not position:
                return {"success": True, "message": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            side = 'sell' if position['side'] == 'long' else 'buy'
            amount = abs(position['contracts'])
            
            # –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            result = await self.place_order(
                symbol=symbol,
                side=side,
                amount=amount,
                order_type='market',
                params={'reduceOnly': True}
            )
            
            if result.get('id'):
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                return {"success": True, "order_id": result['id']}
            else:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}
    
    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        try:
            await self._wait_for_rate_limit('trade')
            
            result = await self.exchange.cancel_order(order_id, symbol)
            
            return {
                'success': True,
                'order_id': order_id,
                'symbol': symbol,
                'status': 'cancelled',
                'timestamp': datetime.utcnow().timestamp() * 1000,
                'exchange': self.current_exchange
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return {'error': str(e)}
    
    async def get_order_status(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {'error': 'Not connected to exchange'}
        
        try:
            await self._wait_for_rate_limit('order_status')
            
            order = await self.exchange.fetch_order(order_id, symbol)
            
            return {
                'order_id': order['id'],
                'symbol': order['symbol'],
                'status': order['status'],
                'side': order['side'],
                'amount': order['amount'],
                'filled': order['filled'],
                'price': order['price'],
                'average': order['average'],
                'timestamp': order['timestamp'],
                'exchange': self.current_exchange
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return {'error': str(e)}
    
    # =================================================================
    # –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–• (–∏–∑ real_client.py)
    # =================================================================
    
    async def fetch_trading_pairs(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return []
        
        try:
            if not self.markets:
                self.markets = await self.exchange.load_markets()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
            usdt_pairs = []
            for symbol, market in self.markets.items():
                if (market['quote'] == 'USDT' and 
                    market['spot'] and 
                    market['active']):
                    usdt_pairs.append(symbol)
            
            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(usdt_pairs)} USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            return usdt_pairs[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return ['BTC/USDT', 'ETH/USDT']  # Fallback
    
    async def fetch_market_data(self, symbols: List[str]) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        –ò–∑: real_client.py
        """
        if not self.is_connected or not self.exchange:
            return {}
        
        market_data = {}
        
        for symbol in symbols:
            try:
                ticker = await self.get_ticker(symbol)
                if 'error' not in ticker:
                    market_data[symbol] = ticker
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                continue
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return market_data
        
    async def fetch_trades(self, symbol: str, limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
        –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DataCollector
        """
        if not self.is_connected or not self.exchange:
            return []
        
        try:
            await self._wait_for_rate_limit('trades')
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            loop = asyncio.get_event_loop()
            trades = await loop.run_in_executor(
                None, 
                lambda: self.exchange.fetch_trades(symbol, limit=limit)
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            formatted_trades = []
            for trade in trades:
                formatted_trade = {
                    'id': trade.get('id'),
                    'symbol': trade.get('symbol', symbol),
                    'side': trade.get('side'),  # 'buy' or 'sell'
                    'amount': float(trade.get('amount', 0)),
                    'price': float(trade.get('price', 0)),
                    'cost': float(trade.get('cost', 0)),
                    'timestamp': trade.get('timestamp'),
                    'datetime': trade.get('datetime'),
                    'exchange': self.current_exchange
                }
                formatted_trades.append(formatted_trade)
            
            logger.debug(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(formatted_trades)} —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}")
            return formatted_trades
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {e}")
            return []
    
    # =================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =================================================================
    
    def _simulate_order(self, symbol: str, side: str, amount: float, price: float = None, order_type: str = 'market') -> Dict[str, Any]:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è paper trading"""
        import uuid
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        current_price = price if price else 50000.0  # Fallback —Ü–µ–Ω–∞
        
        return {
            'success': True,
            'order_id': str(uuid.uuid4()),
            'symbol': symbol,
            'side': side,
            'amount': amount,
            'price': current_price,
            'type': order_type,
            'status': 'filled',  # –í —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª–Ω—è–µ–º
            'filled': amount,
            'timestamp': datetime.utcnow().timestamp() * 1000,
            'exchange': f'{self.current_exchange}_simulation'
        }
    
    def _get_min_order_size(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if self.current_exchange == 'bybit':
            params = unified_config.get_bybit_trading_params()
            return params['min_order_sizes'].get(symbol, 0.001)
        
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂
        return 0.001
        
    @classmethod
    def get_bybit_trading_params(cls) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è Bybit
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        return {
            'category': 'linear',  # USDT perpetual
            'settle_coin': 'USDT',
            'use_market_orders': cls.USE_MARKET_ORDERS,
            'leverage': cls.DEFAULT_LEVERAGE,
            'position_mode': 0,  # One-way mode
            'time_in_force': 'GTC',
            'reduce_only': False,
            'close_on_trigger': False,
            'order_filter': 'Order',
            'trigger_price_type': 'LastPrice',
            'mmp': False,  # Market Maker Protection
            'smp_type': 'None'  # Self Match Prevention
        }
    @classmethod
    def get_bybit_trading_params(cls) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è Bybit
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        return {
            'category': 'linear',  # USDT perpetual
            'settle_coin': 'USDT',
            'use_market_orders': cls.USE_MARKET_ORDERS,
            'leverage': cls.DEFAULT_LEVERAGE,
            'position_mode': 0,  # One-way mode
            'time_in_force': 'GTC',
            'reduce_only': False,
            'close_on_trigger': False,
            'order_filter': 'Order',
            'trigger_price_type': 'LastPrice',
            'mmp': False,  # Market Maker Protection
            'smp_type': 'None'  # Self Match Prevention
        }
    
    @classmethod
    def get_position_sizing_params(cls) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        """
        return {
            'risk_per_trade': cls.RISK_PER_TRADE_PERCENT / 100,
            'max_position_size': cls.MAX_POSITION_SIZE_PERCENT / 100,
            'min_position_size_usd': 10.0,  # –ú–∏–Ω–∏–º—É–º $10
            'max_positions': cls.MAX_POSITIONS,
            'use_kelly_criterion': False,  # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            'kelly_fraction': 0.25  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 25% –æ—Ç Kelly
        }
    
    @classmethod
    def get_risk_management_params(cls) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        """
        return {
            'stop_loss_percent': cls.STOP_LOSS_PERCENT,
            'take_profit_percent': cls.TAKE_PROFIT_PERCENT,
            'trailing_stop_percent': 2.0,  # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø 2%
            'breakeven_trigger_percent': 1.5,  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø—Ä–∏ +1.5%
            'partial_take_profit': {
                'enabled': True,
                'levels': [
                    {'percent': 50, 'at_profit': 2.0},  # 50% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ +2%
                    {'percent': 30, 'at_profit': 4.0},  # 30% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ +4%
                ]
            },
            'max_daily_loss_percent': 5.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ 5%
            'max_drawdown_percent': 10.0,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 10%
            'correlation_check': True,       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–æ–≤
            'max_correlated_positions': 3    # –ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        }
    
    @classmethod
    def validate_trading_config(cls) -> Tuple[bool, List[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Returns:
            Tuple[bool, List[str]]: (–í–∞–ª–∏–¥–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
        """
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if cls.LIVE_TRADING and not cls.PAPER_TRADING:
            if not cls.BYBIT_API_KEY or cls.BYBIT_API_KEY == 'your_api_key_here':
                errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BYBIT_API_KEY –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
            if not cls.BYBIT_API_SECRET or cls.BYBIT_API_SECRET == 'your_api_secret_here':
                errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BYBIT_API_SECRET –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤
        if cls.LIVE_TRADING and cls.TESTNET:
            errors.append("‚ö†Ô∏è LIVE_TRADING –∏ TESTNET –≤–∫–ª—é—á–µ–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
        if cls.RISK_PER_TRADE_PERCENT > 5:
            errors.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {cls.RISK_PER_TRADE_PERCENT}%")
        
        if cls.MAX_POSITIONS > 20:
            errors.append(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {cls.MAX_POSITIONS}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if cls.STOP_LOSS_PERCENT <= 0:
            errors.append("‚ùå STOP_LOSS_PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if cls.TAKE_PROFIT_PERCENT <= 0:
            errors.append("‚ùå TAKE_PROFIT_PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if cls.TAKE_PROFIT_PERCENT <= cls.STOP_LOSS_PERCENT:
            errors.append("‚ö†Ô∏è TAKE_PROFIT_PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ STOP_LOSS_PERCENT")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        if not cls.get_active_trading_pairs():
            errors.append("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if not cls.get_enabled_strategies():
            errors.append("‚ùå –ù–µ –≤–∫–ª—é—á–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        is_valid = len(errors) == 0
        
        if not is_valid:
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                logger.error(f"   {error}")
        else:
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        return is_valid, errors  
    
    
    def get_supported_exchanges(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂"""
        return self.supported_exchanges
    
    def get_current_exchange(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∏—Ä–∂–∏"""
        return self.current_exchange
    
    def is_exchange_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        return self.is_connected and self.exchange is not None
    
    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π"""
        if not self.is_connected or not self.exchange:
            return False
        
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self.exchange.fetch_time)
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ping failed: {e}")
            return False
    
    async def reconnect(self) -> bool:
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        await self.disconnect()
        await asyncio.sleep(2)
        
        return await self.connect(self.current_exchange, unified_config.BYBIT_TESTNET)
    
    # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    fetch_balance = get_balance
    fetch_ticker = get_ticker
    fetch_order_book = get_order_book
    fetch_ohlcv = get_klines
    

# =================================================================
# –§–ê–ë–†–ò–ö–ê –ö–õ–ò–ï–ù–¢–û–í
# =================================================================

class ExchangeClientFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏—Ä–∂
    –ò–∑: client.py
    """
    
    @staticmethod
    def create_client(exchange_name: str = 'bybit') -> UnifiedExchangeClient:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏"""
        client = UnifiedExchangeClient()
        client.current_exchange = exchange_name.lower()
        return client
    
    @staticmethod
    def get_available_exchanges() -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂"""
        return ['bybit', 'binance', 'okx']

# =================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# =================================================================

def get_real_exchange_client() -> UnifiedExchangeClient:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏
    –ó–ê–ú–ï–ù–Ø–ï–¢: get_real_exchange_client() –∏–∑ real_client.py
    """
    return ExchangeClientFactory.create_client('bybit')

def get_exchange_client(exchange_name: str = 'bybit') -> UnifiedExchangeClient:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
    –ó–ê–ú–ï–ù–Ø–ï–¢: ExchangeClient –∏–∑ client.py
    """
    return ExchangeClientFactory.create_client(exchange_name)

# =================================================================
# –≠–ö–°–ü–û–†–¢–´
# =================================================================

__all__ = [
    'UnifiedExchangeClient',
    'BaseExchangeClient', 
    'ExchangeClientFactory',
    'get_real_exchange_client',
    'get_exchange_client'
]