"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Social analysis –º–æ–¥—É–ª—å
==================================
–§–∞–π–ª: src/analysis/social/__init__.py

üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å SocialAnalyzer (–±—ã–ª–æ —Ç–æ–ª—å–∫–æ SocialSignalExtractor)
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç—ã
‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–õ–ê–°–°
try:
    from .signal_extractor import SocialSignalExtractor
    SIGNAL_EXTRACTOR_AVAILABLE = True
    logger.info("‚úÖ SocialSignalExtractor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è SocialSignalExtractor –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    SIGNAL_EXTRACTOR_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class SocialSignalExtractor:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è SocialSignalExtractor"""
        
        def __init__(self):
            self._initialized = True
            logger.info("üì± SocialSignalExtractor –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        def extract_signals_from_text(self, text, source="unknown"):
            """–ó–∞–≥–ª—É—à–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
            return []
        
        def extract_signals(self, data_sources):
            """–ó–∞–≥–ª—É—à–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
            return []

# ‚úÖ –°–û–ó–î–ê–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ö–õ–ê–°–° SocialAnalyzer
class SocialAnalyzer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SocialAnalyzer - –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    
    ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç SocialSignalExtractor
    ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    ‚úÖ –ê–Ω–∞–ª–∏–∑ Twitter, Reddit, Telegram –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    ‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
        try:
            self.signal_extractor = SocialSignalExtractor()
            self.is_available = True
            logger.info("‚úÖ SocialAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SocialSignalExtractor")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.supported_platforms = ['twitter', 'reddit', 'telegram', 'discord']
            self.sentiment_threshold = 0.6  # –ü–æ—Ä–æ–≥ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SocialAnalyzer: {e}")
            self.signal_extractor = None
            self.is_available = False
    
    def analyze_social_sentiment(self, text: str, platform: str = "unknown", 
                                symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞/—Å–æ–æ–±—â–µ–Ω–∏—è
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (twitter, reddit, telegram, etc.)
            symbol: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        """
        if not self.is_available or not self.signal_extractor:
            return {
                'available': False,
                'error': 'SocialSignalExtractor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SocialSignalExtractor –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = self.signal_extractor.extract_signals_from_text(text, platform)
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            sentiment_score = self._calculate_sentiment_score(text, signals)
            sentiment_label = self._get_sentiment_label(sentiment_score)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            mentioned_symbols = self._extract_crypto_mentions(text)
            if symbol and symbol.upper() not in mentioned_symbols:
                mentioned_symbols.append(symbol.upper())
            
            analysis_result = {
                'available': True,
                'sentiment': sentiment_label,
                'sentiment_score': sentiment_score,  # -1 –¥–æ 1
                'confidence': min(abs(sentiment_score) * 2, 1.0),  # 0 –¥–æ 1
                'platform': platform,
                'mentioned_symbols': mentioned_symbols,
                'signals_count': len(signals),
                'signals': signals[:5],  # –ü–µ—Ä–≤—ã–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤
                'timestamp': datetime.utcnow(),
                'analyzer': 'SocialAnalyzer'
            }
            
            logger.debug(f"üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {sentiment_label} "
                        f"(score: {sentiment_score:.2f})")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
            return {
                'available': False,
                'error': str(e)
            }
            
    def get_social_signals(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        if not self.is_available:
            return []
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞).")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Twitter/Reddit
        return [
            {
                'platform': 'Twitter',
                'author': f'CryptoWhale_{i}',
                'content': 'Bitcoin to the moon! #BTC #Crypto',
                'sentiment': 'positive',
                'sentiment_score': 0.85,
                'timestamp': datetime.utcnow().isoformat()
            } for i in range(limit)
        ]
    
    def analyze_multiple_posts(self, posts: List[Dict[str, Any]], 
                              symbol: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ 'text', 'platform', 'timestamp'
            symbol: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            List —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        """
        results = []
        
        for post in posts:
            text = post.get('text', '')
            platform = post.get('platform', 'unknown')
            
            if text:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if symbol and symbol.upper() not in text.upper():
                    continue
                    
                analysis = self.analyze_social_sentiment(text, platform, symbol)
                if analysis.get('available', False):
                    analysis['original_post'] = {
                        'timestamp': post.get('timestamp', datetime.utcnow()),
                        'author': post.get('author', 'unknown'),
                        'platform': platform
                    }
                    results.append(analysis)
        
        return results
    
    def get_aggregated_social_sentiment(self, posts: List[Dict[str, Any]], 
                                       symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
        """
        if not posts:
            return {
                'sentiment': 'neutral',
                'sentiment_score': 0.0,
                'confidence': 0.0,
                'total_posts': 0,
                'available': False
            }
        
        try:
            analyses = self.analyze_multiple_posts(posts, symbol)
            
            if not analyses:
                return {
                    'sentiment': 'neutral',
                    'sentiment_score': 0.0,
                    'confidence': 0.0,
                    'total_posts': len(posts),
                    'analyzed_posts': 0,
                    'available': False
                }
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            sentiment_scores = [a.get('sentiment_score', 0) for a in analyses]
            confidences = [a.get('confidence', 0) for a in analyses]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_sentiment_score = sum(sentiment_scores) / len(sentiment_scores)
            avg_confidence = sum(confidences) / len(confidences)
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platform_distribution = {}
            for analysis in analyses:
                platform = analysis.get('platform', 'unknown')
                platform_distribution[platform] = platform_distribution.get(platform, 0) + 1
            
            return {
                'sentiment': self._get_sentiment_label(avg_sentiment_score),
                'sentiment_score': avg_sentiment_score,
                'confidence': avg_confidence,
                'total_posts': len(posts),
                'analyzed_posts': len(analyses),
                'platform_distribution': platform_distribution,
                'sentiment_distribution': self._get_sentiment_distribution(analyses),
                'available': True,
                'timestamp': datetime.utcnow()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
            return {
                'sentiment': 'neutral',
                'sentiment_score': 0.0,
                'confidence': 0.0,
                'total_posts': len(posts),
                'available': False,
                'error': str(e)
            }
    
    def _calculate_sentiment_score(self, text: str, signals: List) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        positive_words = ['moon', 'rocket', 'bull', 'pump', 'buy', 'hodl', 'diamond', 'hands']
        negative_words = ['dump', 'crash', 'bear', 'sell', 'rekt', 'fud', 'scam']
        
        text_lower = text.lower()
        
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç
        total_words = len(text.split())
        if total_words == 0:
            return 0.0
        
        positive_ratio = positive_count / total_words
        negative_ratio = negative_count / total_words
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä (-1 –¥–æ 1)
        sentiment_score = (positive_ratio - negative_ratio) * 10
        return max(-1.0, min(1.0, sentiment_score))
    
    def _get_sentiment_label(self, score: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –æ—Ü–µ–Ω–∫–µ"""
        if score > 0.3:
            return 'positive'
        elif score < -0.3:
            return 'negative'
        else:
            return 'neutral'
    
    def _extract_crypto_mentions(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        patterns = [
            r'\$([A-Z]{2,10})',  # $BTC, $ETH
            r'\b([A-Z]{2,10})USDT\b',  # BTCUSDT
            r'\b(BTC|ETH|ADA|DOT|LINK|UNI|DOGE|SHIB|MATIC|SOL|AVAX)\b'  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        ]
        
        mentioned = set()
        text_upper = text.upper()
        
        for pattern in patterns:
            matches = re.findall(pattern, text_upper)
            mentioned.update(matches)
        
        return list(mentioned)
    
    def _get_sentiment_distribution(self, analyses: List[Dict[str, Any]]) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        distribution = {'positive': 0, 'negative': 0, 'neutral': 0}
        
        for analysis in analyses:
            sentiment = analysis.get('sentiment', 'neutral')
            if sentiment in distribution:
                distribution[sentiment] += 1
        
        return distribution
    
    def check_availability(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            'social_analyzer_available': self.is_available,
            'signal_extractor_available': SIGNAL_EXTRACTOR_AVAILABLE,
            'signal_extractor_instance': self.signal_extractor is not None,
            'supported_platforms': self.supported_platforms if self.is_available else []
        }

# ‚úÖ –°–û–ó–î–ê–ï–ú –ê–õ–ò–ê–°–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ SocialAnalyzer, —Ç–∞–∫ –∏ SocialSignalExtractor

# ‚úÖ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í
__all__ = ['SocialAnalyzer', 'SocialSignalExtractor']

# ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê
if SIGNAL_EXTRACTOR_AVAILABLE:
    logger.info("‚úÖ Social analysis –º–æ–¥—É–ª—å: SocialAnalyzer –∏ SocialSignalExtractor –¥–æ—Å—Ç—É–ø–Ω—ã")
else:
    logger.warning("‚ö†Ô∏è Social analysis –º–æ–¥—É–ª—å: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫")