#!/usr/bin/env python3
"""
–°—Ç—Ä–∞—Ç–µ–≥–∏—è "–û—Ö–æ—Ç–∞ –Ω–∞ –∫–∏—Ç–æ–≤" (Whale Hunting)
–§–∞–π–ª: src/strategies/whale_hunting.py

–õ–æ–≥–∏–∫–∞:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã whale_transactions
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –£—á–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import asyncio
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from decimal import Decimal
import json
from dataclasses import dataclass
from enum import Enum

from sqlalchemy import desc, and_, func
from sqlalchemy.orm import Session

from ..core.database import SessionLocal
from ..core.unified_config import unified_config as config
from ..core.signal_models import (
    WhaleTransaction, TransactionType, Signal as SignalExtended,
    WhaleAddress, SignalType
)
from ..strategies.base_strategy import BaseStrategy

logger = logging.getLogger(__name__)


class WhaleReputationType(Enum):
    """–¢–∏–ø—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–∏—Ç–æ–≤"""
    SMART_MONEY = "smart_money"      # –£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å –≤—ã—Å–æ–∫–∏–º win rate
    INSTITUTION = "institution"       # –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã
    EXCHANGE = "exchange"            # –ë–∏—Ä–∂–µ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏
    DEX = "dex"                      # DEX –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    UNKNOWN = "unknown"              # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞


@dataclass
class WhaleReputation:
    """–†–µ–ø—É—Ç–∞—Ü–∏—è –∫–∏—Ç–∞"""
    address: str
    reputation_type: WhaleReputationType
    win_rate: float
    total_transactions: int
    total_volume_usd: Decimal
    confidence_modifier: float  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏


class WhaleHuntingStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–∏—Ç–æ–≤
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
    - –î–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –±–∏—Ä–∂–∏ = —Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ
    - –í—ã–≤–æ–¥—ã —Å –±–∏—Ä–∂ = —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ
    - –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —É–º–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ = —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ
    """
    
    def __init__(self, 
                 name: str = "whale_hunting",
                 min_usd_value: float = 100_000,
                 exchange_flow_threshold: float = 500_000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            min_usd_value: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (USD)
            exchange_flow_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (USD)
        """
        super().__init__(name)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.min_usd_value = getattr(config, 'WHALE_MIN_USD_VALUE', min_usd_value)
        self.exchange_flow_threshold = exchange_flow_threshold
        self.lookback_hours = getattr(config, 'WHALE_LOOKBACK_HOURS', 24)
        self.confidence_base = getattr(config, 'WHALE_SIGNAL_CONFIDENCE', 0.7)
        
        # –ö—ç—à —Ä–µ–ø—É—Ç–∞—Ü–∏–π
        self.known_whales: Dict[str, WhaleReputation] = {}
        self.last_reputation_update = datetime.utcnow()
        self.reputation_update_interval = timedelta(hours=6)
        
        logger.info(f"‚úÖ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (min_value=${self.min_usd_value:,.0f})")
        
    async def analyze(self) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        logger.debug(f"üîç {self.name}: –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        db = SessionLocal()
        signals = []
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if datetime.utcnow() - self.last_reputation_update > self.reputation_update_interval:
                await self._update_whale_reputations(db)
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            recent_time = datetime.utcnow() - timedelta(hours=self.lookback_hours)
            
            whale_txs = db.query(WhaleTransaction).filter(
                and_(
                    WhaleTransaction.is_processed == False,
                    WhaleTransaction.usd_value >= self.min_usd_value,
                    WhaleTransaction.timestamp >= recent_time
                )
            ).order_by(desc(WhaleTransaction.usd_value)).limit(100).all()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(whale_txs)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for tx in whale_txs:
                signal = await self._analyze_transaction(tx, db)
                
                if signal:
                    signals.append(signal)
                    
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                tx.is_processed = True
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            accumulation_signals = await self._analyze_accumulation_patterns(db)
            signals.extend(accumulation_signals)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            logger.info(f"‚úÖ {self.name}: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.name}: {e}")
            db.rollback()
        finally:
            db.close()
            
        return signals
        
    async def _analyze_transaction(self, tx: WhaleTransaction, db: Session) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        signal = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∞–¥—Ä–µ—Å–æ–≤
        from_reputation = self._get_whale_reputation(tx.from_address)
        to_reputation = self._get_whale_reputation(tx.to_address)
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = self.confidence_base
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if tx.transaction_type == TransactionType.EXCHANGE_DEPOSIT:
            # –î–µ–ø–æ–∑–∏—Ç –Ω–∞ –±–∏—Ä–∂—É - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            if tx.usd_value >= self.exchange_flow_threshold:
                signal = self._create_signal(
                    symbol=tx.symbol,
                    signal_type='sell',
                    confidence=confidence * 0.8,
                    reason=f"üêã –ö—Ä—É–ø–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ${tx.usd_value:,.0f} –Ω–∞ –±–∏—Ä–∂—É",
                    transaction=tx
                )
                
        elif tx.transaction_type == TransactionType.EXCHANGE_WITHDRAWAL:
            # –í—ã–≤–æ–¥ —Å –±–∏—Ä–∂–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
            if tx.usd_value >= self.exchange_flow_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                if to_reputation.reputation_type == WhaleReputationType.SMART_MONEY:
                    confidence *= to_reputation.confidence_modifier
                    
                signal = self._create_signal(
                    symbol=tx.symbol,
                    signal_type='buy',
                    confidence=confidence,
                    reason=f"üêã –ö—Ä—É–ø–Ω—ã–π –≤—ã–≤–æ–¥ ${tx.usd_value:,.0f} —Å –±–∏—Ä–∂–∏",
                    transaction=tx
                )
                
        elif tx.transaction_type == TransactionType.TRANSFER:
            # –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
            if from_reputation.reputation_type == WhaleReputationType.SMART_MONEY:
                # Smart money –ø—Ä–æ–¥–∞–µ—Ç
                if to_reputation.reputation_type == WhaleReputationType.EXCHANGE:
                    signal = self._create_signal(
                        symbol=tx.symbol,
                        signal_type='sell',
                        confidence=confidence * from_reputation.confidence_modifier,
                        reason=f"üí° Smart money –ø–µ—Ä–µ–≤–æ–¥–∏—Ç ${tx.usd_value:,.0f} –Ω–∞ –±–∏—Ä–∂—É",
                        transaction=tx
                    )
            elif to_reputation.reputation_type == WhaleReputationType.SMART_MONEY:
                # Smart money –ø–æ–∫—É–ø–∞–µ—Ç
                signal = self._create_signal(
                    symbol=tx.symbol,
                    signal_type='buy',
                    confidence=confidence * to_reputation.confidence_modifier,
                    reason=f"üí° Smart money –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç ${tx.usd_value:,.0f}",
                    transaction=tx
                )
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if signal:
            self._save_signal(signal, tx)
            
        return signal
        
    async def _analyze_accumulation_patterns(self, db: Session) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        signals = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        lookback_days = 7
        start_date = datetime.utcnow() - timedelta(days=lookback_days)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ –∞–¥—Ä–µ—Å–∞–º
        accumulation_query = db.query(
            WhaleTransaction.symbol,
            WhaleTransaction.to_address,
            func.sum(WhaleTransaction.usd_value).label('total_accumulated'),
            func.count(WhaleTransaction.id).label('tx_count')
        ).filter(
            and_(
                WhaleTransaction.timestamp >= start_date,
                WhaleTransaction.transaction_type.in_([
                    TransactionType.EXCHANGE_WITHDRAWAL,
                    TransactionType.TRANSFER
                ]),
                WhaleTransaction.usd_value >= self.min_usd_value
            )
        ).group_by(
            WhaleTransaction.symbol,
            WhaleTransaction.to_address
        ).having(
            func.sum(WhaleTransaction.usd_value) >= self.exchange_flow_threshold * 2
        ).all()
        
        for row in accumulation_query:
            symbol, address, total_accumulated, tx_count = row
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
            reputation = self._get_whale_reputation(address)
            
            if reputation.reputation_type in [WhaleReputationType.SMART_MONEY, 
                                             WhaleReputationType.INSTITUTION]:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
                confidence = self.confidence_base * reputation.confidence_modifier
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
                if tx_count > 3:
                    confidence *= 1.1
                    
                signal = {
                    'symbol': symbol,
                    'signal_type': 'buy',
                    'confidence': min(confidence, 0.95),
                    'action': 'BUY',
                    'reason': f"üìà –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${total_accumulated:,.0f} –∑–∞ {tx_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    'details': {
                        'pattern': 'accumulation',
                        'whale_address': address,
                        'whale_type': reputation.reputation_type.value,
                        'total_accumulated': float(total_accumulated),
                        'transaction_count': tx_count,
                        'period_days': lookback_days
                    }
                }
                
                signals.append(signal)
                
        return signals
        
    async def _update_whale_reputations(self, db: Session):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–π –∫–∏—Ç–æ–≤"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–π –∫–∏—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        known_addresses = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from ..api_clients.onchain_data_producer import OnchainDataProducer
        for exchange, networks in OnchainDataProducer.EXCHANGE_ADDRESSES.items():
            for network_addresses in networks.values():
                known_addresses.extend(network_addresses)
                
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ –ë–î
        for address in known_addresses:
            whale_addr = db.query(WhaleAddress).filter_by(
                address=address.lower()
            ).first()
            
            if not whale_addr:
                whale_addr = WhaleAddress(
                    address=address.lower(),
                    blockchain='ethereum',  # TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–µ—Ç—å
                    reputation_type='exchange',
                    label=exchange if 'exchange' in locals() else None
                )
                db.add(whale_addr)
                
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        # (–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ win rate)
        
        db.commit()
        self.last_reputation_update = datetime.utcnow()
        
    def _get_whale_reputation(self, address: str) -> WhaleReputation:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–∏—Ç–∞"""
        address_lower = address.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if address_lower in self.known_whales:
            return self.known_whales[address_lower]
            
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        reputation = WhaleReputation(
            address=address_lower,
            reputation_type=self._determine_reputation_type(address),
            win_rate=0.5,
            total_transactions=0,
            total_volume_usd=Decimal(0),
            confidence_modifier=1.0
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º
        self.known_whales[address_lower] = reputation
        
        return reputation
        
    def _determine_reputation_type(self, address: str) -> WhaleReputationType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É"""
        address_lower = address.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        db = SessionLocal()
        try:
            whale_addr = db.query(WhaleAddress).filter_by(
                address=address_lower
            ).first()
            
            if whale_addr:
                return WhaleReputationType(whale_addr.reputation_type)
        finally:
            db.close()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∏—Ä–∂–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        from ..api_clients.onchain_data_producer import OnchainDataProducer
        for exchange, networks in OnchainDataProducer.EXCHANGE_ADDRESSES.items():
            for network_addresses in networks.values():
                if address_lower in [addr.lower() for addr in network_addresses]:
                    return WhaleReputationType.EXCHANGE
                    
        return WhaleReputationType.UNKNOWN
        
    def _create_signal(self, symbol: str, signal_type: str, confidence: float, 
                      reason: str, transaction: WhaleTransaction) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        return {
            'symbol': symbol,
            'signal_type': signal_type,
            'confidence': confidence,
            'action': signal_type.upper(),
            'reason': reason,
            'transaction_hash': transaction.transaction_hash,
            'amount_usd': float(transaction.usd_value),
            'whale_from': transaction.from_address,
            'whale_to': transaction.to_address,
            'blockchain': transaction.blockchain,
            'details': {
                'transaction_type': transaction.transaction_type.value,
                'timestamp': transaction.timestamp.isoformat(),
                'block_number': transaction.block_number
            }
        }
        
    def _save_signal(self, signal_data: Dict[str, Any], tx: WhaleTransaction):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã."""
        db = SessionLocal()
        try:
            current_price = 0.0
            try:
                # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –±–µ–∑ "/"
                symbol_for_ticker = signal_data['symbol'].replace('/', '')
                if not symbol_for_ticker.endswith('USDT'):
                    symbol_for_ticker += 'USDT'
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                ticker = asyncio.run(self.exchange_client.get_ticker(symbol_for_ticker))
                if ticker and 'last' in ticker and ticker['last'] is not None:
                    current_price = float(ticker['last'])
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal_data['symbol']} –∏–∑ —Ç–∏–∫–µ—Ä–∞: {ticker}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal_data['symbol']}: {e}")

            signal = SignalExtended(
                symbol=signal_data['symbol'],
                strategy=self.name,
                action=signal_data['action'],
                signal_type=signal_data['signal_type'],
                confidence=signal_data['confidence'],
                price=current_price, # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
                reason=signal_data['reason'],
                details=signal_data.get('details', {}),
                indicators={
                    'transaction_hash': signal_data['transaction_hash'],
                    'amount_usd': signal_data['amount_usd'],
                    'whale_transaction_id': tx.id
                },
                created_at=datetime.utcnow()
            )
            db.add(signal)
            db.commit()
            logger.info(f"–°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {signal_data['symbol']} {signal_data['signal_type']} @ ${current_price}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}", exc_info=True)
            db.rollback()
        finally:
            db.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    strategy = WhaleHuntingStrategy()
    
    while True:
        try:
            signals = await strategy.analyze()
            
            if signals:
                logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
                for signal in signals:
                    logger.info(f"  - {signal['symbol']}: {signal['signal_type']} "
                              f"(confidence: {signal['confidence']:.2%})")
                              
            await asyncio.sleep(60)  # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())
