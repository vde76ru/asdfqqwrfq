"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º BotManager
–§–∞–π–ª: src/bot/internal/lifecycle.py

–í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–∞—É–∑—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
"""

import asyncio
import logging
import threading
import time
from datetime import datetime, timedelta
from typing import Tuple, Optional

from .types import BotStatus
from .initialization import initialize_all_components, display_account_info
from .trading_pairs import discover_all_trading_pairs, load_pairs_from_config, load_historical_data_for_pairs
from .trading_loops import start_all_trading_loops

logger = logging.getLogger(__name__)


def get_lifecycle(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    
    class Lifecycle:
        def __init__(self, bot):
            self.bot = bot
            
        async def start_async(self):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
            return await start_async(self.bot)
            
        async def pause(self):
            """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
            return await pause(self.bot)
            
        async def resume(self):
            """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
            return await resume(self.bot)
            
        async def emergency_stop(self):
            """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
            return await emergency_stop(self.bot)
            
        async def _start_all_trading_loops(self):
            """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
            return await _start_all_trading_loops(self.bot)
    
    return Lifecycle(bot_instance)


# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê ===

def start(bot_manager) -> Tuple[bool, str]:
    """
    –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Flask API.
    –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏.
    """
    if bot_manager.is_running:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞.")
        return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."

    logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
    bot_manager.status = BotStatus.STARTING
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º threading.Event –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
    bot_manager._stop_event = threading.Event()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    bot_manager._async_thread = threading.Thread(target=run_async_tasks, args=(bot_manager,), name="BotAsyncLoopThread")
    bot_manager._async_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–º—Ä–µ—Ç
    bot_manager._async_thread.start()
    
    time.sleep(3) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    if bot_manager.is_running:
        msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
        logger.info(msg)
        return True, msg
    else:
        msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {bot_manager.status.value}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫."
        logger.error(msg)
        return False, msg


def stop(bot_manager) -> Tuple[bool, str]:
    """
    –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ Flask API.
    –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    if not bot_manager.is_running:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.")
        return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω."

    logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
    bot_manager.status = BotStatus.STOPPING
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    await _stop_signal_components(bot_manager)
    
    if bot_manager._stop_event:
        bot_manager._stop_event.set() # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏–∫–ª—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        bot_manager.is_running = False
        return False, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    if bot_manager._async_thread:
        bot_manager._async_thread.join(timeout=15) # –î–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    if bot_manager._async_thread and bot_manager._async_thread.is_alive():
         bot_manager.status = BotStatus.ERROR
         msg = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è."
         logger.critical(msg)
         return False, msg
    
    bot_manager.is_running = False
    bot_manager.status = BotStatus.STOPPED
    bot_manager.stop_time = datetime.utcnow()
    
    msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    logger.info(msg)
    return True, msg


async def _stop_signal_components(bot_manager):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OnchainDataProducer
    if bot_manager.onchain_producer:
        try:
            await bot_manager.onchain_producer.stop()
            logger.info("‚úÖ OnchainDataProducer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OnchainDataProducer: {e}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BybitDataProducer
    if bot_manager.bybit_producer:
        try:
            await bot_manager.bybit_producer.stop()
            logger.info("‚úÖ BybitDataProducer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ BybitDataProducer: {e}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WhaleHuntingStrategy
    if bot_manager.whale_hunting_strategy:
        try:
            await bot_manager.whale_hunting_strategy.stop()
            logger.info("‚úÖ WhaleHuntingStrategy –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WhaleHuntingStrategy: {e}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SignalAggregator
    if bot_manager.signal_aggregator:
        try:
            await bot_manager.signal_aggregator.stop()
            logger.info("‚úÖ SignalAggregator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SignalAggregator: {e}")
    
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def run_async_tasks(bot_manager):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π asyncio event loop –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        loop.run_until_complete(start_async(bot_manager))
        
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
        bot_manager.status = BotStatus.ERROR
        bot_manager.is_running = False
    finally:
        # –û—á–∏—â–∞–µ–º event loop
        try:
            loop.close()
        except:
            pass
        logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def start_async(bot_manager):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    try:
        logger.info("üöÄ === –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê ===")
        bot_manager.start_time = datetime.utcnow()
        bot_manager.status = BotStatus.STARTING
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        bot_manager._stop_event = asyncio.Event()
        bot_manager._pause_event = asyncio.Event()
        bot_manager._pause_event.set()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üîß –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        success = await initialize_all_components(bot_manager)
        if not success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            bot_manager.status = BotStatus.ERROR
            return
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        logger.info("üìä –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        load_pairs_from_config(bot_manager)
        
        # 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if hasattr(bot_manager.config, 'AUTO_DISCOVER_PAIRS') and bot_manager.config.AUTO_DISCOVER_PAIRS:
            logger.info("üîç –≠—Ç–∞–ø 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            await discover_all_trading_pairs(bot_manager)
        
        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìà –≠—Ç–∞–ø 4: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        await load_historical_data_for_pairs(bot_manager)
        
        # 5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        logger.info("üí∞ –≠—Ç–∞–ø 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        await display_account_info(bot_manager)
        
        # 6. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
        logger.info("üîÑ –≠—Ç–∞–ø 6: –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        await _start_all_trading_loops(bot_manager)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        bot_manager.status = BotStatus.RUNNING
        bot_manager.is_running = True
        
        logger.info("‚úÖ === –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù ===")
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(bot_manager.active_pairs)}")
        logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(bot_manager.strategy_instances)}")
        logger.info(f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(bot_manager.tasks)}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await bot_manager._stop_event.wait()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏...")
        await _stop_all_tasks(bot_manager)
        
    except Exception as e:
        logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        bot_manager.status = BotStatus.ERROR
        bot_manager.is_running = False
        raise


async def _start_all_trading_loops(bot_manager):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    from .trading_loops import start_all_trading_loops
    await start_all_trading_loops(bot_manager)


async def _stop_all_tasks(bot_manager):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    await _stop_signal_components(bot_manager)
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for task_name, task in bot_manager.tasks.items():
        if task and not task.done():
            logger.info(f"  ‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏: {task_name}")
            task.cancel()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    if bot_manager.tasks:
        await asyncio.gather(*bot_manager.tasks.values(), return_exceptions=True)
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def pause(bot_manager):
    """
    –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã–º
    """
    if bot_manager.status != BotStatus.RUNNING:
        return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    
    logger.info("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    bot_manager.status = BotStatus.PAUSED
    bot_manager.pause_time = datetime.utcnow()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã
    if bot_manager._pause_event:
        bot_manager._pause_event.clear()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if hasattr(bot_manager.config, 'CLOSE_POSITIONS_ON_PAUSE') and bot_manager.config.CLOSE_POSITIONS_ON_PAUSE:
        logger.info("üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
    
    logger.info("‚úÖ –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


async def resume(bot_manager):
    """
    –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
    """
    if bot_manager.status != BotStatus.PAUSED:
        return False, "–ë–æ—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ"
    
    logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    bot_manager.status = BotStatus.RUNNING
    bot_manager.pause_time = None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã
    if bot_manager._pause_event:
        bot_manager._pause_event.set()
    
    logger.info("‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É")
    return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É"


async def emergency_stop(bot_manager):
    """
    –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
    """
    logger.critical("üö® === –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê ===")
    
    bot_manager.status = BotStatus.EMERGENCY_STOP
    
    try:
        # 1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if bot_manager._pause_event:
            bot_manager._pause_event.clear()
        
        # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        logger.critical("üö® –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        closed_count = 0
        
        if bot_manager.positions:
            for symbol, position in list(bot_manager.positions.items()):
                try:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    logger.info(f"  üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}")
                    closed_count += 1
                except Exception as e:
                    logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")
        
        logger.critical(f"üö® –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}")
        
        # 3. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        logger.critical("üö® –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        cancelled_count = 0
        
        if bot_manager.pending_orders:
            for order_id in list(bot_manager.pending_orders.keys()):
                try:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
                    logger.info(f"  ‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}")
                    cancelled_count += 1
                except Exception as e:
                    logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {order_id}: {e}")
        
        logger.critical(f"üö® –û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {cancelled_count}")
        
        # 4. –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ–º —Ü–∏–∫–ª–∞–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if bot_manager._stop_event:
            bot_manager._stop_event.set()
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        emergency_info = {
            'timestamp': datetime.utcnow().isoformat(),
            'reason': 'emergency_stop',
            'positions_closed': closed_count,
            'orders_cancelled': cancelled_count,
            'balance': bot_manager.balance,
            'status': 'completed'
        }
        
        logger.critical(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {emergency_info}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        bot_manager.is_running = False
        bot_manager.status = BotStatus.STOPPED
        bot_manager.stop_time = datetime.utcnow()
        
        return True, f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}, –æ—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {cancelled_count}"
        
    except Exception as e:
        logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False, f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
