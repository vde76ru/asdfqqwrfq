"""
–ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤ BotManager
–§–∞–π–ª: src/bot/internal/trading_loops.py

–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import List

from .types import BotStatus, TradingOpportunity

logger = logging.getLogger(__name__)


def get_trading_loops(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    
    class TradingLoops:
        def __init__(self, bot):
            self.bot = bot
            
        async def _main_trading_loop(self):
            """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
            return await _main_trading_loop(self.bot)
            
        async def _market_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
            return await _market_monitoring_loop(self.bot)
            
        async def _pair_discovery_loop(self):
            """–¶–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
            return await _pair_discovery_loop(self.bot)
            
        async def _position_management_loop(self):
            """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
            return await _position_management_loop(self.bot)
            
        async def _risk_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
            return await _risk_monitoring_loop(self.bot)
            
        async def _health_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
            return await _health_monitoring_loop(self.bot)
            
        async def _performance_tracking_loop(self):
            """–¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
            return await _performance_tracking_loop(self.bot)
            
        async def _cleanup_loop(self):
            """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
            return await _cleanup_loop(self.bot)
            
        async def _balance_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞"""
            return await _balance_monitoring_loop(self.bot)
            
        async def _strategy_evaluation_loop(self):
            """–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
            return await _strategy_evaluation_loop(self.bot)
            
        async def _data_collection_loop(self):
            """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
            return await _data_collection_loop(self.bot)
            
        async def _sentiment_analysis_loop(self):
            """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
            return await _sentiment_analysis_loop(self.bot)
            
        async def _event_processing_loop(self):
            """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
            return await _event_processing_loop(self.bot)
            
        async def start_signal_system_loops(self):
            """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
            return await start_signal_system_loops(self.bot)
    
    return TradingLoops(bot_instance)


# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –¶–ò–ö–õ–û–í ===

async def _main_trading_loop(bot_instance):
    """
    –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            
            if bot_instance.status != BotStatus.RUNNING:
                await asyncio.sleep(1)
                continue
                
            cycle_start = time.time()
            bot_instance.cycles_count += 1
            
            # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            await bot_instance._analyze_market_conditions()
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            await bot_instance._update_all_positions()
            
            # 3. –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            from .market_analysis import _find_all_trading_opportunities
            opportunities = await _find_all_trading_opportunities(bot_instance)
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
            
            # 4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫
            if opportunities:
                from .trade_execution import _execute_best_trades
                trades_executed = await _execute_best_trades(bot_instance, opportunities)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trades_executed}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
            cycle_time = time.time() - cycle_start
            logger.info(f"‚è±Ô∏è –¶–∏–∫–ª #{bot_instance.cycles_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å, —Å–¥–µ–ª–æ–∫: 0")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –µ—Å–ª–∏ —Ü–∏–∫–ª –±—ã—Å—Ç—Ä—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É
            if cycle_time < 30:
                await asyncio.sleep(max(5, 30 - cycle_time))  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(5)


async def _market_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break


async def _pair_discovery_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä
            await asyncio.sleep(bot_instance.config.PAIR_DISCOVERY_INTERVAL_HOURS * 3600)
        except asyncio.CancelledError:
            break


async def _position_management_loop(bot_instance):
    """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            break


async def _risk_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
            await asyncio.sleep(60)
        except asyncio.CancelledError:
            break


async def _health_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            await bot_instance._check_system_health()
            await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
        except asyncio.CancelledError:
            break


async def _performance_tracking_loop(bot_instance):
    """–¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            await bot_instance._track_performance_metrics()
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break


async def _cleanup_loop(bot_instance):
    """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            await bot_instance.cleanup_old_data()
            await asyncio.sleep(3600)  # 1 —á–∞—Å
        except asyncio.CancelledError:
            break


async def _balance_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break


async def _strategy_evaluation_loop(bot_instance):
    """–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break


async def _data_collection_loop(bot_instance):
    """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
        except asyncio.CancelledError:
            break


async def _sentiment_analysis_loop(bot_instance):
    """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break


async def _event_processing_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await asyncio.sleep(1)
        except asyncio.CancelledError:
            break


async def start_signal_system_loops(bot_instance):
    """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # === –ü–†–û–î–Æ–°–ï–†–´ –î–ê–ù–ù–´–• ===
    if bot_instance.onchain_producer:
        bot_instance.tasks['onchain_producer'] = asyncio.create_task(bot_instance.onchain_producer.start())
    if bot_instance.bybit_producer:
        bot_instance.tasks['bybit_producer'] = asyncio.create_task(bot_instance.bybit_producer.start())

    # === –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–£–õ–ò ===
    if bot_instance.whale_hunting_strategy:
        bot_instance.tasks['whale_hunting'] = asyncio.create_task(bot_instance.whale_hunting_strategy.start())
    
    if bot_instance.sleeping_giants_strategy:
        bot_instance.tasks['sleeping_giants'] = asyncio.create_task(bot_instance.sleeping_giants_strategy.start())

    if bot_instance.order_book_analysis:
        bot_instance.tasks['order_book_analysis'] = asyncio.create_task(bot_instance.order_book_analysis.start())
        
    if bot_instance.signal_aggregator:
        bot_instance.tasks['signal_aggregator'] = asyncio.create_task(bot_instance.signal_aggregator.start())

    # === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
    if bot_instance.notification_manager:
        bot_instance.tasks['notification_manager'] = asyncio.create_task(bot_instance.notification_manager.check_and_send_notifications_loop())
        bot_instance.tasks['daily_summary'] = asyncio.create_task(bot_instance.notification_manager.send_daily_summary_loop())

    logger.info("–í—Å–µ —Ü–∏–∫–ª—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã")


async def _whale_hunting_analysis_loop(bot_instance):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–û—Ö–æ—Ç–∞ –Ω–∞ –∫–∏—Ç–æ–≤"
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30-60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    analysis_interval = 30  # —Å–µ–∫—É–Ω–¥
    
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            
            if bot_instance.whale_hunting_strategy:
                logger.info("üêã –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ WhaleHuntingStrategy...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                signals = await bot_instance.whale_hunting_strategy.analyze()
                
                if signals:
                    logger.info(f"üéØ WhaleHuntingStrategy —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    logger.debug("üîç WhaleHuntingStrategy –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            await asyncio.sleep(analysis_interval)
            
        except asyncio.CancelledError:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ WhaleHuntingStrategy")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ WhaleHuntingStrategy: {e}")
            await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def _start_all_trading_loops(bot_instance):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        bot_instance.tasks['main_trading'] = asyncio.create_task(
            _main_trading_loop(bot_instance), name="main_trading"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
        bot_instance.tasks['market_monitoring'] = asyncio.create_task(
            _market_monitoring_loop(bot_instance), name="market_monitoring"
        )
        
        # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        bot_instance.tasks['pair_discovery'] = asyncio.create_task(
            _pair_discovery_loop(bot_instance), name="pair_discovery"
        )
        
        # –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
        bot_instance.tasks['position_management'] = asyncio.create_task(
            _position_management_loop(bot_instance), name="position_management"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
        bot_instance.tasks['risk_monitoring'] = asyncio.create_task(
            _risk_monitoring_loop(bot_instance), name="risk_monitoring"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
        bot_instance.tasks['health_monitoring'] = asyncio.create_task(
            _health_monitoring_loop(bot_instance), name="health_monitoring"
        )
        
        # –¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        bot_instance.tasks['performance_tracking'] = asyncio.create_task(
            _performance_tracking_loop(bot_instance), name="performance_tracking"
        )
        
        # –¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        bot_instance.tasks['cleanup'] = asyncio.create_task(
            _cleanup_loop(bot_instance), name="cleanup"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞
        bot_instance.tasks['balance_monitoring'] = asyncio.create_task(
            _balance_monitoring_loop(bot_instance), name="balance_monitoring"
        )
        
        # –¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        bot_instance.tasks['strategy_evaluation'] = asyncio.create_task(
            _strategy_evaluation_loop(bot_instance), name="strategy_evaluation"
        )
        
        # –¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        bot_instance.tasks['data_collection'] = asyncio.create_task(
            _data_collection_loop(bot_instance), name="data_collection"
        )
        
        # === –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –°–ò–ì–ù–ê–õ–û–í ===
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        await start_signal_system_loops(bot_instance)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(bot_instance.tasks)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {e}")
        raise


async def start_all_trading_loops(bot_instance):
    """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤"""
    return await _start_all_trading_loops(bot_instance)
