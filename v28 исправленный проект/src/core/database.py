#!/usr/bin/env python3
"""
Database module —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SessionLocal - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
===============================================================
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SessionLocal
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å PyMySQL
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å unified_config
"""
import os
from contextlib import contextmanager
from sqlalchemy import create_engine, MetaData, text
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.pool import QueuePool
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
for env_path in ['/etc/crypto/config/.env', '.env']:
    if os.path.exists(env_path):
        load_dotenv(env_path)
        break

logger = logging.getLogger(__name__)

class Database:
    """Singleton –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    _instance = None
    _engine = None
    _metadata = None
    _SessionLocal = None
    _Session = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Database, cls).__new__(cls)
        return cls._instance
        
    def test_connection(self) -> bool:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                result.fetchone()
            
            logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å–ø–µ—à–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            return False
    
    def __init__(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if self._engine is None:
            self.database_url = self._get_database_url()
            self._create_engine()
            self._create_session_factory()
            
    def _get_database_url(self) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
        
        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ unified_config
        try:
            from .unified_config import unified_config
            database_url = unified_config.get_database_url()
            if database_url and database_url != 'sqlite:///./crypto_bot.db':
                logger.info("üìã URL –ë–î –ø–æ–ª—É—á–µ–Ω –∏–∑ unified_config")
                return database_url
        except ImportError:
            logger.warning("‚ö†Ô∏è unified_config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è PyMySQL
            if database_url.startswith('mysql://'):
                database_url = database_url.replace('mysql://', 'mysql+pymysql://')
                logger.info("üîß URL –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: mysql:// ‚Üí mysql+pymysql://")
            elif 'mysql+mysqldb://' in database_url:
                database_url = database_url.replace('mysql+mysqldb://', 'mysql+pymysql://')
                logger.info("üîß URL –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: MySQLdb ‚Üí PyMySQL")
                
            logger.info("üìã URL –ë–î –ø–æ–ª—É—á–µ–Ω –∏–∑ DATABASE_URL")
            return database_url
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        db_host = os.getenv('DB_HOST', 'localhost')
        db_port = os.getenv('DB_PORT', '3306')
        db_user = os.getenv('DB_USER')
        db_pass = os.getenv('DB_PASSWORD')
        db_name = os.getenv('DB_NAME')
        
        if db_user and db_pass and db_name:
            database_url = f"mysql+pymysql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}?charset=utf8mb4"
            logger.info("üìã URL –ë–î —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return database_url
        elif db_name:  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è
            database_url = f"mysql+pymysql://{db_user or 'root'}@{db_host}:{db_port}/{db_name}?charset=utf8mb4"
            logger.info("üìã URL –ë–î —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –ø–∞—Ä–æ–ª—è")
            return database_url
        
        # 4. Fallback –Ω–∞ SQLite
        database_url = "sqlite:///./crypto_bot.db"
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (fallback)")
        return database_url
    
    def _create_engine(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
            engine_kwargs = {
                'pool_pre_ping': True,
                'echo': False,
                'pool_recycle': 3600,  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MySQL
            if 'mysql' in self.database_url:
                engine_kwargs.update({
                    'poolclass': QueuePool,
                    'pool_size': 10,
                    'max_overflow': 20,
                    'pool_timeout': 30,
                    'connect_args': {
                        'charset': 'utf8mb4',
                        'autocommit': False,
                    }
                })
            
            self._engine = create_engine(self.database_url, **engine_kwargs)
            logger.info("‚úÖ Database engine —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è engine: {e}")
            # Fallback –Ω–∞ SQLite
            self.database_url = "sqlite:///./crypto_bot.db"
            self._engine = create_engine(self.database_url, pool_pre_ping=True)
            logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ SQLite –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL")
    
    def _create_session_factory(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º sessionmaker
            self._Session = sessionmaker(bind=self._engine, expire_on_commit=False)
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º SessionLocal –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self._SessionLocal = sessionmaker(
                autocommit=False,
                autoflush=False,
                bind=self._engine,
                expire_on_commit=False
            )
            
            # –°–æ–∑–¥–∞–µ–º scoped_session –¥–ª—è thread-safety
            self.Session = scoped_session(self._Session)
            
            logger.info("‚úÖ Session factories —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è session factories: {e}")
            raise
    
    @property
    def engine(self):
        """–ü–æ–ª—É—á–∏—Ç—å engine"""
        return self._engine
        
    def create_tables(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from .models import Base
            Base.metadata.create_all(bind=self._engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    @property
    def metadata(self):
        """–ü–æ–ª—É—á–∏—Ç—å metadata"""
        if self._metadata is None:
            self._metadata = MetaData()
        return self._metadata
    
    @contextmanager
    def get_session(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        session = self.Session()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            session.close()
    
    def create_session(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ SessionLocal"""
        if self._SessionLocal:
            return self._SessionLocal()
        else:
            logger.warning("‚ö†Ô∏è SessionLocal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Session")
            return self.Session()
    
    def get_session_local(self):
        """‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å SessionLocal —Ñ–∞–±—Ä–∏–∫—É"""
        return self._SessionLocal
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'Session'):
                self.Session.remove()
            if self._engine:
                self._engine.dispose()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db = Database()

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
engine = db.engine
metadata = db.metadata
get_session = db.get_session
create_session = db.create_session

# ‚úÖ –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç SessionLocal
SessionLocal = db.get_session_local()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_db():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è FastAPI"""
    if SessionLocal:
        session = SessionLocal()
        try:
            yield session
        finally:
            session.close()
    else:
        logger.error("‚ùå SessionLocal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def transaction(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    def wrapper(*args, **kwargs):
        if SessionLocal:
            session = SessionLocal()
            try:
                result = func(session, *args, **kwargs)
                session.commit()
                return result
            except Exception as e:
                session.rollback()
                raise
            finally:
                session.close()
        else:
            logger.error("‚ùå SessionLocal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            return None
    return wrapper

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if db.test_connection():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def diagnose_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    diagnostics = {
        'engine_created': db._engine is not None,
        'session_factory_created': db._SessionLocal is not None,
        'sessionlocal_available': SessionLocal is not None,
        'connection_test': False,
        'database_url': db.database_url if hasattr(db, 'database_url') else 'Unknown'
    }
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        diagnostics['connection_test'] = db.test_connection()
    except Exception as e:
        diagnostics['connection_error'] = str(e)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    for key, value in diagnostics.items():
        status = "‚úÖ" if value else "‚ùå"
        logger.info(f"   {status} {key}: {value}")
    
    return diagnostics
    
def test_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            result.fetchone()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

__all__ = [
    'Database',
    'db',
    'engine',
    'metadata',
    'get_session',
    'create_session',
    'SessionLocal',
    'get_db',
    'transaction',
    'initialize_database',
    'diagnose_database'
]