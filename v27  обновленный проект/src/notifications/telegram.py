"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
========================================
–§–∞–π–ª: src/notifications/telegram.py

üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
‚úÖ –ò–º–ø–æ—Ä—Ç unified_config –≤–º–µ—Å—Ç–æ config
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏
"""

import asyncio
import aiohttp
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

logger = logging.getLogger(__name__)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from ..core.unified_config import unified_config as config
    CONFIG_AVAILABLE = True
    logger.info("‚úÖ unified_config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ telegram")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ unified_config –≤ telegram: {e}")
    CONFIG_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    class MinimalConfig:
        TELEGRAM_BOT_TOKEN = ""
        TELEGRAM_CHAT_ID = ""
        TELEGRAM_ENABLED = False
        TELEGRAM_ENABLE_TRADE_ALERTS = True
        TELEGRAM_ENABLE_ERROR_ALERTS = True
        TELEGRAM_ENABLE_DAILY_SUMMARY = True
        
    config = MinimalConfig()

class TelegramNotifier:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Telegram —É–≤–µ–¥–æ–º–ª—è—Ç–æ—Ä
    
    ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å unified_config
    ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(TelegramNotifier, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not hasattr(self, 'initialized'):
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ unified_config
                self.bot_token = getattr(config, 'TELEGRAM_BOT_TOKEN', '')
                self.chat_id = getattr(config, 'TELEGRAM_CHAT_ID', '')
                self.enabled = getattr(config, 'TELEGRAM_ENABLED', False)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.enable_trade_alerts = getattr(config, 'TELEGRAM_ENABLE_TRADE_ALERTS', True)
                self.enable_error_alerts = getattr(config, 'TELEGRAM_ENABLE_ERROR_ALERTS', True) 
                self.enable_daily_summary = getattr(config, 'TELEGRAM_ENABLE_DAILY_SUMMARY', True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if self.bot_token and self.chat_id:
                    self.enabled = self.enabled and True  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç
                    logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.enabled = False
                    if not self.bot_token:
                        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    if not self.chat_id:
                        logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    logger.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                
                self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else ""
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                self.emojis = {
                    'buy': 'üü¢',
                    'sell': 'üî¥', 
                    'profit': 'üí∞',
                    'loss': 'üìâ',
                    'warning': '‚ö†Ô∏è',
                    'error': 'üö®',
                    'info': '‚ÑπÔ∏è',
                    'success': '‚úÖ',
                    'robot': 'ü§ñ',
                    'chart': 'üìä',
                    'rocket': 'üöÄ',
                    'fire': 'üî•'
                }
                
                self.initialized = True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramNotifier: {e}")
                self.enabled = False
                self.initialized = True
    
    async def send_message(self, text: str, parse_mode: str = 'HTML', 
                          disable_notification: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            logger.debug(f"üì± Telegram –æ—Ç–∫–ª—é—á–µ–Ω: {text[:50]}...")
            return False
        
        if not self.bot_token or not self.chat_id:
            logger.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                data = {
                    'chat_id': self.chat_id,
                    'text': text,
                    'parse_mode': parse_mode,
                    'disable_notification': disable_notification
                }
                
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API ({response.status}): {error_text}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_trade_alert(self, trade_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.enable_trade_alerts:
            return False
        
        try:
            symbol = trade_data.get('symbol', 'Unknown')
            side = trade_data.get('side', 'Unknown')
            quantity = trade_data.get('quantity', 0)
            price = trade_data.get('price', 0)
            strategy = trade_data.get('strategy', 'Unknown')
            
            emoji = self.emojis.get('buy' if side.lower() == 'buy' else 'sell', 'üìä')
            
            message = (
                f"{emoji} <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>\n"
                f"üìä <b>–ü–∞—Ä–∞:</b> {symbol}\n"
                f"üìà <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {side}\n"
                f"üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> ${price}\n"
                f"üß† <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def send_error_alert(self, error_message: str, component: str = "System") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.enable_error_alerts:
            return False
        
        try:
            message = (
                f"{self.emojis['error']} <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê</b>\n"
                f"üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</b> {component}\n" 
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def send_daily_summary(self, summary_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.enable_daily_summary:
            return False
        
        try:
            total_trades = summary_data.get('total_trades', 0)
            successful_trades = summary_data.get('successful_trades', 0)
            profit_loss = summary_data.get('profit_loss', 0)
            success_rate = (successful_trades / total_trades * 100) if total_trades > 0 else 0
            
            emoji = self.emojis['profit'] if profit_loss >= 0 else self.emojis['loss']
            
            message = (
                f"{emoji} <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
                f"üìä <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades}\n"
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {successful_trades}\n"
                f"üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {success_rate:.1f}%\n"
                f"üí∞ <b>P&L:</b> ${profit_loss:.2f}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {summary_data.get('date', datetime.now().strftime('%Y-%m-%d'))}"
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def send_system_status(self, status_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            uptime = status_data.get('uptime', 'Unknown')
            active_pairs = status_data.get('active_pairs', 0)
            system_health = status_data.get('health', 'Unknown')
            
            health_emoji = {
                'healthy': '‚úÖ',
                'warning': '‚ö†Ô∏è', 
                'critical': 'üö®'
            }.get(system_health.lower(), '‚ÑπÔ∏è')
            
            message = (
                f"{health_emoji} <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n"
                f"‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime}\n"
                f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä:</b> {active_pairs}\n"
                f"üíö <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {system_health}\n"
                f"‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b> {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def check_configuration(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram"""
        return {
            'config_available': CONFIG_AVAILABLE,
            'enabled': self.enabled,
            'has_token': bool(self.bot_token),
            'has_chat_id': bool(self.chat_id),
            'trade_alerts': self.enable_trade_alerts,
            'error_alerts': self.enable_error_alerts,
            'daily_summary': self.enable_daily_summary
        }

# ‚úÖ –°–û–ó–î–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
try:
    telegram_notifier = TelegramNotifier()
    logger.info("‚úÖ TelegramNotifier –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TelegramNotifier: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class DummyTelegramNotifier:
        def __init__(self):
            self.enabled = False
        
        async def send_message(self, text: str, **kwargs):
            logger.debug(f"üì± Telegram (–∑–∞–≥–ª—É—à–∫–∞): {text[:50]}...")
            return False
        
        async def send_trade_alert(self, trade_data):
            return False
        
        async def send_error_alert(self, error_message, component="System"):
            return False
        
        async def send_daily_summary(self, summary_data):
            return False
        
        def check_configuration(self):
            return {'enabled': False, 'dummy': True}
    
    telegram_notifier = DummyTelegramNotifier()

# ‚úÖ –≠–ö–°–ü–û–†–¢
__all__ = ['TelegramNotifier', 'telegram_notifier']