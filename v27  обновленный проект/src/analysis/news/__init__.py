"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô News analysis –º–æ–¥—É–ª—å
=================================
–§–∞–π–ª: src/analysis/news/__init__.py

üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å NewsAnalyzer (–±—ã–ª–æ —Ç–æ–ª—å–∫–æ NewsImpactScorer)
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç—ã
‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–õ–ê–°–°
try:
    from .impact_scorer import NewsImpactScorer
    IMPACT_SCORER_AVAILABLE = True
    logger.info("‚úÖ NewsImpactScorer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è NewsImpactScorer –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    IMPACT_SCORER_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class NewsImpactScorer:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è NewsImpactScorer"""
        
        def __init__(self):
            self._initialized = True
            logger.info("üì∞ NewsImpactScorer –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        def score_news_impact(self, news_text, title="", source="unknown", symbol=None):
            """–ó–∞–≥–ª—É—à–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
            from dataclasses import dataclass
            from datetime import datetime
            
            @dataclass
            class NewsImpact:
                impact_score: float = 0.5
                sentiment: str = "neutral"
                confidence: float = 0.1
                affected_symbols: list = None
                impact_duration: str = "short"
                timestamp: datetime = None
                
                def __post_init__(self):
                    if self.affected_symbols is None:
                        self.affected_symbols = []
                    if self.timestamp is None:
                        self.timestamp = datetime.utcnow()
            
            return NewsImpact(
                impact_score=0.5,
                sentiment="neutral", 
                confidence=0.1,
                affected_symbols=[symbol] if symbol else [],
                impact_duration="short"
            )

# ‚úÖ –°–û–ó–î–ê–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ö–õ–ê–°–° NewsAnalyzer
class NewsAnalyzer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô NewsAnalyzer - –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç NewsImpactScorer
    ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    ‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            self.impact_scorer = NewsImpactScorer()
            self.is_available = True
            logger.info("‚úÖ NewsAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å NewsImpactScorer")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NewsAnalyzer: {e}")
            self.impact_scorer = None
            self.is_available = False
    
    def analyze_news(self, news_text: str, symbol: Optional[str] = None, 
                    source: str = "unknown") -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_text: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            symbol: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        if not self.is_available or not self.impact_scorer:
            return {
                'available': False,
                'error': 'NewsImpactScorer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º NewsImpactScorer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            impact = self.impact_scorer.score_news_impact(
                news_text=news_text,
                symbol=symbol,
                source=source
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            analysis_result = {
                'available': True,
                'sentiment': getattr(impact, 'sentiment', 'neutral'),
                'impact_score': getattr(impact, 'impact_score', 0.5),
                'confidence': getattr(impact, 'confidence', 0.1),
                'affected_symbols': getattr(impact, 'affected_symbols', []),
                'impact_duration': getattr(impact, 'impact_duration', 'short'),
                'timestamp': getattr(impact, 'timestamp', datetime.utcnow()),
                'source': source,
                'analyzer': 'NewsAnalyzer'
            }
            
            logger.debug(f"üì∞ –ù–æ–≤–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {sentiment} (confidence: {confidence:.2f})")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return {
                'available': False,
                'error': str(e)
            }
    
    def get_news_sentiment(self, news_text: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
        analysis = self.analyze_news(news_text)
        
        return {
            'sentiment': analysis.get('sentiment', 'neutral'),
            'confidence': analysis.get('confidence', 0.1),
            'available': analysis.get('available', False)
        }
    
    def analyze_multiple_news(self, news_list: List[Dict[str, str]], 
                            symbol: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        results = []
        
        for news_item in news_list:
            text = news_item.get('text', '')
            source = news_item.get('source', 'unknown')
            
            if text:
                analysis = self.analyze_news(text, symbol, source)
                results.append(analysis)
        
        return results
    
    def get_aggregated_sentiment(self, news_list: List[Dict[str, str]], 
                                symbol: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º"""
        if not news_list:
            return {
                'sentiment': 'neutral',
                'confidence': 0.0,
                'total_news': 0,
                'available': False
            }
        
        try:
            analyses = self.analyze_multiple_news(news_list, symbol)
            available_analyses = [a for a in analyses if a.get('available', False)]
            
            if not available_analyses:
                return {
                    'sentiment': 'neutral',
                    'confidence': 0.0,
                    'total_news': len(news_list),
                    'available': False
                }
            
            # –ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            sentiments = [a.get('sentiment', 'neutral') for a in available_analyses]
            confidences = [a.get('confidence', 0.1) for a in available_analyses]
            
            # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            sentiment_counts = {}
            for sentiment in sentiments:
                sentiment_counts[sentiment] = sentiment_counts.get(sentiment, 0) + 1
            
            dominant_sentiment = max(sentiment_counts, key=sentiment_counts.get)
            average_confidence = sum(confidences) / len(confidences) if confidences else 0.1
            
            return {
                'sentiment': dominant_sentiment,
                'confidence': average_confidence,
                'total_news': len(news_list),
                'analyzed_news': len(available_analyses),
                'sentiment_distribution': sentiment_counts,
                'available': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
            return {
                'sentiment': 'neutral',
                'confidence': 0.0,
                'total_news': len(news_list),
                'available': False,
                'error': str(e)
            }
    
    def check_availability(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            'news_analyzer_available': self.is_available,
            'impact_scorer_available': IMPACT_SCORER_AVAILABLE,
            'impact_scorer_instance': self.impact_scorer is not None
        }

# ‚úÖ –°–û–ó–î–ê–ï–ú –ê–õ–ò–ê–°–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ NewsAnalyzer, —Ç–∞–∫ –∏ NewsImpactScorer

# ‚úÖ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í
__all__ = ['NewsAnalyzer', 'NewsImpactScorer']

# ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê
if IMPACT_SCORER_AVAILABLE:
    logger.info("‚úÖ News analysis –º–æ–¥—É–ª—å: NewsAnalyzer –∏ NewsImpactScorer –¥–æ—Å—Ç—É–ø–Ω—ã")
else:
    logger.warning("‚ö†Ô∏è News analysis –º–æ–¥—É–ª—å: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫")