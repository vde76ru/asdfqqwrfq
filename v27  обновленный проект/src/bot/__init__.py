"""
Bot –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: src/bot/__init__.py

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã fallback –∏–º–ø–æ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ç–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

"""

import logging
from typing import Dict, Tuple

logger = logging.getLogger(__name__)

# ‚úÖ –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í —Å —á–µ—Ç–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
def _import_bot_component(module_name: str, class_name: str, required: bool = True):
    """–ò–º–ø–æ—Ä—Ç bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å __import__
        module = __import__(f"{__name__}.{module_name}", fromlist=[class_name])
        component = getattr(module, class_name)
        logger.info(f"‚úÖ {class_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑ {module_name}")
        return component
    except ImportError as e:
        error_msg = f"–ú–æ–¥—É–ª—å 'bot.{module_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
        if required:
            logger.critical(f"‚ùå {error_msg}")
            logger.critical(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª src/bot/{module_name}.py")
            raise ImportError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π bot –º–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                             f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª src/bot/{module_name}.py") from e
        else:
            logger.warning(f"‚ö†Ô∏è {error_msg}")
            return None
    except AttributeError as e:
        error_msg = f"–ö–ª–∞—Å—Å '{class_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ 'bot.{module_name}': {e}"
        if required:
            logger.critical(f"‚ùå {error_msg}")
            raise ImportError(f"–ö–ª–∞—Å—Å {class_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥—É–ª–µ bot.{module_name}") from e
        else:
            logger.warning(f"‚ö†Ô∏è {error_msg}")
            return None

# ‚úÖ –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–´–• BOT –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
logger.info("ü§ñ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")

# BotManager - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
BotManager = _import_bot_component('manager', 'BotManager', required=True)

# Trader - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)
Trader = _import_bot_component('trader', 'Trader', required=False)

# –ï—Å–ª–∏ Trader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º TradingBotWithRealTrading –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
if not Trader:
    try:
        from .trading_integration import TradingBotWithRealTrading
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º TradingBotWithRealTrading –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É Trader")
    except ImportError:
        logger.warning("‚ö†Ô∏è –ù–∏ Trader, –Ω–∏ TradingBotWithRealTrading –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        TradingBotWithRealTrading = None

# ‚úÖ –ü–†–û–í–ï–†–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –§–ê–ô–õ–û–í
def _check_alternative_bot_files() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö bot —Ñ–∞–π–ª–æ–≤"""
    alternatives = {
        'bot_manager.py': False,
        'manager.py': False,
        'trader.py': False,
        'trading_bot.py': False,
    }
    
    import os
    bot_dir = os.path.dirname(__file__)
    
    for filename in alternatives.keys():
        filepath = os.path.join(bot_dir, filename)
        alternatives[filename] = os.path.exists(filepath)
    
    return alternatives

# ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ê–õ–ò–ê–°–û–í –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π BotManager
alt_files = _check_alternative_bot_files()

if alt_files['bot_manager.py'] and not BotManager:
    logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ bot_manager.py")
    try:
        BotManagerAlt = _import_bot_component('bot_manager', 'BotManager', required=False)
        if BotManagerAlt:
            BotManager = BotManagerAlt
            logger.info("‚úÖ BotManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ bot_manager.py")
    except:
        pass

# ‚úÖ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò BOT –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô
def check_bot_capabilities() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ bot –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    
    Returns:
        dict: –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    capabilities = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'bot_manager': BotManager is not None,
        'trader': Trader is not None,
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        'alternative_files': alt_files,
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        'basic_bot': BotManager is not None,
        'full_trading': any([
            all([BotManager is not None, Trader is not None]),
            'TradingBotWithRealTrading' in locals()
        ])
    }
    
    logger.info("ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    logger.info(f"   ‚úÖ BotManager: {capabilities['bot_manager']}")
    logger.info(f"   ‚úÖ Trader: {capabilities['trader']}")
    logger.info(f"   üéØ –ë–∞–∑–æ–≤—ã–π –±–æ—Ç: {capabilities['basic_bot']}")
    logger.info(f"   üöÄ –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: {capabilities['full_trading']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    logger.info("üìÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for filename, exists in alt_files.items():
        status = "‚úÖ" if exists else "‚ùå"
        logger.info(f"   {status} {filename}: {exists}")
    
    return capabilities

def get_bot_recommendation() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
    caps = check_bot_capabilities()
    
    if caps['full_trading']:
        return "üéâ –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ - –≤—Å–µ bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã!"
    elif caps['basic_bot']:
        return "‚ö° –ë–∞–∑–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Trader –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    else:
        return "‚ùå Bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã manager.py –∏ trader.py"

def create_bot_manager(**kwargs):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BotManager —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    Args:
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è BotManager
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä BotManager
    """
    if not BotManager:
        raise RuntimeError("BotManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã")
    
    try:
        logger.info("üè≠ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä BotManager...")
        bot_instance = BotManager(**kwargs)
        logger.info("‚úÖ BotManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return bot_instance
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BotManager: {e}")
        raise

def create_trader(exchange_client, **kwargs):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Trader —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    Args:
        exchange_client: –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä Trader
    """
    if not Trader:
        raise RuntimeError("Trader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã")
    
    if not exchange_client:
        raise ValueError("exchange_client –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Trader")
    
    try:
        logger.info("üè≠ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Trader...")
        trader_instance = Trader(exchange_client, **kwargs)
        logger.info("‚úÖ Trader —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return trader_instance
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Trader: {e}")
        raise

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'BotManager',
    'Trader',
    
    # –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'create_bot_manager',
    'create_trader',
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'check_bot_capabilities',
    'get_bot_recommendation'
]

# ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –ò–ú–ü–û–†–¢–ï
logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –º–æ–¥—É–ª–µ–π...")
_capabilities = check_bot_capabilities()
_recommendation = get_bot_recommendation()
logger.info(_recommendation)

if not _capabilities['basic_bot']:
    raise ImportError("‚ùå –ë–∞–∑–æ–≤—ã–µ bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! "
                     "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ src/bot/manager.py")

if not _capabilities['full_trading']:
    logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ bot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã. "
                   "–¢–æ—Ä–≥–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")