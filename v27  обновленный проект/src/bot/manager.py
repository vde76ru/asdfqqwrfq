#!/usr/bin/env python3
"""
–ù–û–í–´–ô –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ BOTMANAGER - –î–∏—Ä–∏–∂–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞
–§–∞–π–ª: src/bot/manager.py

üéØ –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
- –≠—Ç–æ—Ç —Ñ–∞–π–ª - –¢–û–õ–¨–ö–û –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –í—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ internal/ –º–æ–¥—É–ª–∏
- –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
- –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞

üìÅ –°–¢–†–£–ö–¢–£–†–ê:
manager.py (—ç—Ç–æ—Ç —Ñ–∞–π–ª) - –¥–∏—Ä–∏–∂–µ—Ä
‚îú‚îÄ‚îÄ internal/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py           # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
‚îÇ   ‚îú‚îÄ‚îÄ types.py             # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ Enums
‚îÇ   ‚îú‚îÄ‚îÄ initialization.py    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ lifecycle.py         # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
‚îÇ   ‚îú‚îÄ‚îÄ trading_pairs.py     # –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ trading_loops.py     # –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã
‚îÇ   ‚îú‚îÄ‚îÄ market_analysis.py   # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ trade_execution.py   # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
‚îÇ   ‚îú‚îÄ‚îÄ position_management.py # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ monitoring.py        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
‚îÇ   ‚îú‚îÄ‚îÄ utilities.py         # –£—Ç–∏–ª–∏—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
‚îÇ   ‚îî‚îÄ‚îÄ compatibility.py     # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
from .internal.types import (
    BotStatus, ComponentStatus, MarketPhase, RiskLevel, TradeDecision,
    TradingOpportunity, MarketState, ComponentInfo, PerformanceMetrics, TradingStatistics
)

from .internal.initialization import get_initialization
from .internal.lifecycle import get_lifecycle
from .internal.trading_pairs import get_trading_pairs
from .internal.trading_loops import get_trading_loops
from .internal.market_analysis import get_market_analysis
from .internal.trade_execution import get_trade_execution
from .internal.position_management import get_position_management
from .internal.monitoring import get_monitoring
from .internal.utilities import get_utilities
from .internal.compatibility import get_compatibility

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from ..core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

class BotManager:
    """
    ü§ñ –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê - –î–ò–†–ò–ñ–ï–† –û–†–ö–ï–°–¢–†–ê
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É!
    –û–Ω —Ç–æ–ª—å–∫–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏.
    
    –í—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src/bot/internal/ –º–æ–¥—É–ª—è—Ö.
    """
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        """–ü–∞—Ç—Ç–µ—Ä–Ω Singleton"""
        if cls._instance is None:
            cls._instance = super(BotManager, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–µ–≥–∞—Ç–æ–≤"""
        if BotManager._initialized:
            return
            
        BotManager._initialized = True
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ì–õ–ê–í–ù–û–ì–û BotManager (–¥–∏—Ä–∏–∂–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞)...")
        
        # === –û–°–ù–û–í–ù–´–ï –ê–¢–†–ò–ë–£–¢–´ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===
        self.status = BotStatus.STOPPED
        self.start_time = None
        self.stop_time = None
        self.pause_time = None
        self.is_running = False
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
        self.all_trading_pairs = []
        self.active_pairs = []
        self.inactive_pairs = []
        self.blacklisted_pairs = set()
        self.watchlist_pairs = []
        self.trending_pairs = []
        self.high_volume_pairs = []
        self.positions = {}
        self.pending_orders = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.cycles_count = 0
        self.trades_today = 0
        self.daily_profit = 0.0
        self.weekly_profit = 0.0
        self.monthly_profit = 0.0
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.components = {}
        self.tasks = {}
        self.task_health = {}
        
        # Exchange –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.exchange_client = None
        self.enhanced_exchange_client = None
        self.exchange = None
        self.market_analyzer = None
        self.trader = None
        self.risk_manager = None
        self.portfolio_manager = None
        self.notifier = None
        self.data_collector = None
        self.strategy_factory = None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.available_strategies = config.ENABLED_STRATEGIES if hasattr(config, 'ENABLED_STRATEGIES') else {}
        self.strategy_instances = {}
        self.strategy_performance = {}
        
        # –ë–∞–ª–∞–Ω—Å –∏ —Ç–æ—Ä–≥–æ–≤–ª—è
        self.balance = 0.0
        self.available_balance = 0.0
        self.locked_balance = 0.0
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.market_data_cache = {}
        self.price_history = {}
        self.volume_history = {}
        self.indicator_cache = {}
        self.candle_cache = {}
        
        # ML –∏ –∞–Ω–∞–ª–∏–∑
        self.ml_models = {}
        self.ml_predictions = {}
        self.feature_cache = {}
        self.news_cache = []
        self.social_signals = []
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = config
        self.trading_pairs = config.get_active_trading_pairs() if hasattr(config, 'get_active_trading_pairs') else []
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
        self._initialization = get_initialization(self)
        self._lifecycle = get_lifecycle(self)
        self._trading_pairs = get_trading_pairs(self)
        self._trading_loops = get_trading_loops(self)
        self._market_analysis = get_market_analysis(self)
        self._trade_execution = get_trade_execution(self)
        self._position_management = get_position_management(self)
        self._monitoring = get_monitoring(self)
        self._utilities = get_utilities(self)
        self._compatibility = get_compatibility(self)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.datetime = datetime  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å compatibility.py
        self.BotStatus = BotStatus  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        logger.info("‚úÖ BotManager (–¥–∏—Ä–∏–∂–µ—Ä) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # =================================================================
    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ initialization.py
    # =================================================================
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        return await self._initialization.initialize()
    
    async def _initialize_all_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        return await self._initialization._initialize_all_components()
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return await self._initialization._init_database()
    
    async def _init_config_validator(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return await self._initialization._init_config_validator()
    
    async def _init_exchange_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        return await self._initialization._init_exchange_client()
    
    async def _init_data_collector(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return await self._initialization._init_data_collector()
    
    async def _init_market_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        return await self._initialization._init_market_analyzer()
    
    async def _init_risk_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
        return await self._initialization._init_risk_manager()
    
    async def _init_portfolio_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return await self._initialization._init_portfolio_manager()
    
    async def _init_strategy_factory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return await self._initialization._init_strategy_factory()
    
    async def _init_trader(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫"""
        return await self._initialization._init_trader()
    
    async def _init_execution_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        return await self._initialization._init_execution_engine()
    
    async def _init_notifier(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return await self._initialization._init_notifier()
    
    async def _init_ml_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        return await self._initialization._init_ml_system()
    
    async def _init_news_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        return await self._initialization._init_news_analyzer()
    
    async def _init_websocket_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket"""
        return await self._initialization._init_websocket_manager()
    
    async def _init_export_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        return await self._initialization._init_export_manager()
    
    async def _init_health_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return await self._initialization._init_health_monitor()
    
    async def initialize_enhanced_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        return await self._initialization.initialize_enhanced_exchange()
    
    async def _display_account_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ"""
        return await self._initialization._display_account_info()
    
    async def _process_balance_info(self, balance_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        return await self._initialization._process_balance_info(balance_info)
    
    # =================================================================
    # –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ lifecycle.py
    # =================================================================
    
    async def start_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.start_async()
    
    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.pause()
    
    async def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.resume()
    
    async def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return await self._lifecycle.emergency_stop()
    
    async def _start_all_trading_loops(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
        return await self._lifecycle._start_all_trading_loops()
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –ü–ê–†–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trading_pairs.py
    # =================================================================
    
    async def _discover_all_trading_pairs(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_pairs._discover_all_trading_pairs()
    
    async def _load_historical_data_for_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_pairs._load_historical_data_for_pairs()
    
    def _load_pairs_from_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self._trading_pairs._load_pairs_from_config()
    
    async def update_pairs(self, pairs: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self._trading_pairs.update_pairs(pairs)
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –¶–ò–ö–õ–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trading_loops.py
    # =================================================================
    
    async def _main_trading_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        return await self._trading_loops._main_trading_loop()
    
    async def _market_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
        return await self._trading_loops._market_monitoring_loop()
    
    async def _pair_discovery_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_loops._pair_discovery_loop()
    
    async def _position_management_loop(self):
        """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        return await self._trading_loops._position_management_loop()
    
    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
        return await self._trading_loops._risk_monitoring_loop()
    
    async def _health_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return await self._trading_loops._health_monitoring_loop()
    
    async def _performance_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return await self._trading_loops._performance_monitoring_loop()
    
    async def _data_export_loop(self):
        """–¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return await self._trading_loops._data_export_loop()
    
    async def _ml_training_loop(self):
        """–¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
        return await self._trading_loops._ml_training_loop()
    
    async def _ml_prediction_loop(self):
        """–¶–∏–∫–ª ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        return await self._trading_loops._ml_prediction_loop()
    
    async def _news_collection_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        return await self._trading_loops._news_collection_loop()
    
    async def _sentiment_analysis_loop(self):
        """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        return await self._trading_loops._sentiment_analysis_loop()
    
    async def _event_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        return await self._trading_loops._event_processing_loop()
    
    # =================================================================
    # –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ market_analysis.py
    # =================================================================
    
    async def _update_market_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._market_analysis._update_market_data()
    
    async def _update_market_data_for_symbol(self, symbol: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        return await self._market_analysis._update_market_data_for_symbol(symbol)
    
    async def _find_all_trading_opportunities(self):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        return await self._market_analysis._find_all_trading_opportunities()
    
    async def _analyze_with_ml(self, symbol: str, df):
        """–ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –º–æ–¥–µ–ª–µ–π"""
        return await self._market_analysis._analyze_with_ml(symbol, df)
    
    def _prepare_market_data(self, symbol: str):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return self._market_analysis._prepare_market_data(symbol)
    
    # =================================================================
    # –ò–°–ü–û–õ–ù–ï–ù–ò–ï –°–î–ï–õ–û–ö - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trade_execution.py
    # =================================================================
    
    async def _execute_best_trades(self, opportunities):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return await self._trade_execution._execute_best_trades(opportunities)
    
    async def _execute_trade(self, opportunity: Dict[str, Any]) -> bool:
        """–ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        return await self._trade_execution._execute_trade(opportunity)
    
    async def _simulate_trade(self, symbol: str, signal: str, position_size: float,
                             price: float, trade_data: Dict[str, Any]) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Paper Trading"""
        return await self._trade_execution._simulate_trade(symbol, signal, position_size, price, trade_data)
    
    def _calculate_position_size(self, symbol: str, price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        return self._trade_execution._calculate_position_size(symbol, price)
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ position_management.py
    # =================================================================
    
    async def _manage_all_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        return await self._position_management._manage_all_positions()
    
    async def _initialize_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return await self._position_management._initialize_strategies()
    
    # =================================================================
    # –ú–û–ù–ò–¢–û–†–ò–ù–ì - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ monitoring.py
    # =================================================================
    
    async def _perform_health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        return await self._monitoring._perform_health_check()
    
    async def get_market_data_enhanced(self, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ enhanced API"""
        return await self._monitoring.get_market_data_enhanced(symbol)
    
    async def get_account_balance_enhanced(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ enhanced API"""
        return await self._monitoring.get_account_balance_enhanced()
    
    async def monitor_enhanced_health(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è enhanced —Å–∏—Å—Ç–µ–º—ã"""
        return await self._monitoring.monitor_enhanced_health()
    
    # =================================================================
    # –£–¢–ò–õ–ò–¢–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ utilities.py
    # =================================================================
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        return self._utilities.get_status()
    
    def get_full_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return self._utilities.get_full_status()
    
    def _sanitize_for_json(self, data: Any) -> Any:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return self._utilities._sanitize_for_json(data)
    
    def _sanitize_value(self, value):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –ø—Ä–æ—Å—Ç—ã–µ –¥–ª—è JSON"""
        return self._utilities._sanitize_value(value)
    
    def emit_status_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket"""
        return self._utilities.emit_status_update()
    
    def get_balance_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        return self._utilities.get_balance_info()
    
    def get_positions_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        return self._utilities.get_positions_info()
    
    # =================================================================
    # –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ compatibility.py
    # =================================================================
    
    def start(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        return self._compatibility.start()
    
    def stop(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        return self._compatibility.stop()
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return self._compatibility.__repr__()
    
    def set_socketio(self, socketio_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SocketIO –¥–ª—è WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        return self._compatibility.set_socketio(socketio_instance)
    
    # =================================================================
    # –ü–†–Ø–ú–´–ï –ê–¢–†–ò–ë–£–¢–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
    # =================================================================
    
    @property
    def lifecycle(self):
        """–î–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é lifecycle"""
        return self._lifecycle
    
    @property
    def position_manager(self):
        """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ position_manager –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π position_manager –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if hasattr(self, '_real_position_manager'):
            return self._real_position_manager
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return None

# =========================================================================
# === –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ===
# =========================================================================

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ (Singleton)
bot_manager = BotManager()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = [
    'BotManager', 
    'bot_manager',
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    'BotStatus', 
    'ComponentStatus', 
    'MarketPhase', 
    'RiskLevel', 
    'TradeDecision',
    'TradingOpportunity', 
    'MarketState', 
    'ComponentInfo', 
    'PerformanceMetrics', 
    'TradingStatistics'
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
    print("ü§ñ –ù–û–í–´–ô BotManager (–¥–∏—Ä–∏–∂–µ—Ä) –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"üìä Manager instance: {bot_manager}")
    print(f"üîß Configuration loaded: {hasattr(config, 'BYBIT_API_KEY') if config else 'No config'}")
    print("üéº –í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä!")