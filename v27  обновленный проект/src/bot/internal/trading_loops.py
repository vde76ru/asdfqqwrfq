"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã BotManager
–§–∞–π–ª: src/bot/internal/trading_loops.py
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)

async def _main_trading_loop(bot_instance):
    """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª - –° –ö–û–ù–¢–†–û–õ–ï–ú RATE LIMITS"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
    
    last_request_times = defaultdict(lambda: 0)
    
    while bot_instance.is_running and bot_instance.status == bot_instance.BotStatus.RUNNING:
        try:
            bot_instance.cycles_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤
            if bot_instance.cycles_count % 5 == 0:
                bot_instance.emit_status_update()

            cycle_start = time.time()
            
            logger.info(f"üîÑ –¶–∏–∫–ª #{bot_instance.cycles_count} - –∞–Ω–∞–ª–∏–∑ {len(bot_instance.active_pairs)} –ø–∞—Ä")
            
            # === –ö–û–ù–¢–†–û–õ–¨ RATE LIMITS ===
            # Bybit limits: 120 requests per minute –¥–ª—è spot
            max_requests_per_minute = 100
            min_request_interval = 60.0 / max_requests_per_minute  # ~0.6 —Å–µ–∫—É–Ω–¥—ã
            
            # 1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
            from .position_management import _manage_all_positions
            await _manage_all_positions(bot_instance)
            await asyncio.sleep(0.1)  # ‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            from .market_analysis import _update_market_data_for_symbol
            update_tasks = []
            for symbol in bot_instance.active_pairs:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                task = asyncio.create_task(_update_market_data_for_symbol(bot_instance, symbol))
                update_tasks.append(task)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –¥–ª—è rate limit
                await asyncio.sleep(0.05)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if update_tasks:
                await asyncio.gather(*update_tasks, return_exceptions=True)
            
            # 3. –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            from .market_analysis import _find_all_trading_opportunities
            opportunities = await _find_all_trading_opportunities(bot_instance)
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
            
            # 4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫
            if opportunities:
                from .trade_execution import _execute_best_trades
                trades_executed = await _execute_best_trades(bot_instance, opportunities)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trades_executed}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
            cycle_time = time.time() - cycle_start
            logger.info(f"‚è±Ô∏è –¶–∏–∫–ª #{bot_instance.cycles_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å, —Å–¥–µ–ª–æ–∫: 0")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –µ—Å–ª–∏ —Ü–∏–∫–ª –±—ã—Å—Ç—Ä—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É
            if cycle_time < 30:
                await asyncio.sleep(max(5, 30 - cycle_time))  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(5)

async def _market_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break

async def _pair_discovery_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä
            await asyncio.sleep(bot_instance.config.PAIR_DISCOVERY_INTERVAL_HOURS * 3600)
        except asyncio.CancelledError:
            break

async def _position_management_loop(bot_instance):
    """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            break

async def _risk_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
            await asyncio.sleep(60)
        except asyncio.CancelledError:
            break

async def _health_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            from .monitoring import _perform_health_check
            health_status = await _perform_health_check(bot_instance)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break

async def _performance_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await asyncio.sleep(60)
        except asyncio.CancelledError:
            break

async def _data_export_loop(bot_instance):
    """–¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(3600)  # 1 —á–∞—Å
        except asyncio.CancelledError:
            break

async def _ml_training_loop(bot_instance):
    """–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    while not bot_instance._stop_event.is_set():
        try:
            # –ñ–¥–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            interval = getattr(bot_instance.config, 'ML_MODEL_RETRAIN_INTERVAL', 86400)  # 24 —á–∞—Å–∞
            await asyncio.sleep(interval)
            
            if bot_instance._stop_event.is_set():
                break
            
            logger.info("üéì –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π...")
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
            if hasattr(bot_instance, 'ml_system') and bot_instance.ml_system and hasattr(bot_instance.ml_system, 'trainer'):
                for symbol in list(bot_instance.active_pairs)[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–∞—Ä
                    try:
                        logger.info(f"üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")
                        result = await bot_instance.ml_system.trainer.train_symbol_model(symbol)
                        
                        if result.get('success'):
                            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è {symbol}")
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
        
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ML training loop: {e}")

async def _ml_prediction_loop(bot_instance):
    """–¶–∏–∫–ª ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break

async def _news_collection_loop(bot_instance):
    """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break

async def _sentiment_analysis_loop(bot_instance):
    """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            break

async def _event_processing_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await asyncio.sleep(1)
        except asyncio.CancelledError:
            break

async def _start_all_trading_loops(bot_instance):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        bot_instance.tasks['main_trading'] = asyncio.create_task(
            _main_trading_loop(bot_instance), name="main_trading"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
        bot_instance.tasks['market_monitoring'] = asyncio.create_task(
            _market_monitoring_loop(bot_instance), name="market_monitoring"
        )
        
        # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        bot_instance.tasks['pair_discovery'] = asyncio.create_task(
            _pair_discovery_loop(bot_instance), name="pair_discovery"
        )
        
        # –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
        bot_instance.tasks['position_management'] = asyncio.create_task(
            _position_management_loop(bot_instance), name="position_management"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
        bot_instance.tasks['risk_monitoring'] = asyncio.create_task(
            _risk_monitoring_loop(bot_instance), name="risk_monitoring"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
        bot_instance.tasks['health_monitoring'] = asyncio.create_task(
            _health_monitoring_loop(bot_instance), name="health_monitoring"
        )
        
        # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        bot_instance.tasks['performance_monitoring'] = asyncio.create_task(
            _performance_monitoring_loop(bot_instance), name="performance_monitoring"
        )
        
        # –¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        bot_instance.tasks['data_export'] = asyncio.create_task(
            _data_export_loop(bot_instance), name="data_export"
        )
        
        # –¶–∏–∫–ª—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if bot_instance.config.ENABLE_MACHINE_LEARNING:
            bot_instance.tasks['ml_training'] = asyncio.create_task(
                _ml_training_loop(bot_instance), name="ml_training"
            )
            bot_instance.tasks['ml_prediction'] = asyncio.create_task(
                _ml_prediction_loop(bot_instance), name="ml_prediction"
            )
        
        # –¶–∏–∫–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if bot_instance.config.ENABLE_NEWS_ANALYSIS:
            bot_instance.tasks['news_collection'] = asyncio.create_task(
                _news_collection_loop(bot_instance), name="news_collection"
            )
            bot_instance.tasks['sentiment_analysis'] = asyncio.create_task(
                _sentiment_analysis_loop(bot_instance), name="sentiment_analysis"
            )
        
        # –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        bot_instance.tasks['event_processing'] = asyncio.create_task(
            _event_processing_loop(bot_instance), name="event_processing"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–¥–∞—á
        for task_name in bot_instance.tasks:
            bot_instance.task_health[task_name] = 'starting'
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(bot_instance.tasks)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {e}")
        raise