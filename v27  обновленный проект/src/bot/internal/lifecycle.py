"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º BotManager
–§–∞–π–ª: src/bot/internal/lifecycle.py

–í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–∞—É–∑—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
"""

import asyncio
import logging
import threading
import time
from datetime import datetime, timedelta
from typing import Tuple, Optional

from .types import BotStatus
from .initialization import initialize_all_components, display_account_info
from .trading_pairs import discover_all_trading_pairs, load_pairs_from_config, load_historical_data_for_pairs
from .trading_loops import start_all_trading_loops

logger = logging.getLogger(__name__)


def start(bot_manager) -> Tuple[bool, str]:
    """
    –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Flask API.
    –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏.
    """
    if bot_manager.is_running:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞.")
        return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."

    logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
    bot_manager.status = BotStatus.STARTING
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º threading.Event –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
    bot_manager._stop_event = threading.Event()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    bot_manager._async_thread = threading.Thread(target=run_async_tasks, args=(bot_manager,), name="BotAsyncLoopThread")
    bot_manager._async_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–º—Ä–µ—Ç
    bot_manager._async_thread.start()
    
    time.sleep(3) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    if bot_manager.is_running:
        msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
        logger.info(msg)
        return True, msg
    else:
        msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {bot_manager.status.value}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫."
        logger.error(msg)
        return False, msg


def stop(bot_manager) -> Tuple[bool, str]:
    """
    –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ Flask API.
    –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    if not bot_manager.is_running:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.")
        return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω."

    logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
    bot_manager.status = BotStatus.STOPPING
    
    if bot_manager._stop_event:
        bot_manager._stop_event.set() # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏–∫–ª—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        bot_manager.is_running = False
        return False, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    if bot_manager._async_thread:
        bot_manager._async_thread.join(timeout=15) # –î–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    if bot_manager._async_thread and bot_manager._async_thread.is_alive():
         bot_manager.status = BotStatus.ERROR
         msg = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è."
         logger.critical(msg)
         return False, msg

    bot_manager.status = BotStatus.STOPPED
    bot_manager.is_running = False
    msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    logger.info(msg)
    return True, msg


def run_async_tasks(bot_manager):
    """
    ‚ú® –ù–û–í–´–ô –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª
    —Å–æ–±—ã—Ç–∏–π asyncio –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ –Ω–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(start_async(bot_manager))
    except Exception as e:
        logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        bot_manager.status = BotStatus.ERROR
        bot_manager.is_running = False
    finally:
        logger.info("üèÅ –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")


async def start_async(bot_manager):
    """
    ‚ú® –ù–û–í–´–ô –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ú–ï–¢–û–î (—Ä–∞–Ω–µ–µ —ç—Ç–æ –±—ã–ª–∞ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –≤ start())
    –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–°–Ø –≤–∞—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã.
    """
    try:
        logger.info("ü§ñ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        bot_manager.start_time = datetime.utcnow()
        
        # --- –≠—Ç–∞–ø—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ) ---
        if not await initialize_all_components(bot_manager):
             raise RuntimeError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.")

        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ –¢–û–†–ì–û–í–´–• –ü–ê–†
        logger.info("üí∞ –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        from .trading_pairs import discover_all_trading_pairs, load_pairs_from_config
        pairs_discovered = await discover_all_trading_pairs(bot_manager)
        if not pairs_discovered:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ")
            load_pairs_from_config(bot_manager)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º DataCollector —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
        if bot_manager.data_collector and bot_manager.active_pairs:
            bot_manager.data_collector.set_active_pairs(list(bot_manager.active_pairs))
            logger.info(f"üìä DataCollector –æ–±–Ω–æ–≤–ª–µ–Ω —Å {len(bot_manager.active_pairs)} –ø–∞—Ä–∞–º–∏")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
        if bot_manager.active_pairs:
            logger.info("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            from .trading_pairs import load_historical_data_for_pairs
            await load_historical_data_for_pairs(bot_manager)
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot_manager.is_running = True
        bot_manager.status = BotStatus.RUNNING
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")

        # --- –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ---
        from .trading_loops import main_trading_loop
        await main_trading_loop(bot_manager)

    except Exception as e:
        bot_manager.status = BotStatus.ERROR
        bot_manager.is_running = False
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}", exc_info=True)
        if hasattr(bot_manager, '_send_error_notification'):
            await send_error_notification(bot_manager, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("üõë –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")


async def pause(bot_manager) -> Tuple[bool, str]:
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    if bot_manager.status != BotStatus.RUNNING:
        return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    
    try:
        logger.info("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        bot_manager.status = BotStatus.PAUSED
        bot_manager.pause_time = datetime.utcnow()
        bot_manager._pause_event.clear()  # –°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        await cancel_pending_orders(bot_manager)
        
        await send_pause_notification(bot_manager)
        
        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True, "–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
        logger.error(error_msg)
        return False, error_msg


async def resume(bot_manager) -> Tuple[bool, str]:
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    if bot_manager.status != BotStatus.PAUSED:
        return False, "–ë–æ—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ"
    
    try:
        logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        bot_manager.status = BotStatus.RUNNING
        bot_manager._pause_event.set()  # –°–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await refresh_market_data(bot_manager)
        
        await send_resume_notification(bot_manager)
        
        if bot_manager.pause_time:
            pause_duration = (datetime.utcnow() - bot_manager.pause_time).total_seconds()
            logger.info(f"‚úÖ –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã {pause_duration:.1f}—Å")
        
        return True, "–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        return False, error_msg


async def emergency_stop(bot_manager) -> Tuple[bool, str]:
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
        bot_manager.status = BotStatus.EMERGENCY_STOP
        bot_manager.emergency_stop_triggered = True
        
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        await emergency_close_all_positions(bot_manager)
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
        await cancel_all_orders(bot_manager)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ü–∏–∫–ª—ã
        bot_manager._stop_event.set()
        
        await send_emergency_notification(bot_manager)
        
        logger.critical("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
        logger.critical(error_msg)
        return False, error_msg


# =================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
# =================================================================

async def setup_signal_handlers(bot_manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    pass


async def validate_configuration(bot_manager) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return True


async def connect_exchange(bot_manager) -> bool:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π exchange_client"""
    try:
        if not bot_manager.exchange_client:
            logger.error("‚ùå Exchange client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if hasattr(bot_manager.exchange_client, 'is_connected') and bot_manager.exchange_client.is_connected:
            logger.info("‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–∏—Ä–∂–µ")
            return True
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if hasattr(bot_manager.exchange_client, 'test_connection'):
            connected = await bot_manager.exchange_client.test_connection()
            if connected:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
                
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ")
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
        return False


async def load_historical_data(bot_manager):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def perform_initial_market_analysis(bot_manager):
    """–ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    pass


async def setup_monitoring_system(bot_manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    pass


async def start_websocket_connections(bot_manager):
    """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pass


async def send_startup_notification(bot_manager):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
    pass


async def log_startup_statistics(bot_manager):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
    pass


async def save_current_state(bot_manager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    pass


async def close_all_positions_safely(bot_manager):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    pass


async def cancel_all_orders(bot_manager):
    """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    pass


async def stop_all_tasks(bot_manager):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    for task_name, task in bot_manager.tasks.items():
        if task and not task.done():
            task.cancel()
            try:
                await asyncio.wait_for(task, timeout=5.0)
            except asyncio.TimeoutError:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {task_name}")
            except asyncio.CancelledError:
                pass


async def close_websocket_connections(bot_manager):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pass


async def stop_ml_system(bot_manager):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã"""
    pass


async def export_final_data(bot_manager):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    pass


async def disconnect_exchange(bot_manager):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
    pass


async def close_database_connections(bot_manager):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
    pass


async def cleanup_caches(bot_manager):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π"""
    bot_manager.market_data_cache.clear()
    bot_manager.ml_predictions.clear()
    bot_manager.current_opportunities.clear()


async def send_shutdown_notification(bot_manager, old_status):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    pass


async def send_error_notification(bot_manager, error_msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    pass


async def cancel_pending_orders(bot_manager):
    """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    pass


async def send_pause_notification(bot_manager):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—É–∑–µ"""
    pass


async def refresh_market_data(bot_manager):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    pass


async def send_resume_notification(bot_manager):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    pass


async def emergency_close_all_positions(bot_manager):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    pass


async def send_emergency_notification(bot_manager):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    pass