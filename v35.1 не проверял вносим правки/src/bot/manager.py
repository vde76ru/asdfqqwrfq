#!/usr/bin/env python3
"""
–ù–û–í–´–ô –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ BOTMANAGER - –î–∏—Ä–∏–∂–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞
–§–∞–π–ª: src/bot/manager.py

üéØ –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
- –≠—Ç–æ—Ç —Ñ–∞–π–ª - –¢–û–õ–¨–ö–û –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –í—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ internal/ –º–æ–¥—É–ª–∏
- –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
- –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞

üìÅ –°–¢–†–£–ö–¢–£–†–ê:
manager.py (—ç—Ç–æ—Ç —Ñ–∞–π–ª) - –¥–∏—Ä–∏–∂–µ—Ä
‚îú‚îÄ‚îÄ internal/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py           # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
‚îÇ   ‚îú‚îÄ‚îÄ types.py              # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ Enums
‚îÇ   ‚îú‚îÄ‚îÄ initialization.py     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ lifecycle.py          # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
‚îÇ   ‚îú‚îÄ‚îÄ trading_pairs.py      # –†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ trading_loops.py      # –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã
‚îÇ   ‚îú‚îÄ‚îÄ market_analysis.py    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ trade_execution.py    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
‚îÇ   ‚îú‚îÄ‚îÄ position_management.py # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ monitoring.py         # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
‚îÇ   ‚îú‚îÄ‚îÄ utilities.py          # –£—Ç–∏–ª–∏—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
‚îÇ   ‚îî‚îÄ‚îÄ compatibility.py      # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any

# =================================================================
# üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∏–º–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ü–∏–∫–ª.
# –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ __init__.
# =================================================================
from .internal.types import (
    BotStatus, ComponentStatus, MarketPhase, RiskLevel, TradeDecision,
    TradingOpportunity, MarketState, ComponentInfo, PerformanceMetrics, TradingStatistics
)
from ..core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

class BotManager:
    """
    ü§ñ –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê - –î–ò–†–ò–ñ–ï–† –û–†–ö–ï–°–¢–†–ê
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É!
    –û–Ω —Ç–æ–ª—å–∫–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏.
    
    –í—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src/bot/internal/ –º–æ–¥—É–ª—è—Ö.
    """
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        """–ü–∞—Ç—Ç–µ—Ä–Ω Singleton"""
        if cls._instance is None:
            cls._instance = super(BotManager, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–µ–≥–∞—Ç–æ–≤"""
        if BotManager._initialized:
            return
            
        BotManager._initialized = True
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ì–õ–ê–í–ù–û–ì–û BotManager (–¥–∏—Ä–∏–∂–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞)...")
        
        # === –û–°–ù–û–í–ù–´–ï –ê–¢–†–ò–ë–£–¢–´ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===
        self.status = BotStatus.STOPPED
        self.start_time = None
        self.stop_time = None
        self.pause_time = None
        self.is_running = False
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
        self.all_trading_pairs = []
        self.active_pairs = []
        self.inactive_pairs = []
        self.blacklisted_pairs = set()
        self.watchlist_pairs = []
        self.trending_pairs = []
        self.high_volume_pairs = []
        self.positions = {}
        self.pending_orders = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.cycles_count = 0
        self.trades_today = 0
        self.daily_profit = 0.0
        self.weekly_profit = 0.0
        self.monthly_profit = 0.0
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.components = {}
        self.tasks = {}
        self.task_health = {}
        
        # Exchange –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.exchange_client = None
        self.enhanced_exchange_client = None
        self.exchange = None
        self.market_analyzer = None
        self.trader = None
        self.risk_manager = None
        self.portfolio_manager = None
        self.notifier = None
        self.data_collector = None
        self.strategy_factory = None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.available_strategies = config.ENABLED_STRATEGIES if hasattr(config, 'ENABLED_STRATEGIES') else {}
        self.strategy_instances = {}
        self.strategy_performance = {}
        
        # –ë–∞–ª–∞–Ω—Å –∏ —Ç–æ—Ä–≥–æ–≤–ª—è
        self.balance = 0.0
        self.available_balance = 0.0
        self.locked_balance = 0.0
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.market_data_cache = {}
        self.price_history = {}
        self.volume_history = {}
        self.indicator_cache = {}
        self.candle_cache = {}
        
        # –°–æ–±—ã—Ç–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self._stop_event = None
        self._pause_event = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = config
        self.bot_config = config
        self.testnet = getattr(config, 'USE_TESTNET', False)
        self._exchange_initialized = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
        self._init_signal_components()
        
        # =================================================================
        # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –∑–¥–µ—Å—å, –≤–Ω—É—Ç—Ä–∏ __init__,
        # —á—Ç–æ–±—ã —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.
        # =================================================================
        logger.info("üéº –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π (–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç)...")
        
        from .internal.initialization import get_initialization
        from .internal.lifecycle import get_lifecycle
        from .internal.trading_pairs import get_trading_pairs
        from .internal.trading_loops import get_trading_loops
        from .internal.market_analysis import get_market_analysis
        from .internal.trade_execution import get_trade_execution
        from .internal.position_management import get_position_management
        from .internal.monitoring import get_monitoring
        from .internal.utilities import get_utilities
        from .internal.compatibility import get_compatibility

        # === –°–û–ó–î–ê–ù–ò–ï –î–ï–õ–ï–ì–ê–¢–û–í ===
        self._initialization = get_initialization(self)
        self._lifecycle = get_lifecycle(self)
        self._trading_pairs = get_trading_pairs(self)
        self._trading_loops = get_trading_loops(self)
        self._market_analysis = get_market_analysis(self)
        self._trade_execution = get_trade_execution(self)
        self._position_management = get_position_management(self)
        self._monitoring = get_monitoring(self)
        self._utilities = get_utilities(self)
        self._compatibility = get_compatibility(self)
        
        logger.info("‚úÖ BotManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –¥–∏—Ä–∏–∂–µ—Ä")
    
    def _init_signal_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            from ..api_clients.onchain_data_producer import OnchainDataProducer
            self.onchain_producer = OnchainDataProducer()
            
            from ..api_clients.bybit_data_producer import BybitDataProducer
            self.bybit_producer = BybitDataProducer(testnet=self.testnet)
    
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞–Ω–∞–ª–∏–∑–∞
            from ..strategies.whale_hunting import WhaleHuntingStrategy
            self.whale_hunting_strategy = WhaleHuntingStrategy()
            
            from ..strategies.sleeping_giants import SleepingGiantsStrategy
            self.sleeping_giants_strategy = SleepingGiantsStrategy()
            
            from ..strategies.order_book_analysis import OrderBookAnalysisStrategy
            self.order_book_analysis = OrderBookAnalysisStrategy()
            
            from ..strategies.signal_aggregator import SignalAggregator
            self.signal_aggregator = SignalAggregator()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NotificationManager
            if hasattr(config, "TELEGRAM_BOT_TOKEN") and hasattr(config, "TELEGRAM_CHAT_ID"):
                from ..notifications import NotificationManager
                from ..core.database import SessionLocal
                notification_config = {
                    'telegram_token': getattr(config, 'TELEGRAM_BOT_TOKEN', None),
                    'telegram_chat_id': getattr(config, 'TELEGRAM_CHAT_ID', None),
                    'min_signal_strength': 0.7,
                    'cooldown_minutes': 60,
                    'check_interval': 60
                }
                self.notification_manager = NotificationManager()
                
                logger.info("Notification Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                self.notification_manager = None
                logger.warning("NotificationManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram.")
    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}", exc_info=True)
    
    # =================================================================
    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ initialization.py
    # =================================================================
    
    async def initialize_all_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        return await self._initialization.initialize_all_components()
    
    async def init_exchange_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
        return await self._initialization.init_exchange_client()
    
    async def initialize_enhanced_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        return await self._initialization.initialize_enhanced_exchange()
    
    async def init_market_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        return await self._initialization.init_market_analyzer()
    
    async def init_trader(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        return await self._initialization.init_trader()
    
    async def init_risk_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
        return await self._initialization.init_risk_manager()
    
    async def init_portfolio_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return await self._initialization.init_portfolio_manager()
    
    async def init_notifier(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return await self._initialization.init_notifier()
    
    async def init_data_collector(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return await self._initialization.init_data_collector()
    
    async def init_strategy_factory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return await self._initialization.init_strategy_factory()
    
    async def display_account_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        return await self._initialization.display_account_info()
    
    async def _process_balance_info(self, balance_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        return await self._initialization._process_balance_info(balance_info)
    
    # =================================================================
    # –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ lifecycle.py
    # =================================================================
    
    async def start_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.start_async()
    
    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.pause()
    
    async def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return await self._lifecycle.resume()
    
    async def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return await self._lifecycle.emergency_stop()
    
    async def _start_all_trading_loops(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
        return await self._lifecycle._start_all_trading_loops()
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –ü–ê–†–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trading_pairs.py
    # =================================================================
    
    async def _discover_all_trading_pairs(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_pairs._discover_all_trading_pairs()
    
    async def _load_historical_data_for_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_pairs._load_historical_data_for_pairs()
    
    def _load_pairs_from_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self._trading_pairs._load_pairs_from_config()
    
    async def update_pairs(self, pairs: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self._trading_pairs.update_pairs(pairs)
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –¶–ò–ö–õ–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trading_loops.py
    # =================================================================
    
    async def _main_trading_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        return await self._trading_loops._main_trading_loop()
    
    async def _market_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
        return await self._trading_loops._market_monitoring_loop()
    
    async def _pair_discovery_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return await self._trading_loops._pair_discovery_loop()
    
    async def _position_management_loop(self):
        """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        return await self._trading_loops._position_management_loop()
    
    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
        return await self._trading_loops._risk_monitoring_loop()
    
    async def _health_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        return await self._trading_loops._health_monitoring_loop()
    
    async def _performance_tracking_loop(self):
        """–¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return await self._trading_loops._performance_tracking_loop()
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return await self._trading_loops._cleanup_loop()
    
    async def _balance_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞"""
        return await self._trading_loops._balance_monitoring_loop()
    
    async def _strategy_evaluation_loop(self):
        """–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return await self._trading_loops._strategy_evaluation_loop()
    
    async def _data_collection_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return await self._trading_loops._data_collection_loop()
    
    async def _sentiment_analysis_loop(self):
        """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        return await self._trading_loops._sentiment_analysis_loop()
    
    async def _event_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        return await self._trading_loops._event_processing_loop()
    
    async def start_signal_system_loops(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return await self._trading_loops.start_signal_system_loops()
    
    # =================================================================
    # –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ market_analysis.py
    # =================================================================
    
    async def _analyze_market_conditions(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        return await self._market_analysis._analyze_market_conditions()
    
    async def _analyze_single_pair(self, symbol: str) -> Optional[MarketState]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        return await self._market_analysis._analyze_single_pair(symbol)
    
    async def _detect_market_phase(self, symbol: str, klines: List[Dict]) -> MarketPhase:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞"""
        return await self._market_analysis._detect_market_phase(symbol, klines)
    
    async def _calculate_volatility_metrics(self, symbol: str, klines: List[Dict]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return await self._market_analysis._calculate_volatility_metrics(symbol, klines)
    
    async def _analyze_volume_profile(self, symbol: str, klines: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–æ–≤"""
        return await self._market_analysis._analyze_volume_profile(symbol, klines)
    
    async def _calculate_trend_strength(self, symbol: str, klines: List[Dict]) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        return await self._market_analysis._calculate_trend_strength(symbol, klines)
    
    async def _analyze_support_resistance(self, symbol: str, klines: List[Dict]) -> Dict[str, List[float]]:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        return await self._market_analysis._analyze_support_resistance(symbol, klines)
    
    async def _find_all_trading_opportunities(self) -> List[TradingOpportunity]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return await self._market_analysis._find_all_trading_opportunities()
    
    async def _evaluate_opportunity(self, symbol: str, market_state: MarketState) -> Optional[TradingOpportunity]:
        """–û—Ü–µ–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        return await self._market_analysis._evaluate_opportunity(symbol, market_state)
    
    async def _calculate_entry_exit_points(self, symbol: str, decision: TradeDecision) -> Tuple[float, float, float]:
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
        return await self._market_analysis._calculate_entry_exit_points(symbol, decision)
    
    # =================================================================
    # –ò–°–ü–û–õ–ù–ï–ù–ò–ï –°–î–ï–õ–û–ö - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ trade_execution.py
    # =================================================================
    
    async def _execute_best_trades(self, opportunities: List[TradingOpportunity]) -> int:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        return await self._trade_execution._execute_best_trades(opportunities)
    
    async def _execute_single_trade(self, opportunity: TradingOpportunity) -> bool:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        return await self._trade_execution._execute_single_trade(opportunity)
    
    async def _validate_trade_opportunity(self, opportunity: TradingOpportunity) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        return await self._trade_execution._validate_trade_opportunity(opportunity)
    
    async def _calculate_position_size(self, opportunity: TradingOpportunity) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        return await self._trade_execution._calculate_position_size(opportunity)
    
    async def _place_trade_order(self, opportunity: TradingOpportunity, position_size: float) -> Optional[dict]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        return await self._trade_execution._place_trade_order(opportunity, position_size)
    
    async def _monitor_order_execution(self, order: dict) -> bool:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        return await self._trade_execution._monitor_order_execution(order)
    
    async def _place_protective_orders(self, order: dict, opportunity: TradingOpportunity) -> bool:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        return await self._trade_execution._place_protective_orders(order, opportunity)
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ position_management.py
    # =================================================================
    
    async def _update_all_positions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return await self._position_management._update_all_positions()
    
    async def _check_position_exits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π"""
        return await self._position_management._check_position_exits()
    
    async def _update_stop_losses(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤"""
        return await self._position_management._update_stop_losses()
    
    async def _manage_position_risk(self, position: dict):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–∏"""
        return await self._position_management._manage_position_risk(position)
    
    async def _close_position(self, position: dict, reason: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        return await self._position_management._close_position(position, reason)
    
    async def _calculate_position_pnl(self, position: dict) -> float:
        """–†–∞—Å—á–µ—Ç PnL –ø–æ–∑–∏—Ü–∏–∏"""
        return await self._position_management._calculate_position_pnl(position)
    
    # =================================================================
    # –ú–û–ù–ò–¢–û–†–ò–ù–ì - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ monitoring.py
    # =================================================================
    
    async def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        return await self._monitoring._check_system_health()
    
    async def _monitor_component_health(self) -> Dict[str, ComponentStatus]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        return await self._monitoring._monitor_component_health()
    
    async def _check_exchange_connectivity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π"""
        return await self._monitoring._check_exchange_connectivity()
    
    async def _monitor_memory_usage(self) -> Dict[str, float]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        return await self._monitoring._monitor_memory_usage()
    
    async def _monitor_task_health(self) -> Dict[str, str]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–¥–∞—á"""
        return await self._monitoring._monitor_task_health()
    
    async def _check_rate_limits(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return await self._monitoring._check_rate_limits()
    
    async def _track_performance_metrics(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return await self._monitoring._track_performance_metrics()
    
    async def _calculate_current_metrics(self) -> PerformanceMetrics:
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        return await self._monitoring._calculate_current_metrics()
    
    async def _update_trading_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return await self._monitoring._update_trading_statistics()
    
    # =================================================================
    # –£–¢–ò–õ–ò–¢–´ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ utilities.py
    # =================================================================
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return self._utilities.get_status()
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self._utilities.get_performance_stats()
    
    def get_active_strategies(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return self._utilities.get_active_strategies()
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return await self._utilities.cleanup_old_data()
    
    def format_balance_info(self, balance_info: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        return self._utilities.format_balance_info(balance_info)
    
    def log_trade_result(self, trade_result: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        return self._utilities.log_trade_result(trade_result)
    
    # =================================================================
    # –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ compatibility.py
    # =================================================================
    
    def start(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        return self._compatibility.start()
    
    def stop(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        return self._compatibility.stop()
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return self._compatibility.__repr__()
    
    def set_socketio(self, socketio_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SocketIO –¥–ª—è WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        return self._compatibility.set_socketio(socketio_instance)
    
    # =================================================================
    # –ü–†–Ø–ú–´–ï –ê–¢–†–ò–ë–£–¢–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
    # =================================================================
    
    @property
    def lifecycle(self):
        """–î–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é lifecycle"""
        return self._lifecycle
    
    @property
    def position_manager(self):
        """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ position_manager –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if hasattr(self, '_real_position_manager'):
            return self._real_position_manager
        return None

# =========================================================================
# === –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ===
# =========================================================================

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ (Singleton)
bot_manager = BotManager()

def get_bot_manager():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotManager."""
    return bot_manager

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = [
    'BotManager', 
    'bot_manager',
    'get_bot_manager',
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    'BotStatus', 
    'ComponentStatus', 
    'MarketPhase', 
    'RiskLevel', 
    'TradeDecision',
    'TradingOpportunity', 
    'MarketState', 
    'ComponentInfo', 
    'PerformanceMetrics', 
    'TradingStatistics'
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
    print("ü§ñ –ù–û–í–´–ô BotManager (–¥–∏—Ä–∏–∂–µ—Ä) –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"üìä Manager instance: {bot_manager}")
    print(f"üîß Configuration loaded: {hasattr(config, 'BYBIT_API_KEY') if config else 'No config'}")
    print("üéº –í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä!")
