#!/usr/bin/env python3
"""
–ü—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –æ–Ω—á–µ–π–Ω-–¥–∞–Ω–Ω—ã—Ö —Å Etherscan –∏ –∞–Ω–∞–ª–æ–≥–æ–≤
–§–∞–π–ª: src/api_clients/onchain_data_producer.py

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API –õ–ò–ú–ò–¢–û–í:
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—É–∑—ã –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Etherscan/BscScan/PolygonScan (5 req/sec)
- –£–ª—É—á—à–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è CoinGecko API
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting
"""
import asyncio
import aiohttp
import logging
import time
from typing import Dict, List, Optional, Any, Union
from datetime import datetime, timedelta
from decimal import Decimal
import json
import os
from dataclasses import dataclass
from enum import Enum

from ..core.database import SessionLocal
from ..core.models import WhaleTransaction, TransactionTypeEnum
from ..core.unified_config import unified_config as config

logger = logging.getLogger(__name__)


class BlockchainNetwork(Enum):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–∏"""
    ETHEREUM = "ethereum"
    BSC = "bsc"
    POLYGON = "polygon"


@dataclass
class NetworkConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏"""
    name: str
    api_base_url: str
    api_key: str
    native_token: str
    decimals: int = 18
    block_time: int = 12  # —Å–µ–∫—É–Ω–¥


class OnchainDataProducer:
    """
    –ü—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –æ–Ω—á–µ–π–Ω-–¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∫–∏—Ç–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Etherscan, BscScan, PolygonScan (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API)
    
    ‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï API –õ–ò–ú–ò–¢–û–í:
    - Etherscan, BscScan, PolygonScan: 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
    - CoinGecko: 30 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç)
    """
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∏—Ç–æ–≤ (–≤ USD)
    WHALE_THRESHOLDS = {
        'ethereum': 1_000_000,    # $1M –¥–ª—è Ethereum
        'bsc': 500_000,          # $500K –¥–ª—è BSC
        'polygon': 250_000       # $250K –¥–ª—è Polygon
    }
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –±–∏—Ä–∂
    EXCHANGE_ADDRESSES = {
        'binance': {
            'ethereum': ['0x28c6c06298d514db089934071355e5743bf21d60', 
                        '0xdfd5293d8e347dfe59e90efd55b2956a1343963d'],
            'bsc': ['0x8894e0a0c962cb723c1976a4421c95949be2d4e3']
        },
        'bybit': {
            'ethereum': ['0xf89d7b9c864f589bbf53a82105107622b35eaa40']
        },
        'okx': {
            'ethereum': ['0x06959153b974d0d5fdfd87d561db6d8d4fa0bb0b']
        },
        'kucoin': {
            'ethereum': ['0xb8e6d31e7b212b2b7250ee9c26c56cebbfbe6b23']
        }
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        self.networks = self._init_networks()
        self.session: Optional[aiohttp.ClientSession] = None
        self.is_running = False
        self.last_blocks = {}  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù
        self.token_prices = {}  # –ö—ç—à —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {symbol: (price, timestamp)}
        self.price_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def _init_networks(self) -> Dict[str, NetworkConfig]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ç–µ–π"""
        return {
            BlockchainNetwork.ETHEREUM.value: NetworkConfig(
                name="Ethereum",
                api_base_url="https://api.etherscan.io/api",
                api_key=getattr(config, 'ETHERSCAN_API_KEY', ''),
                native_token="ETH",
                decimals=18,
                block_time=12
            ),
            BlockchainNetwork.BSC.value: NetworkConfig(
                name="BSC",
                api_base_url="https://api.bscscan.com/api",
                api_key=getattr(config, 'BSCSCAN_API_KEY', ''),
                native_token="BNB",
                decimals=18,
                block_time=3
            ),
            BlockchainNetwork.POLYGON.value: NetworkConfig(
                name="Polygon",
                api_base_url="https://api.polygonscan.com/api",
                api_key=getattr(config, 'POLYGONSCAN_API_KEY', ''),
                native_token="MATIC",
                decimals=18,
                block_time=2
            )
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ OnchainDataProducer...")
        
        self.session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30))
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
        tasks = []
        for network_name, network_config in self.networks.items():
            if network_config.api_key:
                tasks.append(asyncio.create_task(self._monitor_network(network_name)))
            else:
                logger.warning(f"‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è {network_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
        await asyncio.gather(*tasks)
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OnchainDataProducer...")
        self.is_running = False
        
        if self.session:
            await self.session.close()
            
    async def _monitor_network(self, network: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏"""
        logger.info(f"üëÅÔ∏è –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ {network}")
        
        network_config = self.networks[network]
        retry_count = 0
        max_retries = 3
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
                current_block = await self._get_latest_block(network)
                
                if not current_block:
                    await asyncio.sleep(10)
                    continue
                    
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                if network not in self.last_blocks:
                    self.last_blocks[network] = current_block - 1
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
                if current_block > self.last_blocks[network]:
                    await self._process_blocks(
                        network, 
                        self.last_blocks[network] + 1, 
                        current_block
                    )
                    self.last_blocks[network] = current_block
                    
                # –ñ–¥–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∞
                await asyncio.sleep(network_config.block_time)
                retry_count = 0
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {network}: {e}")
                retry_count += 1
                
                if retry_count >= max_retries:
                    logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {network}")
                    await asyncio.sleep(60)  # –î–æ–ª–≥–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    retry_count = 0
                else:
                    await asyncio.sleep(10 * retry_count)
                    
    async def _get_latest_block(self, network: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞"""
        network_config = self.networks[network]
        
        params = {
            'module': 'proxy',
            'action': 'eth_blockNumber',
            'apikey': network_config.api_key
        }
        
        try:
            async with self.session.get(
                network_config.api_base_url, 
                params=params
            ) as response:
                data = await response.json()
                
                if data.get('status') == '1' and data.get('result'):
                    return int(data['result'], 16)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞ {network}: {e}")
            
        return None
        
    async def _process_blocks(self, network: str, start_block: int, end_block: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–ª–æ–∫–æ–≤"""
        logger.debug(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ {start_block}-{end_block} –≤ {network}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫–æ–≤
        transactions = await self._get_transactions(network, start_block, end_block)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–æ–≤
        whale_txs = await self._filter_whale_transactions(network, transactions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if whale_txs:
            await self._save_transactions(whale_txs)
            logger.info(f"üêã –ù–∞–π–¥–µ–Ω–æ {len(whale_txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –≤ {network}")
            
    async def _get_transactions(self, network: str, start_block: int, end_block: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–ª–æ–∫–æ–≤
        ‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï API –õ–ò–ú–ò–¢–û–í: 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
        """
        network_config = self.networks[network]
        all_transactions = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –∑–∞ —Ä–∞–∑
        blocks_per_request = 10
        
        for block_start in range(start_block, end_block + 1, blocks_per_request):
            block_end = min(block_start + blocks_per_request - 1, end_block)
            
            # –ü–æ–ª—É—á–∞–µ–º ERC20 —Ç–æ–∫–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã
            params = {
                'module': 'account',
                'action': 'tokentx',
                'startblock': block_start,
                'endblock': block_end,
                'sort': 'desc',
                'apikey': network_config.api_key
            }
            
            try:
                async with self.session.get(
                    network_config.api_base_url, 
                    params=params
                ) as response:
                    data = await response.json()
                    
                    if data.get('status') == '1' and data.get('result'):
                        all_transactions.extend(data['result'])
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {network}: {e}")
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API
            # –õ–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É = 210–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.21)  # 210 –º—Å –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 5 req/sec
                
        return all_transactions
        
    async def _filter_whale_transactions(self, network: str, transactions: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤"""
        whale_txs = []
        threshold = self.WHALE_THRESHOLDS.get(network, 1_000_000)
        
        for tx in transactions:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
                symbol = tx.get('tokenSymbol', '').upper()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –Ω–∞—Å —Ç–æ–∫–µ–Ω
                tracked_symbols = getattr(config, 'TRACKED_SYMBOLS', ['BTC', 'ETH', 'USDT', 'USDC'])
                if symbol not in tracked_symbols:
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                decimals = int(tx.get('tokenDecimal', 18))
                value = Decimal(tx.get('value', 0)) / Decimal(10 ** decimals)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
                token_price = await self._get_token_price(symbol)
                if not token_price:
                    continue
                    
                # –í—ã—á–∏—Å–ª—è–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å
                usd_value = float(value) * token_price
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                if usd_value >= threshold:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx_type = self._determine_transaction_type(
                        tx.get('from', '').lower(),
                        tx.get('to', '').lower()
                    )
                    
                    whale_txs.append({
                        'network': network,
                        'hash': tx.get('hash'),
                        'from': tx.get('from'),
                        'to': tx.get('to'),
                        'symbol': symbol,
                        'amount': float(value),
                        'usd_value': usd_value,
                        'tx_type': tx_type,
                        'timestamp': datetime.fromtimestamp(int(tx.get('timeStamp', 0))),
                        'block_number': int(tx.get('blockNumber', 0))
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                continue
                
        return whale_txs
        
    async def _get_token_price(self, symbol: str) -> Optional[float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        ‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï –õ–ò–ú–ò–¢–û–í: CoinGecko API ~30 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É
        """
        cache_key = symbol.upper()
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.token_prices:
            price, last_update = self.token_prices[cache_key]
            if current_time - last_update < self.price_cache_ttl:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
                logger.debug(f"üí∞ –¶–µ–Ω–∞ –¥–ª—è {symbol} –≤–∑—è—Ç–∞ –∏–∑ –∫—ç—à–∞: ${price}")
                return price

        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        logger.debug(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}...")
        
        # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CoinGecko API
        # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
        # try:
        #     url = f"https://api.coingecko.com/api/v3/simple/price"
        #     params = {'ids': symbol.lower(), 'vs_currencies': 'usd'}
        #     async with self.session.get(url, params=params) as response:
        #         data = await response.json()
        #         price = data.get(symbol.lower(), {}).get('usd')
        #         if price:
        #             self.token_prices[cache_key] = (price, current_time)
        #             return price
        # except Exception as e:
        #     logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        static_prices = {
            'BTC': 43000, 'ETH': 2300, 'BNB': 310,
            'USDT': 1, 'USDC': 1, 'SOL': 95, 'XRP': 0.6,
            'ADA': 0.48, 'AVAX': 35, 'DOT': 6.5, 'MATIC': 0.85, 
            'LINK': 14, 'UNI': 7.2, 'LTC': 73, 'ATOM': 10,
            'NEAR': 3.5, 'ALGO': 0.15, 'FTM': 0.5, 'SAND': 0.35
        }
        
        price = static_prices.get(symbol.upper())

        if price:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.token_prices[cache_key] = (price, current_time)
            logger.info(f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol} –ø–æ–ª—É—á–µ–Ω–∞ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞: ${price}")
            return price
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
            return None
        
    def _determine_transaction_type(self, from_address: str, to_address: str) -> TransactionTypeEnum:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        from_exchange = self._is_exchange_address(from_address)
        to_exchange = self._is_exchange_address(to_address)
        
        if from_exchange and not to_exchange:
            return TransactionTypeEnum.EXCHANGE_WITHDRAWAL
        elif to_exchange and not from_exchange:
            return TransactionTypeEnum.EXCHANGE_DEPOSIT
        elif self._is_dex_address(from_address) or self._is_dex_address(to_address):
            return TransactionTypeEnum.DEX_SWAP
        else:
            return TransactionTypeEnum.TRANSFER
            
    def _is_exchange_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –±–∏—Ä–∂–µ–≤—ã–º"""
        address_lower = address.lower()
        
        for exchange, networks in self.EXCHANGE_ADDRESSES.items():
            for network_addresses in networks.values():
                if address_lower in [addr.lower() for addr in network_addresses]:
                    return True
                    
        return False
        
    def _is_dex_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å DEX"""
        dex_addresses = [
            '0x7a250d5630b4cf539739df2c5dacb4c659f2488d',  # Uniswap V2 Router
            '0xe592427a0aece92de3edee1f18e0157c05861564',  # Uniswap V3 Router
            '0x10ed43c718714eb63d5aa57b78b54704e256024e',  # PancakeSwap Router
            '0x1b02da8cb0d097eb8d57a175b88c7d8b47997506',  # SushiSwap Router
            '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45',  # Uniswap V3 Router 2
        ]
        
        return address.lower() in [addr.lower() for addr in dex_addresses]
        
    async def _save_transactions(self, transactions: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î"""
        db = SessionLocal()
        
        try:
            saved_count = 0
            for tx_data in transactions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                existing = db.query(WhaleTransaction).filter_by(
                    blockchain=tx_data['network'],
                    transaction_hash=tx_data['hash']
                ).first()
                
                if not existing:
                    whale_tx = WhaleTransaction(
                        blockchain=tx_data['network'],
                        transaction_hash=tx_data['hash'],
                        from_address=tx_data['from'],
                        to_address=tx_data['to'],
                        symbol=tx_data['symbol'],
                        amount=Decimal(str(tx_data['amount'])),
                        usd_value=Decimal(str(tx_data['usd_value'])),
                        transaction_type=tx_data['tx_type'],
                        timestamp=tx_data['timestamp'],
                        block_number=tx_data['block_number'],
                        is_processed=False  # –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                    )
                    
                    db.add(whale_tx)
                    saved_count += 1
                    
            db.commit()
            if saved_count > 0:
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            db.rollback()
        finally:
            db.close()

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        return {
            'networks_monitored': len([n for n in self.networks.values() if n.api_key]),
            'cache_size': len(self.token_prices),
            'last_blocks': self.last_blocks.copy(),
            'is_running': self.is_running
        }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
async def main():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
    producer = OnchainDataProducer()
    
    try:
        await producer.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await producer.stop()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())