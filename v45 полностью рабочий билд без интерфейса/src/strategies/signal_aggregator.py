#!/usr/bin/env python3
"""
–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/strategies/signal_aggregator.py

–§—É–Ω–∫—Ü–∏–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º
- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
- –£—á–µ—Ç –≤–µ—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
import json
import numpy as np
from collections import defaultdict

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ core.models
from ..core.database import SessionLocal
from ..core.models import (
    Signal as SignalExtended,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å –∏–∑ models.py
    SignalTypeEnum as SignalType,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è enum
    AggregatedSignal,
    FinalSignalTypeEnum as FinalSignalType  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è enum
)
from ..core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

@dataclass
class StrategyWeight:
    """–í–µ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    name: str
    weight: float  # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    reliability: float  # –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (0-1)
    min_confidence: float  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞
    priority: int  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)
    
@dataclass
class SignalGroup:
    """–ì—Ä—É–ø–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    symbol: str
    signals: List[SignalExtended] = field(default_factory=list)
    buy_count: int = 0
    sell_count: int = 0
    neutral_count: int = 0
    total_confidence: float = 0.0
    weighted_confidence: float = 0.0
    timestamp: datetime = field(default_factory=datetime.utcnow)

class SignalAggregator:
    """
    –°–µ—Ä–≤–∏—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    # –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    STRATEGY_WEIGHTS = {
        'whale_hunting': StrategyWeight(
            name='whale_hunting',
            weight=1.5,
            reliability=0.75,
            min_confidence=0.3,
            priority=8
        ),
        'sleeping_giants': StrategyWeight(
            name='sleeping_giants',
            weight=1.2,
            reliability=0.8,
            min_confidence=0.4,
            priority=7
        ),
        'order_book_analysis': StrategyWeight(
            name='order_book_analysis',
            weight=1.0,
            reliability=0.7,
            min_confidence=0.35,
            priority=6
        ),
        'technical_analysis': StrategyWeight(
            name='technical_analysis',
            weight=0.8,
            reliability=0.65,
            min_confidence=0.4,
            priority=5
        )
    }
    
    def __init__(self, aggregation_window: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        
        Args:
            aggregation_window: –û–∫–Ω–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.aggregation_window = aggregation_window
        self.is_running = False
        self.db = None
        self.processed_signals = set()  # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.last_cleanup = datetime.utcnow()
        
        logger.info(f"SignalAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–∫–Ω–æ={aggregation_window}—Å)")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ SignalAggregator")
        self.is_running = True
        
        try:
            while self.is_running:
                await self.run()
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞: {e}")
        finally:
            self.is_running = False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SignalAggregator")
        self.is_running = False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        try:
            self.db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            new_signals = await self._get_new_signals()
            
            if not new_signals:
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            signal_groups = self._group_signals_by_symbol(new_signals)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for symbol, group in signal_groups.items():
                aggregated = await self._process_signal_group(group)
                
                if aggregated:
                    self._save_aggregated_signal(aggregated, group)
                    logger.info(
                        f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: "
                        f"{aggregated['final_signal_type']} "
                        f"(confidence={aggregated['confidence']:.2%})"
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –∫—ç—à
            for signal in new_signals:
                self.processed_signals.add(signal.id)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
            self._cleanup_cache()
            
            self.db.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
            if self.db:
                self.db.rollback()
        finally:
            if self.db:
                self.db.close()
                self.db = None
    
    async def _get_new_signals(self) -> List[SignalExtended]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        try:
            cutoff_time = datetime.utcnow() - timedelta(seconds=self.aggregation_window)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            signals = self.db.query(SignalExtended).filter(
                SignalExtended.created_at > cutoff_time,
                ~SignalExtended.id.in_(self.processed_signals) if self.processed_signals else True
            ).all()
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def _group_signals_by_symbol(self, signals: List[SignalExtended]) -> Dict[str, SignalGroup]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
        groups = defaultdict(lambda: SignalGroup(symbol=''))
        
        for signal in signals:
            group = groups[signal.symbol]
            group.symbol = signal.symbol
            group.signals.append(signal)
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            if hasattr(signal, 'signal_type'):
                signal_type = signal.signal_type
            elif hasattr(signal, 'action'):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º action –≤ signal_type
                action_to_type = {
                    'BUY': SignalType.BUY,
                    'SELL': SignalType.SELL,
                    'HOLD': SignalType.NEUTRAL
                }
                signal_type = action_to_type.get(signal.action, SignalType.NEUTRAL)
            else:
                signal_type = SignalType.NEUTRAL
            
            if signal_type == SignalType.BUY:
                group.buy_count += 1
            elif signal_type == SignalType.SELL:
                group.sell_count += 1
            else:
                group.neutral_count += 1
            
            # –°—É–º–º–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            group.total_confidence += signal.confidence
        
        return dict(groups)
    
    async def _process_signal_group(self, group: SignalGroup) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            weighted_buy = 0.0
            weighted_sell = 0.0
            total_weight = 0.0
            
            strategy_signals = {}  # –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            
            for signal in group.signals:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_weight = self.STRATEGY_WEIGHTS.get(
                    signal.strategy,
                    StrategyWeight(signal.strategy, 1.0, 0.5, 0.3, 5)
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                if signal.confidence < strategy_weight.min_confidence:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≤–µ—Å
                effective_weight = (
                    strategy_weight.weight * 
                    strategy_weight.reliability * 
                    signal.confidence
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
                if hasattr(signal, 'signal_type'):
                    signal_type = signal.signal_type
                elif hasattr(signal, 'action'):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º action –≤ signal_type
                    action_to_type = {
                        'BUY': SignalType.BUY,
                        'SELL': SignalType.SELL,
                        'HOLD': SignalType.NEUTRAL
                    }
                    signal_type = action_to_type.get(signal.action, SignalType.NEUTRAL)
                else:
                    signal_type = SignalType.NEUTRAL
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–∏–ø—É
                if signal_type == SignalType.BUY:
                    weighted_buy += effective_weight
                elif signal_type == SignalType.SELL:
                    weighted_sell += effective_weight
                
                total_weight += effective_weight
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_signals[signal.strategy] = {
                    'signal': signal,
                    'weight': effective_weight,
                    'priority': strategy_weight.priority
                }
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if total_weight == 0:
                return None
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
            weighted_buy /= total_weight
            weighted_sell /= total_weight
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            final_signal_type, confidence = self._determine_final_signal(
                weighted_buy, weighted_sell, strategy_signals
            )
            
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if final_signal_type == FinalSignalType.NEUTRAL and confidence < 0.4:
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = self._generate_metadata(group, strategy_signals)
            
            return {
                'symbol': group.symbol,
                'final_signal_type': final_signal_type,
                'confidence': confidence,
                'buy_weight': weighted_buy,
                'sell_weight': weighted_sell,
                'contributing_strategies': list(strategy_signals.keys()),
                'metadata': metadata
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return None
    
    def _determine_final_signal(self, weighted_buy: float, weighted_sell: float,
                                strategy_signals: Dict) -> Tuple[FinalSignalType, float]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Enum."""
        signal_diff = weighted_buy - weighted_sell
        base_confidence = abs(signal_diff)
        
        total_strategies = len(strategy_signals)
        if total_strategies > 1:
            buy_strategies = sum(
                1 for s in strategy_signals.values()
                if (hasattr(s['signal'], 'signal_type') and s['signal'].signal_type == SignalType.BUY) or
                   (hasattr(s['signal'], 'action') and s['signal'].action == 'BUY')
            )
            sell_strategies = sum(
                1 for s in strategy_signals.values()
                if (hasattr(s['signal'], 'signal_type') and s['signal'].signal_type == SignalType.SELL) or
                   (hasattr(s['signal'], 'action') and s['signal'].action == 'SELL')
            )
            consensus = max(buy_strategies, sell_strategies) / total_strategies
            base_confidence *= (0.5 + consensus * 0.5)
            
        max_priority = max(s['priority'] for s in strategy_signals.values())
        priority_factor = 0.5 + (max_priority / 10) * 0.5
        
        confidence = min(base_confidence * priority_factor, 1.0)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–ª–µ–Ω—ã Enum, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏
        if signal_diff > 0.6 and confidence > 0.7:
            return FinalSignalType.STRONG_BUY, confidence
        elif signal_diff > 0.3:
            return FinalSignalType.BUY, confidence
        elif signal_diff < -0.6 and confidence > 0.7:
            return FinalSignalType.STRONG_SELL, confidence
        elif signal_diff < -0.3:
            return FinalSignalType.SELL, confidence
        else:
            return FinalSignalType.NEUTRAL, confidence
    
    def _generate_metadata(self, group: SignalGroup, 
                          strategy_signals: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –≤–µ—Å—É
        sorted_strategies = sorted(
            strategy_signals.items(),
            key=lambda x: x[1]['weight'],
            reverse=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏—Ö –≤–∫–ª–∞–¥–æ–º
        strategy_contributions = []
        for strategy_name, data in sorted_strategies:
            signal = data['signal']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            if hasattr(signal, 'signal_type'):
                signal_type_value = signal.signal_type.value if hasattr(signal.signal_type, 'value') else str(signal.signal_type)
            elif hasattr(signal, 'action'):
                signal_type_value = signal.action
            else:
                signal_type_value = 'NEUTRAL'
            
            contribution = {
                'strategy': strategy_name,
                'signal_type': signal_type_value,
                'confidence': signal.confidence,
                'weight': data['weight'],
                'reason': signal.reason if hasattr(signal, 'reason') else ''
            }
            strategy_contributions.append(contribution)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        confidences = [s.confidence for s in group.signals]
        
        metadata = {
            'total_signals': len(group.signals),
            'buy_signals': group.buy_count,
            'sell_signals': group.sell_count,
            'strategy_contributions': strategy_contributions,
            'average_confidence': np.mean(confidences),
            'confidence_std': np.std(confidences),
            'aggregation_timestamp': datetime.utcnow().isoformat(),
            'window_seconds': self.aggregation_window
        }
        
        return metadata
    
    def _save_aggregated_signal(self, aggregated_data: Dict[str, Any], 
                               group: SignalGroup):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∏–≥–Ω–∞–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –¥–ª—è —Ü–µ–Ω—ã
            max_confidence_signal = max(
                group.signals, 
                key=lambda s: s.confidence
            )
            

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            details_json = json.dumps(aggregated_data.get('metadata', {}))
            
            aggregated_signal = AggregatedSignal(
                symbol=aggregated_data['symbol'],
                final_signal=aggregated_data['final_signal_type'],
                confidence_score=aggregated_data['confidence'],
                buy_signals_count=group.buy_count,
                sell_signals_count=group.sell_count,
                neutral_signals_count=group.neutral_count,
                contributing_signals=aggregated_data['contributing_strategies'],
                details=details_json,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            self.db.add(aggregated_signal)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def _cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à —Ä–∞–∑ –≤ —á–∞—Å
            if (datetime.utcnow() - self.last_cleanup).total_seconds() > 3600:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
                cutoff_time = datetime.utcnow() - timedelta(hours=2)
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                old_signal_ids = set(
                    self.db.query(SignalExtended.id).filter(
                        SignalExtended.timestamp < cutoff_time
                    ).all()
                )
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                self.processed_signals -= old_signal_ids
                
                self.last_cleanup = datetime.utcnow()
                logger.info(f"üßπ –û—á–∏—â–µ–Ω –∫—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤, —É–¥–∞–ª–µ–Ω–æ {len(old_signal_ids)} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def aggregate_signals_sync(self, symbol: str, strategies_data: List[Dict]) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã"""
        buy_weight = 0
        sell_weight = 0
        total_weight = 0
        for strategy in strategies_data:
            strategy_name = strategy['name']
            weight_info = self.STRATEGY_WEIGHTS.get(
                strategy_name,
                StrategyWeight(name=strategy_name, weight=1.0, reliability=0.5, min_confidence=0.3, priority=5)
            )
            if strategy['confidence'] < weight_info.min_confidence:
                continue
            weight = weight_info.weight * weight_info.reliability
            if strategy['status'] == 'BUY':
                buy_weight += weight * strategy['confidence']
            elif strategy['status'] == 'SELL':
                sell_weight += weight * strategy['confidence']
            total_weight += weight
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        if total_weight == 0:
            return {
                'action': 'NEUTRAL', 'confidence': 0.0, 'recommended_entry': None,
                'take_profit': None, 'stop_loss': None
            }
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        buy_score = buy_weight / total_weight
        sell_score = sell_weight / total_weight
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if buy_score > sell_score and buy_score > 0.5:
            action = 'STRONG_BUY' if buy_score > 0.7 else 'BUY'
            confidence = buy_score
        elif sell_score > buy_score and sell_score > 0.5:
            action = 'STRONG_SELL' if sell_score > 0.7 else 'SELL'
            confidence = sell_score
        else:
            action = 'NEUTRAL'
            confidence = max(buy_score, sell_score)
        return {
            'action': action, 'confidence': confidence, 'recommended_entry': None,
            'take_profit': None, 'stop_loss': None
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    aggregator = SignalAggregator(aggregation_window=60)
    
    try:
        await aggregator.start()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...")
        await aggregator.stop()


if __name__ == "__main__":
    asyncio.run(main())