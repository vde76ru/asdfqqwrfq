"""
–ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤ BotManager
–§–∞–π–ª: src/bot/internal/trading_loops.py

‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any

from src.bot.internal.types import BotStatus, TradingOpportunity
from src.core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

API_SEMAPHORE = asyncio.Semaphore(3)  # –ù–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
REQUEST_DELAY = 0.2  # 200–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏


def get_trading_loops(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    
    class TradingLoops:
        def __init__(self, bot):
            self.bot = bot
            
        async def _main_trading_loop(self):
            """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
            return await _main_trading_loop(self.bot)
            
        async def _market_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
            return await _market_monitoring_loop(self.bot)
            
        async def _pair_discovery_loop(self):
            """–¶–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
            return await _pair_discovery_loop(self.bot)
            
        async def _position_management_loop(self):
            """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
            return await _position_management_loop(self.bot)
            
        async def _risk_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
            return await _risk_monitoring_loop(self.bot)
            
        async def _health_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
            return await _health_monitoring_loop(self.bot)
            
        async def _performance_tracking_loop(self):
            """–¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
            return await _performance_tracking_loop(self.bot)
            
        async def _cleanup_loop(self):
            """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
            return await _cleanup_loop(self.bot)
            
        async def _balance_monitoring_loop(self):
            """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞"""
            return await _balance_monitoring_loop(self.bot)
            
        async def _strategy_evaluation_loop(self):
            """–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
            return await _strategy_evaluation_loop(self.bot)
            
        async def _data_collection_loop(self):
            """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
            return await _data_collection_loop(self.bot)
            
        async def _sentiment_analysis_loop(self):
            """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
            return await _sentiment_analysis_loop(self.bot)
            
        async def _event_processing_loop(self):
            """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
            return await _event_processing_loop(self.bot)
            
        async def start_signal_system_loops(self):
            """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
            return await start_signal_system_loops(self.bot)
    
    return TradingLoops(bot_instance)


# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –¶–ò–ö–õ–û–í ===

async def _main_trading_loop(bot_instance):
    """
    –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            
            if bot_instance.status != BotStatus.RUNNING:
                await asyncio.sleep(1)
                continue
                
            cycle_start = time.time()
            bot_instance.cycles_count += 1
            
            # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if hasattr(bot_instance, 'market_analyzer') and hasattr(bot_instance.market_analyzer, 'analyze_market_conditions'):
                if hasattr(bot_instance, 'active_pairs'):
                    for symbol in bot_instance.active_pairs:
                        try:
                            await bot_instance.market_analyzer.analyze_market_conditions(symbol)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è {symbol}: {e}")
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            if hasattr(bot_instance, '_position_management') and hasattr(bot_instance._position_management, 'manage_open_positions'):
                await bot_instance._position_management.manage_open_positions()
            
            # 3. –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            opportunities = []
            try:
                from .market_analysis import _find_all_trading_opportunities
                opportunities = await _find_all_trading_opportunities(bot_instance)
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
            except ImportError:
                logger.debug("–ú–æ–¥—É–ª—å market_analysis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫
            if opportunities:
                try:
                    from .trade_execution import _execute_best_trades
                    trades_executed = await _execute_best_trades(bot_instance, opportunities)
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trades_executed}")
                except ImportError:
                    logger.debug("–ú–æ–¥—É–ª—å trade_execution –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
            cycle_time = time.time() - cycle_start
            logger.info(f"‚è±Ô∏è –¶–∏–∫–ª #{bot_instance.cycles_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if cycle_time < 30:
                await asyncio.sleep(max(5, 30 - cycle_time))
            
        except asyncio.CancelledError:
            logger.info("üõë –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(5)


async def _market_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            logger.debug("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _pair_discovery_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    discovery_interval = getattr(config, 'PAIR_DISCOVERY_INTERVAL_HOURS', 24) * 3600
    
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            await asyncio.sleep(discovery_interval)
        except asyncio.CancelledError:
            logger.info("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break


async def _position_management_loop(bot_instance):
    """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏...")
            await asyncio.sleep(30)
        except asyncio.CancelledError:
            logger.info("üõë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break


async def _risk_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤...")
            await asyncio.sleep(60)
        except asyncio.CancelledError:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _health_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            if hasattr(bot_instance, '_check_system_health'):
                await bot_instance._check_system_health()
            await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
        except asyncio.CancelledError:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _performance_tracking_loop(bot_instance):
    """–¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            if hasattr(bot_instance, '_track_performance_metrics'):
                await bot_instance._track_performance_metrics()
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("üõë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break


async def _cleanup_loop(bot_instance):
    """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            if hasattr(bot_instance, 'cleanup_old_data'):
                await bot_instance.cleanup_old_data()
            await asyncio.sleep(3600)  # 1 —á–∞—Å
        except asyncio.CancelledError:
            logger.info("üõë –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            break


async def _balance_monitoring_loop(bot_instance):
    """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _strategy_evaluation_loop(bot_instance):
    """–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üìà –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("üõë –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            break


async def _data_collection_loop(bot_instance):
    """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
            await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
        except asyncio.CancelledError:
            logger.info("üõë –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _sentiment_analysis_loop(bot_instance):
    """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("üõë –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break


async def _event_processing_loop(bot_instance):
    """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    while not bot_instance._stop_event.is_set():
        try:
            await bot_instance._pause_event.wait()
            logger.debug("üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π...")
            await asyncio.sleep(1)
        except asyncio.CancelledError:
            logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            break


# === –¶–ò–ö–õ–´ –°–ò–°–¢–ï–ú–´ –°–ò–ì–ù–ê–õ–û–í ===

async def start_signal_system_loops(bot_instance):
    """
    –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
    tasks = []

    try:
        # === –ü–†–û–î–Æ–°–ï–†–´ –î–ê–ù–ù–´–• ===
        if hasattr(bot_instance, 'onchain_producer') and bot_instance.onchain_producer:
            task = asyncio.create_task(bot_instance.onchain_producer.start())
            tasks.append(('onchain_producer', task))
            logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω OnchainDataProducer")

        if hasattr(bot_instance, 'bybit_producer') and bot_instance.bybit_producer:
            task = asyncio.create_task(bot_instance.bybit_producer.start())
            tasks.append(('bybit_producer', task))
            logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω BybitDataProducer")

        # === –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò ===
        if hasattr(bot_instance, 'whale_hunting_strategy') and bot_instance.whale_hunting_strategy:
            interval = int(getattr(config, 'WHALE_HUNTING_INTERVAL', 60))
            task = asyncio.create_task(
                run_strategy_loop(bot_instance.whale_hunting_strategy, interval, "WhaleHunting", bot_instance)
            )

            tasks.append(('whale_hunting', task))
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ WhaleHuntingStrategy (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")

        if hasattr(bot_instance, 'sleeping_giants_strategy') and bot_instance.sleeping_giants_strategy:
            interval = int(getattr(config, 'SLEEPING_GIANTS_INTERVAL', 300))
            task = asyncio.create_task(
                run_strategy_loop(bot_instance.sleeping_giants_strategy, interval, "SleepingGiants", bot_instance)
            )
            tasks.append(('sleeping_giants', task))
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ SleepingGiantsStrategy (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")

        if hasattr(bot_instance, 'order_book_analysis') and bot_instance.order_book_analysis:
            interval = int(getattr(config, 'ORDER_BOOK_ANALYSIS_INTERVAL', 60))
            task = asyncio.create_task(
                run_strategy_loop(bot_instance.order_book_analysis, interval, "OrderBookAnalysis", bot_instance)
            )
            tasks.append(('order_book', task))
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ OrderBookAnalysis (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
            
        # === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –°–ò–ì–ù–ê–õ–û–í ===
        interval = int(getattr(config, 'MATRIX_UPDATE_INTERVAL', 30))
        task = asyncio.create_task(
            run_matrix_update_loop(bot_instance, interval)
        )
        tasks.append(('matrix_update', task))
        logger.info(f"+ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}c)")

        # === –ê–ì–†–ï–ì–ê–¢–û–† –°–ò–ì–ù–ê–õ–û–í ===
        if hasattr(bot_instance, 'signal_aggregator') and bot_instance.signal_aggregator:
            interval = int(getattr(config, 'SIGNAL_AGGREGATION_INTERVAL', 60))
            task = asyncio.create_task(
                run_aggregator_loop(bot_instance.signal_aggregator, interval)
            )
            tasks.append(('signal_aggregator', task))
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω SignalAggregator (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")

        # === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
        if hasattr(bot_instance, 'notification_manager') and bot_instance.notification_manager:
            task = asyncio.create_task(
                run_notification_loop(bot_instance.notification_manager)
            )
            tasks.append(('notifications', task))
            logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ bot_instance
        if not hasattr(bot_instance, 'signal_tasks'):
            bot_instance.signal_tasks = []
        bot_instance.signal_tasks.extend(tasks)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} —Ü–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for name, task in tasks:
            task.cancel()


async def run_strategy_loop(strategy, interval: int, name: str, bot_instance):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ {name} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}—Å")
    
    while True:
        try:
            await asyncio.sleep(interval)  # ‚úÖ –°–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
            async with API_SEMAPHORE:  # ‚úÖ –ü–æ—Ç–æ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä
                logger.debug(f"  {name}: –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
                
                if hasattr(strategy, 'analyze'):
                    if hasattr(bot_instance, 'active_pairs'):
                        for symbol in bot_instance.active_pairs:
                            try:
                                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º exchange_client
                                exchange_client = bot_instance.exchange_client or getattr(bot_instance, 'enhanced_exchange_client', None)
                                
                                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞ analyze
                                import inspect
                                sig = inspect.signature(strategy.analyze)
                                params = sig.parameters
                                
                                # ‚úÖ –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç exchange_client, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ
                                if 'exchange_client' in params:
                                    signals = await strategy.analyze(symbol, exchange_client=exchange_client)
                                else:
                                    signals = await strategy.analyze(symbol=symbol)
                                
                                if signals:
                                    if isinstance(signals, dict) and 'signals' in signals:
                                        num_signals = len(signals['signals'])
                                        if num_signals > 0:
                                            logger.info(f" {name} ({symbol}): —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {num_signals} —Å–∏–≥–Ω–∞–ª–æ–≤")
                                    elif isinstance(signals, list) and len(signals) > 0:
                                        logger.info(f" {name} ({symbol}): —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                            except Exception as pair_e:
                                logger.error(f"‚ùå {name}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã {symbol}: {pair_e}", exc_info=False)
                
                elif hasattr(strategy, 'run'):
                    await strategy.run()
                else:
                    logger.warning(f"  {name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞")
                    break
                
                await asyncio.sleep(REQUEST_DELAY)  # ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–º–∞—Ñ–æ—Ä–∞
                
        except asyncio.CancelledError:
            logger.info(f"  {name}: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞")
            break
        except Exception as e:
            logger.error(f"‚ùå {name}: –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            await asyncio.sleep(interval * 2)


async def run_aggregator_loop(aggregator, interval: int):
    """–¶–∏–∫–ª –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ SignalAggregator —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}—Å")
    
    while True:
        try:
            logger.debug("üîÑ SignalAggregator: –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            if hasattr(aggregator, 'aggregate_signals'):
                await aggregator.aggregate_signals()
            elif hasattr(aggregator, 'run'):
                await aggregator.run()
            
            await asyncio.sleep(interval)
            
        except asyncio.CancelledError:
            logger.info("üõë SignalAggregator: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            break
        except Exception as e:
            logger.error(f"‚ùå SignalAggregator: –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(interval * 2)
            
async def run_matrix_update_loop(bot_instance, interval: int):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}c")  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏
    while True:
        try:
            await asyncio.sleep(interval)
            await bot_instance.update_signals_matrix()
        except asyncio.CancelledError:
            logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã: {e}")  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            await asyncio.sleep(interval)


async def run_notification_loop(notification_manager):
    """–¶–∏–∫–ª –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    daily_summary_sent = False
    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {check_interval}—Å")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
            if hasattr(notification_manager, 'check_and_send_notifications'):
                await notification_manager.check_and_send_notifications()
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 00:00 UTC
            current_hour = datetime.utcnow().hour
            if current_hour == 0 and not daily_summary_sent:
                if hasattr(notification_manager, 'send_daily_summary'):
                    await notification_manager.send_daily_summary()
                daily_summary_sent = True
            elif current_hour != 0:
                daily_summary_sent = False
            
            await asyncio.sleep(check_interval)
            
        except asyncio.CancelledError:
            logger.info("üõë NotificationManager: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            break
        except Exception as e:
            logger.error(f"‚ùå NotificationManager: –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(check_interval * 2)


async def _start_all_trading_loops(bot_instance):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        
        if not hasattr(bot_instance, 'tasks'):
            bot_instance.tasks = {}
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        bot_instance.tasks['main_trading'] = asyncio.create_task(
            _main_trading_loop(bot_instance), name="main_trading"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
        bot_instance.tasks['market_monitoring'] = asyncio.create_task(
            _market_monitoring_loop(bot_instance), name="market_monitoring"
        )
        
        # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        bot_instance.tasks['pair_discovery'] = asyncio.create_task(
            _pair_discovery_loop(bot_instance), name="pair_discovery"
        )
        
        # –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
        bot_instance.tasks['position_management'] = asyncio.create_task(
            _position_management_loop(bot_instance), name="position_management"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
        bot_instance.tasks['risk_monitoring'] = asyncio.create_task(
            _risk_monitoring_loop(bot_instance), name="risk_monitoring"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
        bot_instance.tasks['health_monitoring'] = asyncio.create_task(
            _health_monitoring_loop(bot_instance), name="health_monitoring"
        )
        
        # –¶–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        bot_instance.tasks['performance_tracking'] = asyncio.create_task(
            _performance_tracking_loop(bot_instance), name="performance_tracking"
        )
        
        # –¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        bot_instance.tasks['cleanup'] = asyncio.create_task(
            _cleanup_loop(bot_instance), name="cleanup"
        )
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞
        bot_instance.tasks['balance_monitoring'] = asyncio.create_task(
            _balance_monitoring_loop(bot_instance), name="balance_monitoring"
        )
        
        # –¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        bot_instance.tasks['strategy_evaluation'] = asyncio.create_task(
            _strategy_evaluation_loop(bot_instance), name="strategy_evaluation"
        )
        
        # –¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        bot_instance.tasks['data_collection'] = asyncio.create_task(
            _data_collection_loop(bot_instance), name="data_collection"
        )
        
        # === –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –°–ò–ì–ù–ê–õ–û–í ===
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        await start_signal_system_loops(bot_instance)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(bot_instance.tasks)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {e}")
        raise


async def start_all_trading_loops(bot_instance):
    """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤"""
    return await _start_all_trading_loops(bot_instance)


async def stop_all_trading_loops(bot_instance):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if hasattr(bot_instance, '_stop_event'):
        bot_instance._stop_event.set()
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    if hasattr(bot_instance, 'tasks'):
        for name, task in bot_instance.tasks.items():
            if not task.done():
                logger.info(f"üõë –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏: {name}")
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(*bot_instance.tasks.values(), return_exceptions=True)
        bot_instance.tasks.clear()
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    if hasattr(bot_instance, 'signal_tasks'):
        for name, task in bot_instance.signal_tasks:
            if not task.done():
                logger.info(f"üõë –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {name}")
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–∏–≥–Ω–∞–ª–æ–≤
        tasks = [task for _, task in bot_instance.signal_tasks]
        await asyncio.gather(*tasks, return_exceptions=True)
        bot_instance.signal_tasks.clear()
    
    logger.info("‚úÖ –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")