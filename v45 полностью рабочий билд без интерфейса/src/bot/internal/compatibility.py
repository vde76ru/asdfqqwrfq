#!/usr/bin/env python3
"""
–ú–ï–¢–û–î–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - Compatibility
–§–∞–π–ª: src/bot/internal/compatibility.py

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:
- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
- –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
"""

import asyncio
import threading
import time
import logging
from typing import Tuple, Dict, Any

logger = logging.getLogger(__name__)

def get_compatibility(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    class Compatibility:
        def __init__(self, bot):
            self.bot = bot
            
        def start(self):
            """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
            from .lifecycle import start
            return start(self.bot)
            
        def stop(self):
            """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
            from .lifecycle import stop
            return stop(self.bot)
            
        def __repr__(self):
            """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
            return f"<BotManager status={self.bot.status.value}>"
            
        def set_socketio(self, socketio_instance):
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SocketIO –¥–ª—è WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
            self.bot.socketio = socketio_instance
            if hasattr(self.bot, 'websocket_manager') and self.bot.websocket_manager:
                self.bot.websocket_manager.socketio = socketio_instance
            return True
    
    return Compatibility(bot_instance)

class Compatibility:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, bot_manager):
        self.bot = bot_manager
    
    def start(self) -> Tuple[bool, str]:
        """
        –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Flask API.
        –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏.
        """
        if self.bot.is_running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞.")
            return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."

        logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
        self.bot.status = self.bot.BotStatus.STARTING if hasattr(self.bot, 'BotStatus') else 'starting'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º threading.Event –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        self.bot._stop_event = threading.Event()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        self.bot._async_thread = threading.Thread(target=self._run_async_tasks, name="BotAsyncLoopThread")
        self.bot._async_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–º—Ä–µ—Ç
        self.bot._async_thread.start()
        
        time.sleep(3) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

        if self.bot.is_running:
            msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
            logger.info(msg)
            return True, msg
        else:
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.bot.status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫."
            logger.error(msg)
            return False, msg

    def stop(self) -> Tuple[bool, str]:
        """
        –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ Flask API.
        –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        if not self.bot.is_running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.")
            return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω."

        logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        self.bot.status = self.bot.BotStatus.STOPPING if hasattr(self.bot, 'BotStatus') else 'stopping'
        
        if self.bot._stop_event:
            self.bot._stop_event.set() # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏–∫–ª—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        else:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            self.bot.is_running = False
            return False, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.bot._async_thread:
            self.bot._async_thread.join(timeout=15) # –î–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

        if self.bot._async_thread and self.bot._async_thread.is_alive():
             self.bot.status = self.bot.BotStatus.ERROR if hasattr(self.bot, 'BotStatus') else 'error'
             msg = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è."
             logger.critical(msg)
             return False, msg

        self.bot.status = self.bot.BotStatus.STOPPED if hasattr(self.bot, 'BotStatus') else 'stopped'
        self.bot.is_running = False
        msg = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        logger.info(msg)
        return True, msg

    def _run_async_tasks(self):
        """
        ‚ú® –ù–û–í–´–ô –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        —Å–æ–±—ã—Ç–∏–π asyncio –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ –Ω–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
        """
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
    
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `start_async` –Ω–∞–ø—Ä—è–º—É—é,
            # –∞ –Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å `Lifecycle`.
            from .lifecycle import start_async
    
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
            loop.run_until_complete(start_async(self.bot))
    
        except Exception as e:
            logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
            self.bot.status = self.bot.BotStatus.ERROR if hasattr(self.bot, 'BotStatus') else 'error'
            self.bot.is_running = False
        finally:
            logger.info("üèÅ –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (
            f"BotManager(status={self.bot.status}, "
            f"pairs={len(getattr(self.bot, 'active_pairs', []))}, "
            f"positions={len(getattr(self.bot, 'positions', {}))}, "
            f"cycles={getattr(self.bot, 'cycles_count', 0)}, "
            f"uptime={self.bot.start_time})"
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
    
    async def update_pairs(self, pairs: list) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.bot.trading_pairs = pairs
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        self.bot.active_pairs = pairs[:getattr(self.bot.config, 'MAX_TRADING_PAIRS', 10)]
        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {len(pairs)}")
    
    def set_socketio(self, socketio_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SocketIO –¥–ª—è WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        self.bot.socketio = socketio_instance
        logger.info("‚úÖ SocketIO —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ BotManager")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
    
    def start_sync(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ start_async
            if hasattr(self.bot, 'lifecycle') and hasattr(self.bot.lifecycle, 'start_async'):
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.bot.lifecycle.start_async())
                return result
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            if self.bot.is_running:
                return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
            
            self.bot.is_running = True
            self.bot.start_time = datetime.utcnow()
            self.bot.stop_time = None
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
    
    def stop_sync(self) -> Tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ stop_async
            if hasattr(self.bot, 'lifecycle') and hasattr(self.bot.lifecycle, 'stop_async'):
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.bot.lifecycle.stop_async())
                return result
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            if not self.bot.is_running:
                return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            
            self.bot.is_running = False
            self.bot.stop_time = self.bot.datetime.utcnow()
            
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def get_compatibility(bot_manager):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return Compatibility(bot_manager)

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = ['Compatibility', 'get_compatibility']