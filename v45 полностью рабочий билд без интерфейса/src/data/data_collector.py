"""
–†–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–§–∞–π–ª: src/data/data_collector.py
"""
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from collections import defaultdict
from ..core.models import Candle, Signal, VolumeAnomaly
import traceback

logger = logging.getLogger(__name__)

class DataCollector:
    """–†–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, exchange_client, db_session=None):
        self.exchange = exchange_client
        self.db = db_session
        self.is_running = False
        self.is_initialized = True
        self.collected_data = defaultdict(dict)
        self.collection_tasks = {}
        self.update_interval = 60  # —Å–µ–∫—É–Ω–¥
        self.active_pairs = []
        
        logger.info("‚úÖ DataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.is_running = True
        logger.info("‚úÖ DataCollector –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∞
        asyncio.create_task(self._continuous_collection())
        return True
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.collection_tasks.values():
            if not task.done():
                task.cancel()
        
        logger.info("‚úÖ DataCollector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    async def collect_historical_data(self, symbol: str, timeframe: str = '1h', limit: int = 300):
        """
        –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û
        """
        try:
            logger.info(f"üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è {symbol}:")
            logger.info(f"   Exchange type: {type(self.exchange).__name__}")
            logger.info(f"   Has get_klines: {hasattr(self.exchange, 'get_klines')}")
            logger.info(f"   Has ccxt_exchange: {hasattr(self.exchange, 'ccxt_exchange')}")
            
            logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({timeframe}, limit={limit})")
            actual_limit = max(limit, 300)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º 300 —Å–≤–µ—á–µ–π
            logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç: {actual_limit} —Å–≤–µ—á–µ–π")
            
            # –£—Å–ª–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ exchange –∫–ª–∏–µ–Ω—Ç–∞
            if hasattr(self.exchange, 'bybit_integration') and hasattr(self.exchange.bybit_integration, 'v5_client'):
                # –î–ª—è Enhanced –∫–ª–∏–µ–Ω—Ç–∞ —Å V5 –∏—Å–ø–æ–ª—å–∑—É–µ–º category
                logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º V5 –∫–ª–∏–µ–Ω—Ç –¥–ª—è {symbol}")
                response = await self.exchange.bybit_integration.v5_client.get_klines(
                    category="linear",
                    symbol=symbol,
                    interval=self._convert_timeframe(timeframe),
                    limit=limit
                )
            elif hasattr(self.exchange, 'get_klines'):
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ category
                logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è {symbol}")
                response = await self.exchange.get_klines(
                    symbol=symbol,
                    interval=self._convert_timeframe(timeframe),
                    limit=limit
                )
            elif hasattr(self.exchange, 'ccxt_exchange') and self.exchange.ccxt_exchange:
                # Fallback –∫ CCXT
                logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º CCXT –¥–ª—è {symbol}")
                ohlcv = await self.exchange.ccxt_exchange.fetch_ohlcv(
                    symbol=symbol,
                    timeframe=timeframe, # CCXT –ø–æ–Ω–∏–º–∞–µ—Ç '1h', '4h'
                    limit=limit,
                    params={'category': 'linear'}
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                response = {'retCode': 0, 'result': {'list': ohlcv}}
            else:
                logger.error(f"‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}")
                return None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if not response:
                logger.error(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            if isinstance(response, dict):
                if response.get('retCode') == 0:
                    result = response.get('result', {})
                    klines_list = result.get('list', [])
                    
                    if klines_list and len(klines_list) > 0:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines_list)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                        
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –ø–æ—Ç–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                        if self.db:
                            await self._save_historical_candles_to_db(symbol, timeframe, klines_list)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ pandas DataFrame
                        df = self._convert_klines_to_dataframe(klines_list, symbol, timeframe)
                        
                        if df is not None and not df.empty:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self._cache_data(symbol, timeframe, df)
                            
                            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                            return df
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                            return None
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                        return None
                else:
                    ret_msg = response.get('retMsg', 'Unknown error')
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: {ret_msg}")
                    return None
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {symbol}: {type(response)}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None
            
    def _convert_klines_to_dataframe(self, klines_list: list, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≤–µ—á–µ–π –æ—Ç API –≤ pandas DataFrame.
        Bybit V5 API (linear) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [startTime, openPrice, highPrice, lowPrice, closePrice, volume, turnover]
        CCXT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [timestamp, open, high, low, close, volume]
        """
        if not klines_list:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        if len(klines_list[0]) == 7:
            columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover']
        else:
            columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
    
        try:
            df = pd.DataFrame(klines_list, columns=columns)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø timestamp –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            if df['timestamp'].dtype == 'object':  # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏
                sample_timestamp = str(df['timestamp'].iloc[0])
                
                if '-' in sample_timestamp and ':' in sample_timestamp:
                    # –≠—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '2025-07-21 00:35:00'
                    df['timestamp'] = pd.to_datetime(df['timestamp'])
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π timestamp
                    df['timestamp'] = pd.to_numeric(df['timestamp'], errors='coerce')
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                df['timestamp'] = pd.to_datetime(df['timestamp'].astype(np.int64), unit='ms')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            numeric_cols = [col for col in ['open', 'high', 'low', 'close', 'volume', 'turnover'] if col in df.columns]
            for col in numeric_cols:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            df = df.dropna()
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values(by='timestamp').reset_index(drop=True)
            df.set_index('timestamp', inplace=True)
            
            logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ DataFrame. –°–≤–µ—á–µ–π: {len(df)}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è klines –≤ DataFrame –¥–ª—è {symbol}: {e}")
            logger.error(f"–¢–∏–ø timestamp: {type(klines_list[0][0]) if klines_list else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            logger.error(f"–ü—Ä–∏–º–µ—Ä timestamp: {klines_list[0][0] if klines_list else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            return None

    def _cache_data(self, symbol: str, timeframe: str, df: pd.DataFrame):
        """
        ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î
        –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö DataFrame –≤ –ø–∞–º—è—Ç–∏.
        """
        if self.collected_data[symbol] is None:
            self.collected_data[symbol] = {}
        self.collected_data[symbol][timeframe] = df
        logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe}) –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–º—è—Ç–∏.")
            
    def _convert_timeframe(self, timeframe: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timeframe –≤ —Ñ–æ—Ä–º–∞—Ç Bybit"""
        # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        conversion = {
            '1m': '1',
            '5m': '5', 
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '4h': '240',
            '1d': 'D',
            '1w': 'W',
            '1M': 'M'
        }
        return conversion.get(timeframe, timeframe)
    
    async def _save_historical_candles_to_db(self, symbol: str, timeframe: str, candles: list):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –ë–î —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã candles"""
        if not self.db or not candles:
            return
            
        try:
            if callable(self.db):
                db_session = self.db()
            else:
                db_session = self.db
                
            
            saved_count = 0
            candles_to_save = []
            
            for candle_data in candles:
                try:
                    timestamp_ms = int(candle_data[0])
                    open_time = datetime.fromtimestamp(timestamp_ms / 1000)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º close_time
                    timeframe_deltas = {
                        '1m': timedelta(minutes=1),
                        '5m': timedelta(minutes=5),
                        '15m': timedelta(minutes=15),
                        '30m': timedelta(minutes=30),
                        '1h': timedelta(hours=1),
                        '4h': timedelta(hours=4),
                        '1d': timedelta(days=1)
                    }
                    
                    close_time = open_time + timeframe_deltas.get(timeframe, timedelta(hours=1))
                    
                    # ‚úÖ –°–û–ì–õ–ê–°–ù–û –í–ê–®–ï–ô –ë–î: interval –∏ open_time
                    existing = db_session.query(Candle.id).filter(
                        Candle.symbol == symbol,
                        Candle.interval == timeframe,  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–ï
                        Candle.open_time == open_time  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–ï
                    ).first()
                    
                    if not existing:
                        candle = Candle(
                            symbol=symbol,
                            interval=timeframe,        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–ï
                            open_time=open_time,       # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–ï
                            close_time=close_time,     # ‚úÖ –ï–°–¢–¨ –í –í–ê–®–ï–ô –ë–î
                            open=float(candle_data[1]),
                            high=float(candle_data[2]),
                            low=float(candle_data[3]),
                            close=float(candle_data[4]),
                            volume=float(candle_data[5])
                        )
                        candles_to_save.append(candle)
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç–æ–º
            if candles_to_save:
                db_session.add_all(candles_to_save)
                db_session.commit()
                saved_count = len(candles_to_save)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            
            if callable(self.db):
                db_session.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π: {e}")
            if 'db_session' in locals():
                db_session.rollback()
                if callable(self.db):
                    db_session.close()
        
    async def _continuous_collection(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
                active_pairs = await self._get_active_pairs()
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                tasks = []
                for symbol in active_pairs:
                    task = asyncio.create_task(self.collect_market_data(symbol))
                    tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                if tasks:
                    await asyncio.gather(*tasks, return_exceptions=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if self.db:
                    await self._save_to_database()
                
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ continuous_collection: {e}")
                await asyncio.sleep(10)
    
    async def collect_market_data(self, symbol: str, data: dict = None) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑–≤–Ω–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if data is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –≤–º–µ—Å—Ç–æ if data
                self.collected_data[symbol] = {
                    'data': data,
                    'timestamp': datetime.utcnow()
                }
                logger.debug(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return data
            
            # –ò–Ω–∞—á–µ —Å–æ–±–∏—Ä–∞–µ–º —Å–∞–º–∏
            collected = {}
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Ç–∏–∫–µ—Ä
            ticker = await self.exchange.fetch_ticker(symbol)
            if ticker:
                collected['ticker'] = {
                    'symbol': symbol,
                    'last': float(ticker.get('last', 0)),  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
                    'bid': float(ticker.get('bid', 0)),
                    'ask': float(ticker.get('ask', 0)),
                    'volume': float(ticker.get('baseVolume', 0)),
                    'quote_volume': float(ticker.get('quoteVolume', 0)),
                    'change': float(ticker.get('percentage', 0)),
                    'timestamp': datetime.utcnow()
                }
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
            orderbook = await self.exchange.fetch_order_book(symbol, limit=20)
            if orderbook:
                collected['orderbook'] = {
                    'bids': orderbook.get('bids', [])[:10],
                    'asks': orderbook.get('asks', [])[:10],
                    'timestamp': orderbook.get('timestamp', datetime.utcnow())
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –∏ –≥–ª—É–±–∏–Ω—É
                if orderbook['bids'] and orderbook['asks']:
                    best_bid = float(orderbook['bids'][0][0])  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
                    best_ask = float(orderbook['asks'][0][0])
                    collected['spread'] = (best_ask - best_bid) / best_bid * 100
                    collected['bid_depth'] = sum(float(bid[1]) for bid in orderbook['bids'][:5])
                    collected['ask_depth'] = sum(float(ask[1]) for ask in orderbook['asks'][:5])
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            trades = await self.exchange.fetch_trades(symbol, limit=100)
            if trades:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                buy_volume = sum(float(t.get('amount', 0)) for t in trades if t.get('side') == 'buy')
                sell_volume = sum(float(t.get('amount', 0)) for t in trades if t.get('side') == 'sell')
                total_price = sum(float(t.get('price', 0)) for t in trades)
                
                collected['recent_trades'] = {
                    'count': len(trades),
                    'buy_volume': buy_volume,
                    'sell_volume': sell_volume,
                    'avg_price': total_price / len(trades) if trades else 0,
                    'timestamp': datetime.utcnow()
                }
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            ohlcv = await self.exchange.fetch_ohlcv(symbol, '5m', limit=200)
            if ohlcv:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
                for col in ['open', 'high', 'low', 'close', 'volume']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
                if df['timestamp'].dtype == 'object':
                    df['timestamp'] = pd.to_numeric(df['timestamp'], errors='coerce')
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                df = df.dropna()
                
                if len(df) >= 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    collected['candles'] = df.to_dict('records')  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
                    collected['technical'] = {
                        'sma_20': float(df['close'].rolling(20).mean().iloc[-1]),
                        'volume_avg': float(df['volume'].rolling(20).mean().iloc[-1]),
                        'volatility': float(df['close'].pct_change().std() * 100),
                        'high_24h': float(df['high'].max()),
                        'low_24h': float(df['low'].min())
                    }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.collected_data[symbol] = {
                'data': collected,
                'timestamp': datetime.utcnow()
            }
            
            logger.debug(f"üìä –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return collected
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    async def collect_orderbook(self, symbol: str, depth: int = 20) -> Dict[str, Any]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            orderbook = await self.exchange.fetch_order_book(symbol, limit=depth)
            return orderbook
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            return {}
    
    async def _get_active_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–¥–∞–Ω
        if self.active_pairs:
            return self.active_pairs
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            from ..core.unified_config import unified_config
            return unified_config.TRADING_PAIRS or ['BTCUSDT', 'ETHUSDT']
        except:
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'BNBUSDT', 'SOLUSDT']
    
    def set_active_pairs(self, pairs: List[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        self.active_pairs = pairs
        logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs}")
    
    async def _save_to_database(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        if not self.db:
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ db - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if callable(self.db):
                db_session = self.db()
            else:
                db_session = self.db
                
            from ..core.models import MarketCondition
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            for symbol, data_wrapper in self.collected_data.items():
                if 'data' in data_wrapper and 'ticker' in data_wrapper['data']:
                    ticker = data_wrapper['data']['ticker']
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¢–û–õ–¨–ö–û —Å —Ç–µ–º–∏ –ø–æ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ï–°–¢–¨ –≤ –ë–î
                    market_condition = MarketCondition(
                        symbol=symbol,
                        timeframe='5m',
                        condition_type='price_level',
                        condition_value=str(ticker['last']),
                        strength=ticker['change'] / 100 if ticker['change'] else 0,
                        indicators={
                            'volume': ticker['volume'],
                            'bid': ticker['bid'],
                            'ask': ticker['ask'],
                            'spread': data_wrapper['data'].get('spread', 0)
                        },
                        timestamp=datetime.utcnow()
                    )
                    
                    # –ù–ï –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è!
                    db_session.add(market_condition)
            
            db_session.commit()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –µ—ë
            if callable(self.db):
                db_session.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            if 'db_session' in locals():
                db_session.rollback()
                if callable(self.db):
                    db_session.close()
    
    def get_data(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.collected_data.get(symbol, {})
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–±–æ—Ä—â–∏–∫–∞"""
        return {
            'running': self.is_running,
            'initialized': self.is_initialized,
            'data_count': len(self.collected_data),
            'symbols': list(self.collected_data.keys()),
            'last_update': max(
                (d['timestamp'] for d in self.collected_data.values() if 'timestamp' in d),
                default=None
            )
        }
        
    def get_latest_candles(self, symbol: str, timeframe: str = '1h', limit: int = 200) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ self.db
            if callable(self.db):
                db_session = self.db()
            else:
                db_session = self.db
                
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timeframe –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                timeframe_mapping = {
                    '1m': 1,
                    '5m': 5,
                    '15m': 15,
                    '30m': 30,
                    '1h': 60,
                    '4h': 240,
                    '1d': 1440
                }
                
                interval_minutes = timeframe_mapping.get(timeframe, 60)
                
                # –ó–∞–ø—Ä–æ—Å –∫ –ë–î
                candles = db_session.query(Candle).filter(
                    Candle.symbol == symbol,
                    Candle.interval == timeframe
                ).order_by(Candle.open_time.desc()).limit(limit).all()
                
                if not candles:
                    return None
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                data = []
                for candle in reversed(candles):
                    data.append({
                        'timestamp': candle.open_time,
                        'open': float(candle.open),
                        'high': float(candle.high),
                        'low': float(candle.low),
                        'close': float(candle.close),
                        'volume': float(candle.volume)
                    })
                
                df = pd.DataFrame(data)
                df.set_index('timestamp', inplace=True)
                
                return df
                
            finally:
                if callable(self.db):
                    db_session.close()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏–∑ –ë–î: {e}")
            return None

    
    async def get_latest_candles_async(self, symbol: str, timeframe: str = '1h', limit: int = 200) -> Optional[pd.DataFrame]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_latest_candles
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            pd.DataFrame: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ –∏–ª–∏ None
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ executor
            loop = asyncio.get_event_loop()
            return await loop.run_in_executor(
                None, 
                self.get_latest_candles, 
                symbol, 
                timeframe, 
                limit
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ async –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            return None
    
    def get_symbol_data(self, symbol: str, timeframe: str = '1h') -> Optional[pd.DataFrame]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è get_latest_candles –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            pd.DataFrame: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ –∏–ª–∏ None
        """
        return self.get_latest_candles(symbol, timeframe, limit=200)
    
    def get_all_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return dict(self.collected_data)