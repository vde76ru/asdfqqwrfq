"""
–ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
========================
–§–∞–π–ª: src/strategies/__init__.py

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É—á–µ—Ç–æ–º –†–ï–ê–õ–¨–ù–´–• —Ñ–∞–π–ª–æ–≤
"""

import logging
from typing import Dict, Type, Optional, List

logger = logging.getLogger(__name__)

# =================================================================
# –ë–ê–ó–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
# =================================================================

# –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Ç–∏–ø—ã
try:
    from .base import BaseStrategy
    from ..common.types import UnifiedTradingSignal as TradingSignal
    BASE_AVAILABLE = True
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    BaseStrategy = None
    TradingSignal = None
    BASE_AVAILABLE = False

# =================================================================
# –û–°–ù–û–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò (–í–°–ï –°–£–©–ï–°–¢–í–£–Æ–¢)
# =================================================================

# Multi-Indicator —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .multi_indicator import MultiIndicatorStrategy
    MULTI_INDICATOR_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è MultiIndicatorStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    MultiIndicatorStrategy = None
    MULTI_INDICATOR_AVAILABLE = False

# Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .momentum import MomentumStrategy
    MOMENTUM_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è MomentumStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    MomentumStrategy = None
    MOMENTUM_AVAILABLE = False

# Mean Reversion —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .mean_reversion import MeanReversionStrategy
    MEAN_REVERSION_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è MeanReversionStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    MeanReversionStrategy = None
    MEAN_REVERSION_AVAILABLE = False

# Scalping —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .scalping import ScalpingStrategy
    SCALPING_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è ScalpingStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    ScalpingStrategy = None
    SCALPING_AVAILABLE = False

# Breakout —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .breakout import BreakoutStrategy
    BREAKOUT_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è BreakoutStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    BreakoutStrategy = None
    BREAKOUT_AVAILABLE = False

# Swing —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –§–ê–ô–õ –°–£–©–ï–°–¢–í–£–ï–¢!
try:
    from .swing import SwingStrategy
    SWING_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è SwingStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    SwingStrategy = None
    SWING_AVAILABLE = False

# =================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò
# =================================================================

# Conservative —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .conservative import ConservativeStrategy
    CONSERVATIVE_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è ConservativeStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    ConservativeStrategy = None
    CONSERVATIVE_AVAILABLE = False

# Safe Multi-Indicator —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
try:
    from .safe_multi_indicator import SafeMultiIndicatorStrategy
    SAFE_MULTI_INDICATOR_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è SafeMultiIndicatorStrategy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    SafeMultiIndicatorStrategy = None
    SAFE_MULTI_INDICATOR_AVAILABLE = False

# =================================================================
# –°–¢–†–ê–¢–ï–ì–ò–ò, –ö–û–¢–û–†–´–• –ù–ï–¢ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# =================================================================

# Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê
GridStrategy = None
GRID_AVAILABLE = False

# Arbitrage —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê
ArbitrageStrategy = None
ARBITRAGE_AVAILABLE = False

# =================================================================
# –°–ï–õ–ï–ö–¢–û–†–´ –ò –§–ê–ë–†–ò–ö–ò
# =================================================================

# Auto Strategy Selector
try:
    from .auto_strategy_selector import AutoStrategySelector, auto_strategy_selector
    AUTO_SELECTOR_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è AutoStrategySelector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    AutoStrategySelector = None
    auto_strategy_selector = None
    AUTO_SELECTOR_AVAILABLE = False

# Strategy Selector
try:
    from .strategy_selector import StrategySelector, get_strategy_selector
    SELECTOR_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è StrategySelector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    StrategySelector = None
    get_strategy_selector = None
    SELECTOR_AVAILABLE = False

# Strategy Factory
try:
    from .factory import StrategyFactory, strategy_factory
    FACTORY_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è StrategyFactory –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    StrategyFactory = None
    strategy_factory = None
    FACTORY_AVAILABLE = False

# =================================================================
# –ö–ê–†–¢–ê –°–¢–†–ê–¢–ï–ì–ò–ô
# =================================================================

# –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
STRATEGY_MAP: Dict[str, Optional[Type[BaseStrategy]]] = {}

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
if MULTI_INDICATOR_AVAILABLE:
    STRATEGY_MAP['multi_indicator'] = MultiIndicatorStrategy
    
if MOMENTUM_AVAILABLE:
    STRATEGY_MAP['momentum'] = MomentumStrategy
    
if MEAN_REVERSION_AVAILABLE:
    STRATEGY_MAP['mean_reversion'] = MeanReversionStrategy
    
if SCALPING_AVAILABLE:
    STRATEGY_MAP['scalping'] = ScalpingStrategy
    
if BREAKOUT_AVAILABLE:
    STRATEGY_MAP['breakout'] = BreakoutStrategy

if SWING_AVAILABLE:
    STRATEGY_MAP['swing'] = SwingStrategy

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
if CONSERVATIVE_AVAILABLE:
    STRATEGY_MAP['conservative'] = ConservativeStrategy
    
if SAFE_MULTI_INDICATOR_AVAILABLE:
    STRATEGY_MAP['safe_multi_indicator'] = SafeMultiIndicatorStrategy

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
STRATEGY_MAP['grid'] = None  # GridStrategy
STRATEGY_MAP['arbitrage'] = None  # ArbitrageStrategy

# =================================================================
# –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò
# =================================================================

def get_available_strategies() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    return [name for name, cls in STRATEGY_MAP.items() if cls is not None]

def is_strategy_available(strategy_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    return STRATEGY_MAP.get(strategy_name) is not None

def create_strategy(strategy_name: str, config: Optional[Dict] = None) -> Optional[BaseStrategy]:
    """
    –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ None
    """
    strategy_class = STRATEGY_MAP.get(strategy_name)
    if strategy_class:
        try:
            return strategy_class(strategy_name=strategy_name, config=config)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
    return None

def get_strategy_info() -> Dict[str, Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
    info = {}
    for name, cls in STRATEGY_MAP.items():
        if cls:
            info[name] = {
                'available': True,
                'class_name': cls.__name__,
                'has_analyze': hasattr(cls, 'analyze'),
                'has_backtest': hasattr(cls, 'backtest')
            }
        else:
            info[name] = {
                'available': False,
                'class_name': None,
                'has_analyze': False,
                'has_backtest': False
            }
    return info

# =================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
# =================================================================

def _log_strategy_status():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    available = get_available_strategies()
    total = len(STRATEGY_MAP)
    
    logger.info("="*60)
    logger.info("üìä –°–¢–ê–¢–£–° –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô")
    logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {len(available)}/{total}")
    logger.info(f"üìã –°–ø–∏—Å–æ–∫: {', '.join(available)}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    for name, cls in STRATEGY_MAP.items():
        if cls:
            logger.info(f"   ‚úÖ {name}: {cls.__name__}")
        else:
            logger.info(f"   ‚ùå {name}: –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger.info("üîß –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    logger.info(f"   {'‚úÖ' if FACTORY_AVAILABLE else '‚ùå'} StrategyFactory")
    logger.info(f"   {'‚úÖ' if AUTO_SELECTOR_AVAILABLE else '‚ùå'} AutoStrategySelector")
    logger.info(f"   {'‚úÖ' if SELECTOR_AVAILABLE else '‚ùå'} StrategySelector")
    logger.info("="*60)

# –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
_log_strategy_status()

# =================================================================
# –≠–ö–°–ü–û–†–¢–´
# =================================================================

__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    'BaseStrategy',
    'TradingSignal',
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    'MultiIndicatorStrategy',
    'MomentumStrategy',
    'MeanReversionStrategy',
    'ScalpingStrategy',
    'BreakoutStrategy',
    'SwingStrategy',  # ‚úÖ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    'ConservativeStrategy',
    'SafeMultiIndicatorStrategy',
    
    # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    'GridStrategy',
    'ArbitrageStrategy',
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ —Ñ–∞–±—Ä–∏–∫–∏
    'AutoStrategySelector',
    'auto_strategy_selector',
    'StrategySelector',
    'get_strategy_selector',
    'StrategyFactory',
    'strategy_factory',
    
    # –ö–∞—Ä—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    'STRATEGY_MAP',
    'get_available_strategies',
    'is_strategy_available',
    'create_strategy',
    'get_strategy_info'
]

# =================================================================
# –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# =================================================================

if not BASE_AVAILABLE:
    raise ImportError(
        "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã base.py –∏ common/types.py"
    )

if len(get_available_strategies()) == 0:
    raise ImportError(
        "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞! "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src/strategies/"
    )

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
required_strategies = ['multi_indicator', 'momentum']
missing = [s for s in required_strategies if not is_strategy_available(s)]
if missing:
    logger.error(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {missing}")