#!/usr/bin/env python3
"""
Smart Logger - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
=================================
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –£–±—Ä–∞–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ DatabaseLogWriter
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
"""

import logging
import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, asdict
from collections import deque
import threading
from contextlib import asynccontextmanager

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from ..core.database import SessionLocal, initialize_database
    DATABASE_AVAILABLE = True
except ImportError:
    DATABASE_AVAILABLE = False
    SessionLocal = None

try:
    from ..core.models import TradingLog
    MODELS_AVAILABLE = True
except ImportError:
    MODELS_AVAILABLE = False
    TradingLog = None

try:
    from sqlalchemy import text
    SQLALCHEMY_AVAILABLE = True
except ImportError:
    SQLALCHEMY_AVAILABLE = False

@dataclass
class LogEntry:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
    created_at: datetime
    level: str
    category: str
    message: str
    symbol: Optional[str] = None
    trade_id: Optional[str] = None
    strategy: Optional[str] = None
    context: Optional[Dict[str, Any]] = None

class DatabaseLogWriter:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
    """
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Singleton pattern –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    _instance = None
    _initialized = False
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(DatabaseLogWriter, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if self._initialized:
            return
            
        self.db = None
        self.is_running = False
        self.queue = deque(maxlen=1000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        self.batch_size = 10
        self.flush_interval = 5.0  # —Å–µ–∫—É–Ω–¥
        self.task = None
        self.shutdown_event = asyncio.Event() if self._event_loop_available() else None
        self._last_health_check = 0
        self._db_initialized = False
        self._lock = threading.Lock()
        
        DatabaseLogWriter._initialized = True
        print("‚úÖ DatabaseLogWriter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (singleton)")
    
    @staticmethod
    def _event_loop_available() -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ event loop"""
        try:
            asyncio.get_event_loop()
            return True
        except RuntimeError:
            return False
    
    async def start(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ writer —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._lock:
            if self.is_running:
                print("‚ö†Ô∏è DatabaseLogWriter —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            self.is_running = True
            print("üöÄ –ó–∞–ø—É—Å–∫ DatabaseLogWriter...")
        
        try:
            await self._init_database()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
            if self._db_initialized:
                if self.shutdown_event:
                    self.shutdown_event.clear()
                
                self.task = asyncio.create_task(self._write_loop())
                print("‚úÖ DatabaseLogWriter –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è DatabaseLogWriter –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ë–î (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç—å)")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DatabaseLogWriter: {e}")
            self.is_running = False
    
    async def stop(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ writer —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        with self._lock:
            if not self.is_running:
                print("‚ÑπÔ∏è DatabaseLogWriter —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ DatabaseLogWriter...")
            self.is_running = False
        
        try:
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.shutdown_event:
                self.shutdown_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            if self.task and not self.task.done():
                try:
                    await asyncio.wait_for(self.task, timeout=5.0)
                except asyncio.TimeoutError:
                    print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ DatabaseLogWriter")
                    self.task.cancel()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤
            await self._flush_remaining_logs()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.db:
                try:
                    self.db.close()
                    self.db = None
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
            
            self._db_initialized = False
            print("‚úÖ DatabaseLogWriter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ DatabaseLogWriter: {e}")
    
    async def _init_database(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            if self._db_initialized:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not DATABASE_AVAILABLE or not SessionLocal:
                print("‚ö†Ô∏è DatabaseLogWriter: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ë–î")
                self.db = None
                self._db_initialized = False
                return
                
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SessionLocal
            self.db = SessionLocal()
            self._db_initialized = True
            print("‚úÖ DatabaseLogWriter: –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            self.db = None
            self._db_initialized = False
            print(f"‚ùå DatabaseLogWriter: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    async def _write_loop(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"""
        print("üîÑ DatabaseLogWriter: –¶–∏–∫–ª –∑–∞–ø–∏—Å–∏ –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if self.shutdown_event and self.shutdown_event.is_set():
                        print("üìã DatabaseLogWriter –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã")
                        break
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ç—á –ª–æ–≥–æ–≤
                    batch = []
                    while len(batch) < self.batch_size and self.queue:
                        batch.append(self.queue.popleft())
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞—Ç—á
                    if batch:
                        await self._write_logs_to_db(batch)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
                    await self._check_database_health()
                    
                    # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                    await asyncio.sleep(self.flush_interval)
                    
                except asyncio.CancelledError:
                    print("üö´ DatabaseLogWriter –æ—Ç–º–µ–Ω–µ–Ω")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∑–∞–ø–∏—Å–∏: {e}")
                    await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        finally:
            print("üèÅ DatabaseLogWriter: –¶–∏–∫–ª –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _flush_remaining_logs(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            remaining_logs = list(self.queue)
            if remaining_logs:
                print(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º {len(remaining_logs)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤")
                await self._write_logs_to_db(remaining_logs)
                self.queue.clear()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤: {e}")
    
    async def _write_logs_to_db(self, logs: List[LogEntry]):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –ö—Ä–∏—Ç–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if not self.db or not self._db_initialized:
            return
        
        if not SQLALCHEMY_AVAILABLE or not MODELS_AVAILABLE or not TradingLog or not logs:
            return
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            for log_entry in logs:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º created_at –≤–º–µ—Å—Ç–æ timestamp
                db_log = TradingLog(
                    created_at=log_entry.timestamp,
                    level=log_entry.level,
                    category=log_entry.category,
                    message=log_entry.message,
                    symbol=log_entry.symbol,
                    trade_id=log_entry.trade_id,
                    strategy=log_entry.strategy,
                    context=json.dumps(log_entry.context) if log_entry.context else None
                )
                
                self.db.add(db_log)
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.db.commit()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –≤ –ë–î: {e}")
            try:
                self.db.rollback()
            except:
                pass
    
    async def _check_database_health(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            current_time = time.time()
            if current_time - self._last_health_check < 120:
                return
            
            self._last_health_check = current_time
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.db and self._db_initialized:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    self.db.execute(text("SELECT 1"))
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: {e}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    try:
                        await self._init_database()
                    except Exception as init_error:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {init_error}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î: {e}")
    
    def add_log(self, log_entry: LogEntry):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if len(self.queue) >= self.queue.maxlen:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
                self.queue.popleft()
            
            self.queue.append(log_entry)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

class SmartLogger:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º DatabaseLogWriter
    """
    
    def __init__(self, name: str = "crypto_bot"):
        self.name = name
        self.logger = logging.getLogger(name)
        self.db_writer = None
        self._setup_console_logging()
        self._initialized = False
        
        print("‚úÖ SmartLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_console_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.logger.handlers:
            # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(formatter)
            console_handler.setLevel(logging.INFO)
            
            self.logger.addHandler(console_handler)
            self.logger.setLevel(logging.INFO)
    
    async def initialize(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º DatabaseLogWriter"""
        if self._initialized:
            print("‚ÑπÔ∏è SmartLogger —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î writer (singleton)
            self.db_writer = DatabaseLogWriter()
            await self.db_writer.start()
            
            self._initialized = True
            print("‚úÖ SmartLogger –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmartLogger: {e}")
    
    async def shutdown(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if not self._initialized:
            return
        
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ graceful shutdown SmartLogger...")
            
            if self.db_writer:
                await self.db_writer.stop()
            
            self._initialized = False
            print("‚úÖ SmartLogger –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è SmartLogger: {e}")
    
    def _create_log_entry(self, level: str, message: str, **kwargs) -> LogEntry:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        return LogEntry(
            created_at=datetime.now(),
            level=level.upper(),
            category=kwargs.get('category', 'general'),
            message=message,
            symbol=kwargs.get('symbol'),
            trade_id=kwargs.get('trade_id'),
            strategy=kwargs.get('strategy'),
            context=kwargs.get('context')
        )
    
    def info(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.logger.info(message)
        if self.db_writer:
            log_entry = self._create_log_entry('INFO', message, **kwargs)
            self.db_writer.add_log(log_entry)
    
    def warning(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.logger.warning(message)
        if self.db_writer:
            log_entry = self._create_log_entry('WARNING', message, **kwargs)
            self.db_writer.add_log(log_entry)
    
    def error(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.logger.error(message)
        if self.db_writer:
            log_entry = self._create_log_entry('ERROR', message, **kwargs)
            self.db_writer.add_log(log_entry)
    
    def debug(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏"""
        self.logger.debug(message)
        if self.db_writer:
            log_entry = self._create_log_entry('DEBUG', message, **kwargs)
            self.db_writer.add_log(log_entry)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_logger = None

def get_logger(name: str = "crypto_bot") -> SmartLogger:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞ –ë–ï–ó –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    global _global_logger
    if _global_logger is None:
        _global_logger = SmartLogger(name)
    return _global_logger

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π logger –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ù–û –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
logger = get_logger()

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
def _safe_initialize():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
        print("‚úÖ SmartLogger –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∏—Ç–µ: await logger.initialize()")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

# –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
_safe_initialize()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
print("\nüéØ –ú–æ–¥—É–ª—å smart_logger —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/your-repo/docs/smart_logger.md")
print("üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: from src.logging.smart_logger import logger")

__all__ = [
    'SmartLogger',
    'DatabaseLogWriter', 
    'LogEntry',
    'logger',
    'get_logger'
]