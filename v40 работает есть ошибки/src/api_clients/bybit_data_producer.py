#!/usr/bin/env python3
"""
–ü—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit
–§–∞–π–ª: src/api_clients/bybit_data_producer.py

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –£–ª—É—á—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª
- –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –∑–Ω–∞—á–µ–Ω–∏—è
- –î–û–ë–ê–í–õ–ï–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—ã market_data –∏ candles

–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–∫–∞–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–∞—Ö
"""
import asyncio
import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from decimal import Decimal
import numpy as np
import json

try:
    from pybit.unified_trading import HTTP
    PYBIT_AVAILABLE = True
except ImportError:
    PYBIT_AVAILABLE = False
    HTTP = None

from ..core.database import SessionLocal
from ..core.models import OrderBookSnapshot, VolumeAnomaly, MarketData, Candle
from ..core.unified_config import unified_config as config
from ..exchange.unified_exchange import UnifiedExchangeClient

logger = logging.getLogger(__name__)


class BybitDataProducer:
    """
    –ü—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit
    - –°–Ω–∏–º–∫–∏ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º OFI
    - –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ market_data –∏ candles
    
    ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–í–ê–õ–û–í –ß–ï–†–ï–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback –∑–Ω–∞—á–µ–Ω–∏—è)
    DEFAULT_ORDERBOOK_DEPTH = 50
    DEFAULT_SNAPSHOT_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
    DEFAULT_VOLUME_WINDOW = 24  # —á–∞—Å–æ–≤
    VOLUME_ANOMALY_THRESHOLD = 3.0  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    
    def __init__(self, testnet: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        
        Args:
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        self.testnet = testnet
        self.is_running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.exchange_client = UnifiedExchangeClient()
        self.http_client = None
        
        if PYBIT_AVAILABLE:
            self._init_pybit_client()
        else:
            logger.warning("‚ö†Ô∏è pybit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
            
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.volume_history = {}  # –ò—Å—Ç–æ—Ä–∏—è –æ–±—ä–µ–º–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        self.last_orderbook = {}  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–∫–∞–Ω –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        self.ofi_history = {}     # –ò—Å—Ç–æ—Ä–∏—è OFI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.symbols = getattr(config, 'TRACKED_SYMBOLS', [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT'
        ])
        
        # ‚úÖ –ò–ù–¢–ï–†–í–ê–õ–´ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        self.snapshot_interval = getattr(config, 'ORDERBOOK_SNAPSHOT_INTERVAL', self.DEFAULT_SNAPSHOT_INTERVAL)
        self.volume_check_interval = getattr(config, 'VOLUME_CHECK_INTERVAL', 300)  # 5 –º–∏–Ω—É—Ç
        self.trades_update_interval = getattr(config, 'TRADES_UPDATE_INTERVAL', 3600)  # 1 —á–∞—Å
        
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
        logger.info(f"   üì∏ –°–Ω–∏–º–∫–∏ —Å—Ç–∞–∫–∞–Ω–∞: {self.snapshot_interval}—Å")
        logger.info(f"   üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–æ–≤: {self.volume_check_interval}—Å")
        logger.info(f"   üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫: {self.trades_update_interval}—Å")
        
    def _init_pybit_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pybit –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if self.testnet:
                self.http_client = HTTP(
                    testnet=True,
                    api_key=getattr(config, 'BYBIT_TESTNET_API_KEY', ''),
                    api_secret=getattr(config, 'BYBIT_TESTNET_API_SECRET', '')
                )
            else:
                self.http_client = HTTP(
                    testnet=False,
                    api_key=getattr(config, 'BYBIT_API_KEY', ''),
                    api_secret=getattr(config, 'BYBIT_API_SECRET', '')
                )
            logger.info("‚úÖ Pybit –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pybit: {e}")
            self.http_client = None
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ BybitDataProducer (testnet={self.testnet})...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ UnifiedExchangeClient
        connected = await self.exchange_client.connect('bybit', self.testnet)
        if not connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
            return
            
        self.is_running = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä–µ–º–æ–≤
        await self._init_volume_history()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            asyncio.create_task(self._orderbook_snapshot_loop()),
            asyncio.create_task(self._volume_monitor_loop()),
            asyncio.create_task(self._trades_stream_monitor()),
            asyncio.create_task(self._market_data_update_loop()),  # –ù–û–í–´–ô —Ü–∏–∫–ª –¥–ª—è market_data
            asyncio.create_task(self._candles_update_loop())       # –ù–û–í–´–ô —Ü–∏–∫–ª –¥–ª—è —Å–≤–µ—á–µ–π
        ]
        
        try:
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            logger.info("üõë –ó–∞–¥–∞—á–∏ BybitDataProducer –æ—Ç–º–µ–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ BybitDataProducer: {e}")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BybitDataProducer...")
        self.is_running = False
        await self.exchange_client.disconnect()
        
    async def _init_volume_history(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—ä–µ–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤...")
        
        for symbol in self.symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                klines = await self.exchange_client.get_klines(
                    symbol=symbol,
                    interval='1h',
                    limit=24
                )
                
                if klines and 'data' in klines:
                    volumes = [float(k[5]) for k in klines['data']]  # volume
                    self.volume_history[symbol] = volumes
                    logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {symbol}: {len(volumes)} —Å–≤–µ—á–µ–π")
                else:
                    self.volume_history[symbol] = []
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ {symbol}: {e}")
                self.volume_history[symbol] = []
    
    async def _market_data_update_loop(self):
        """–ù–û–í–´–ô: –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ market_data"""
        logger.info("üíπ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è market_data...")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    await self._update_market_data(symbol)
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª market_data –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ market_data: {e}")
                await asyncio.sleep(10)
    
    async def _update_market_data(self, symbol: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ market_data"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            ticker = await self.exchange_client.fetch_ticker(symbol)
            if not ticker or 'error' in ticker:
                return
            
            db = SessionLocal()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                market_data = db.query(MarketData).filter(
                    MarketData.symbol == symbol
                ).first()
                
                if market_data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    market_data.last_price = float(ticker.get('last', 0))
                    market_data.price_24h_pcnt = float(ticker.get('percentage', 0))
                    market_data.high_price_24h = float(ticker.get('high', 0))
                    market_data.low_price_24h = float(ticker.get('low', 0))
                    market_data.volume_24h = float(ticker.get('baseVolume', 0))
                    market_data.turnover_24h = float(ticker.get('quoteVolume', 0))
                    market_data.updated_at = datetime.utcnow()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    market_data = MarketData(
                        symbol=symbol,
                        last_price=float(ticker.get('last', 0)),
                        price_24h_pcnt=float(ticker.get('percentage', 0)),
                        high_price_24h=float(ticker.get('high', 0)),
                        low_price_24h=float(ticker.get('low', 0)),
                        volume_24h=float(ticker.get('baseVolume', 0)),
                        turnover_24h=float(ticker.get('quoteVolume', 0))
                    )
                    db.add(market_data)
                
                db.commit()
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ market_data –¥–ª—è {symbol}")
                
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}")
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}")
    
    async def _candles_update_loop(self):
        """–ù–û–í–´–ô: –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π"""
        logger.info("üïØÔ∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π...")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                    for interval in ['5m', '15m', '1h']:
                        await self._update_candles(symbol, interval)
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
                await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª —Å–≤–µ—á–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–≤–µ—á–µ–π: {e}")
                await asyncio.sleep(30)
    
    async def _update_candles(self, symbol: str, interval: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
            klines = await self.exchange_client.get_klines(
                symbol=symbol,
                interval=interval,
                limit=100
            )
            
            if not klines or 'data' not in klines:
                return
            
            db = SessionLocal()
            try:
                saved_count = 0
                
                for candle_data in klines['data']:
                    if len(candle_data) < 6:
                        continue
                    
                    timestamp_ms = candle_data[0]
                    open_time = datetime.fromtimestamp(timestamp_ms / 1000)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≤–µ—á–∞
                    existing = db.query(Candle).filter(
                        Candle.symbol == symbol,
                        Candle.interval == interval,
                        Candle.open_time == open_time
                    ).first()
                    
                    if not existing:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                        candle = Candle(
                            symbol=symbol,
                            interval=interval,
                            open_time=open_time,
                            open=float(candle_data[1]),
                            high=float(candle_data[2]),
                            low=float(candle_data[3]),
                            close=float(candle_data[4]),
                            volume=float(candle_data[5]),
                            close_time=open_time + self._get_interval_delta(interval)
                        )
                        db.add(candle)
                        saved_count += 1
                
                if saved_count > 0:
                    db.commit()
                    logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval})")
                    
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π {symbol}: {e}")
    
    def _get_interval_delta(self, interval: str) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ timedelta –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        intervals = {
            '1m': timedelta(minutes=1),
            '5m': timedelta(minutes=5),
            '15m': timedelta(minutes=15),
            '30m': timedelta(minutes=30),
            '1h': timedelta(hours=1),
            '4h': timedelta(hours=4),
            '1d': timedelta(days=1),
        }
        return intervals.get(interval, timedelta(minutes=5))
                
    async def _orderbook_snapshot_loop(self):
        """
        –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤
        ‚úÖ –ò–ù–¢–ï–†–í–ê–õ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        """
        logger.info("üì∏ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–Ω–∏–º–∫–æ–≤ —Å—Ç–∞–∫–∞–Ω–∞...")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        interval = getattr(config, 'ORDERBOOK_SNAPSHOT_INTERVAL', self.DEFAULT_SNAPSHOT_INTERVAL)
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–Ω–∏–º–∫–æ–≤ —Å—Ç–∞–∫–∞–Ω–∞: {interval}—Å")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    await self._capture_orderbook_snapshot(symbol)
                    
                await asyncio.sleep(interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª —Å–Ω–∏–º–∫–æ–≤ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
                await asyncio.sleep(10)
                
    async def _capture_orderbook_snapshot(self, symbol: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook = await self.exchange_client.get_order_book(
                symbol=symbol,
                limit=self.DEFAULT_ORDERBOOK_DEPTH
            )
            
            if not orderbook or 'error' in orderbook:
                return
                
            bids = orderbook.get('bids', [])
            asks = orderbook.get('asks', [])
            
            if not bids or not asks:
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.last_orderbook[symbol] = orderbook
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            bid_volume = sum(float(bid[1]) for bid in bids)
            ask_volume = sum(float(ask[1]) for ask in asks)
            
            # –°–ø—Ä–µ–¥
            best_bid = float(bids[0][0]) if bids else 0
            best_ask = float(asks[0][0]) if asks else 0
            spread = best_ask - best_bid if best_bid and best_ask else 0
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            mid_price = (best_bid + best_ask) / 2 if best_bid and best_ask else 0
            
            # –î–∏—Å–±–∞–ª–∞–Ω—Å –æ–±—ä–µ–º–æ–≤
            total_volume = bid_volume + ask_volume
            imbalance = (bid_volume - ask_volume) / total_volume if total_volume > 0 else 0
            
            # –†–∞—Å—á–µ—Ç Order Flow Imbalance (OFI)
            ofi = self._calculate_ofi(bids, asks)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é OFI
            if symbol not in self.ofi_history:
                self.ofi_history[symbol] = []
            self.ofi_history[symbol].append(ofi)
            if len(self.ofi_history[symbol]) > 100:
                self.ofi_history[symbol].pop(0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –≤ –ë–î
            await self._save_orderbook_snapshot({
                'symbol': symbol,
                'timestamp': datetime.utcnow(),
                'bids': bids[:self.DEFAULT_ORDERBOOK_DEPTH],
                'asks': asks[:self.DEFAULT_ORDERBOOK_DEPTH],
                'bid_volume': bid_volume,
                'ask_volume': ask_volume,
                'spread': spread,
                'mid_price': mid_price,
                'imbalance': imbalance,
                'ofi': ofi
            })
            
            logger.debug(f"üì∏ –°–Ω–∏–º–æ–∫ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: "
                        f"imbalance={imbalance:.2f}, OFI={ofi:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            
    def _calculate_ofi(self, bids: List, asks: List, depth: int = 10) -> float:
        """–†–∞—Å—á–µ—Ç Order Flow Imbalance"""
        try:
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –Ω–∞ –≥–ª—É–±–∏–Ω—É depth
            bid_volume = sum(float(bid[1]) for bid in bids[:depth])
            ask_volume = sum(float(ask[1]) for ask in asks[:depth])
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
            if bid_volume > 0:
                weighted_bid = sum(float(bid[0]) * float(bid[1]) for bid in bids[:depth]) / bid_volume
            else:
                weighted_bid = 0
                
            if ask_volume > 0:
                weighted_ask = sum(float(ask[0]) * float(ask[1]) for ask in asks[:depth]) / ask_volume
            else:
                weighted_ask = 0
            
            # OFI = (bid_volume - ask_volume) * (weighted_ask - weighted_bid)
            volume_imbalance = bid_volume - ask_volume
            price_spread = weighted_ask - weighted_bid if weighted_ask and weighted_bid else 0
            
            ofi = volume_imbalance * price_spread
            
            return ofi
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ OFI: {e}")
            return 0.0
            
    async def _volume_monitor_loop(self):
        """
        –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—ä–µ–º–æ–≤
        ‚úÖ –ò–ù–¢–ï–†–í–ê–õ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        """
        logger.info("üìà –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—ä–µ–º–æ–≤...")
        
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ù–¢–ï–†–í–ê–õ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        check_interval = getattr(config, 'VOLUME_CHECK_INTERVAL', 300)  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–º–æ–≤: {check_interval}—Å")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    await self._check_volume_anomaly(symbol)
                    
                await asyncio.sleep(check_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—ä–µ–º–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—ä–µ–º–æ–≤: {e}")
                await asyncio.sleep(60)
                
    async def _check_volume_anomaly(self, symbol: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            ticker = await self.exchange_client.fetch_ticker(symbol)
            if not ticker:
                return
                
            current_volume = float(ticker.get('baseVolume', 0))
            current_price = float(ticker.get('last', 0))
            price_change = float(ticker.get('percentage', 0))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if symbol not in self.volume_history:
                self.volume_history[symbol] = []
                
            self.volume_history[symbol].append(current_volume)
            if len(self.volume_history[symbol]) > self.DEFAULT_VOLUME_WINDOW:
                self.volume_history[symbol].pop(0)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏—é
            if len(self.volume_history[symbol]) < 10:
                return
                
            volumes = np.array(self.volume_history[symbol])
            mean_volume = np.mean(volumes[:-1])  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
            std_volume = np.std(volumes[:-1])
            
            if std_volume == 0:
                return
                
            # Z-score
            z_score = (current_volume - mean_volume) / std_volume
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–∏
            anomaly_type = None
            
            if abs(z_score) > self.VOLUME_ANOMALY_THRESHOLD:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏
                if z_score > 0:
                    # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                    if price_change > 2:
                        anomaly_type = 'unusual_buy'
                    else:
                        anomaly_type = 'spike'
                else:
                    if price_change < -2:
                        anomaly_type = 'unusual_sell'
                    else:
                        anomaly_type = 'divergence'
                        
            if anomaly_type:
                await self._save_volume_anomaly({
                    'symbol': symbol,
                    'anomaly_type': anomaly_type,
                    'volume': current_volume,
                    'avg_volume': mean_volume,
                    'volume_ratio': current_volume / mean_volume if mean_volume > 0 else 0,
                    'price': current_price,
                    'price_change': price_change,
                    'z_score': z_score,
                    'timestamp': datetime.utcnow()
                })
                
                logger.warning(f"üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ {symbol}: {anomaly_type} "
                             f"(z-score: {z_score:.2f}, ratio: {current_volume/mean_volume:.2f})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–º–∞–ª–∏–∏ {symbol}: {e}")
            
    async def _trades_stream_monitor(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫
        ‚úÖ –ò–ù–¢–ï–†–í–ê–õ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        """
        logger.info("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω (polling mode)")
        
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ù–¢–ï–†–í–ê–õ –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        update_interval = getattr(config, 'TRADES_UPDATE_INTERVAL', 3600)  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {update_interval}—Å")
        
        # –í production –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å WebSocket
        # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä–µ–º–æ–≤
                await self._init_volume_history()
                await asyncio.sleep(update_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–¥–µ–ª–æ–∫: {e}")
                await asyncio.sleep(60)
                
    async def _save_orderbook_snapshot(self, snapshot_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ –≤ –ë–î"""
        db = SessionLocal()
        
        try:
            snapshot = OrderBookSnapshot(
                symbol=snapshot_data['symbol'],
                exchange='bybit',
                timestamp=snapshot_data['timestamp'],
                bids=json.dumps(snapshot_data['bids']),
                asks=json.dumps(snapshot_data['asks']),
                bid_volume=Decimal(str(snapshot_data['bid_volume'])),
                ask_volume=Decimal(str(snapshot_data['ask_volume'])),
                spread=Decimal(str(snapshot_data['spread'])),
                mid_price=Decimal(str(snapshot_data['mid_price'])),
                imbalance=Decimal(str(snapshot_data['imbalance'])),
                ofi=Decimal(str(snapshot_data['ofi']))
            )
            
            db.add(snapshot)
            db.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
            db.rollback()
        finally:
            db.close()
            
    async def _save_volume_anomaly(self, anomaly_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä–µ–º–∞ –≤ –ë–î"""
        db = SessionLocal()
        
        try:
            anomaly = VolumeAnomaly(
                symbol=anomaly_data['symbol'],
                exchange='bybit',
                anomaly_type=anomaly_data['anomaly_type'],
                timestamp=anomaly_data['timestamp'],
                volume=Decimal(str(anomaly_data['volume'])),
                avg_volume=Decimal(str(anomaly_data['avg_volume'])),
                volume_ratio=Decimal(str(anomaly_data['volume_ratio'])),
                price=Decimal(str(anomaly_data['price'])),
                price_change=Decimal(str(anomaly_data['price_change'])),
                details=json.dumps({
                    'z_score': anomaly_data['z_score'],
                    'volume_volatility': float(np.std(self.volume_history.get(anomaly_data['symbol'], [0])))
                })
            )
            
            db.add(anomaly)
            db.commit()
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –¥–ª—è {anomaly_data['symbol']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏: {e}")
            db.rollback()
        finally:
            db.close()
            
    def get_market_metrics(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        metrics = {
            'ofi_trend': 'neutral',
            'volume_status': 'normal',
            'orderbook_imbalance': 0.0,
            'recent_anomalies': 0
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ OFI
        if symbol in self.ofi_history and len(self.ofi_history[symbol]) >= 5:
            recent_ofi = self.ofi_history[symbol][-5:]
            ofi_mean = np.mean(recent_ofi)
            
            if ofi_mean > 1000:
                metrics['ofi_trend'] = 'bullish'
            elif ofi_mean < -1000:
                metrics['ofi_trend'] = 'bearish'
                
        # –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–º–∞
        if symbol in self.volume_history and len(self.volume_history[symbol]) > 10:
            volumes = self.volume_history[symbol]
            current_volume = volumes[-1] if volumes else 0
            avg_volume = np.mean(volumes[:-1]) if len(volumes) > 1 else 0
            
            if avg_volume > 0:
                if current_volume > avg_volume * 1.5:
                    metrics['volume_status'] = 'high'
                elif current_volume < avg_volume * 0.5:
                    metrics['volume_status'] = 'low'
                
        # –î–∏—Å–±–∞–ª–∞–Ω—Å —Å—Ç–∞–∫–∞–Ω–∞
        if symbol in self.last_orderbook:
            orderbook = self.last_orderbook[symbol]
            bid_volume = sum(float(b[1]) for b in orderbook['bids'][:10])
            ask_volume = sum(float(a[1]) for a in orderbook['asks'][:10])
            
            if bid_volume + ask_volume > 0:
                metrics['orderbook_imbalance'] = (bid_volume - ask_volume) / (bid_volume + ask_volume)
                
        return metrics

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        return {
            'symbols_tracked': len(self.symbols),
            'volume_history_size': sum(len(v) for v in self.volume_history.values()),
            'ofi_history_size': sum(len(v) for v in self.ofi_history.values()),
            'orderbook_cache_size': len(self.last_orderbook),
            'is_running': self.is_running,
            'intervals': {
                'snapshot': self.snapshot_interval,
                'volume_check': self.volume_check_interval,
                'trades_update': self.trades_update_interval
            }
        }
    
    async def _market_data_update_loop(self):
        """–ù–û–í–´–ô: –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ market_data"""
        logger.info("üíπ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è market_data...")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    await self._update_market_data(symbol)
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª market_data –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ market_data: {e}")
                await asyncio.sleep(10)
    
    async def _update_market_data(self, symbol: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ market_data"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            ticker = await self.exchange_client.fetch_ticker(symbol)
            if not ticker or 'error' in ticker:
                return
            
            db = SessionLocal()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                market_data = db.query(MarketData).filter(
                    MarketData.symbol == symbol
                ).first()
                
                if market_data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    market_data.last_price = float(ticker.get('last', 0))
                    market_data.price_24h_pcnt = float(ticker.get('percentage', 0))
                    market_data.high_price_24h = float(ticker.get('high', 0))
                    market_data.low_price_24h = float(ticker.get('low', 0))
                    market_data.volume_24h = float(ticker.get('baseVolume', 0))
                    market_data.turnover_24h = float(ticker.get('quoteVolume', 0))
                    market_data.updated_at = datetime.utcnow()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    market_data = MarketData(
                        symbol=symbol,
                        last_price=float(ticker.get('last', 0)),
                        price_24h_pcnt=float(ticker.get('percentage', 0)),
                        high_price_24h=float(ticker.get('high', 0)),
                        low_price_24h=float(ticker.get('low', 0)),
                        volume_24h=float(ticker.get('baseVolume', 0)),
                        turnover_24h=float(ticker.get('quoteVolume', 0))
                    )
                    db.add(market_data)
                
                db.commit()
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ market_data –¥–ª—è {symbol}")
                
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}")
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}")
    
    async def _candles_update_loop(self):
        """–ù–û–í–´–ô: –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π"""
        logger.info("üïØÔ∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π...")
        
        while self.is_running:
            try:
                for symbol in self.symbols:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                    for interval in ['5m', '15m', '1h']:
                        await self._update_candles(symbol, interval)
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
                await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª —Å–≤–µ—á–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–≤–µ—á–µ–π: {e}")
                await asyncio.sleep(30)
    
    async def _update_candles(self, symbol: str, interval: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
            klines = await self.exchange_client.get_klines(
                symbol=symbol,
                interval=interval,
                limit=100
            )
            
            if not klines or 'data' not in klines:
                return
            
            db = SessionLocal()
            try:
                saved_count = 0
                
                for candle_data in klines['data']:
                    if len(candle_data) < 6:
                        continue
                    
                    timestamp_ms = candle_data[0]
                    open_time = datetime.fromtimestamp(timestamp_ms / 1000)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≤–µ—á–∞
                    existing = db.query(Candle).filter(
                        Candle.symbol == symbol,
                        Candle.interval == interval,
                        Candle.open_time == open_time
                    ).first()
                    
                    if not existing:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                        candle = Candle(
                            symbol=symbol,
                            interval=interval,
                            open_time=open_time,
                            open=float(candle_data[1]),
                            high=float(candle_data[2]),
                            low=float(candle_data[3]),
                            close=float(candle_data[4]),
                            volume=float(candle_data[5]),
                            close_time=open_time + self._get_interval_delta(interval)
                        )
                        db.add(candle)
                        saved_count += 1
                
                if saved_count > 0:
                    db.commit()
                    logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval})")
                    
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π {symbol}: {e}")
    
    def _get_interval_delta(self, interval: str) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ timedelta –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        intervals = {
            '1m': timedelta(minutes=1),
            '5m': timedelta(minutes=5),
            '15m': timedelta(minutes=15),
            '30m': timedelta(minutes=30),
            '1h': timedelta(hours=1),
            '4h': timedelta(hours=4),
            '1d': timedelta(days=1),
        }
        return intervals.get(interval, timedelta(minutes=5))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
async def main():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
    producer = BybitDataProducer(testnet=True)
    
    try:
        await producer.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await producer.stop()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())