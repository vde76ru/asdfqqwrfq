"""
–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏ BotManager
–§–∞–π–ª: src/bot/internal/trading_pairs.py

–í—Å–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

from src.core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

def get_trading_pairs(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏"""
    
    class TradingPairs:
        def __init__(self, bot):
            self.bot = bot
            
        async def discover_all_trading_pairs(self):
            """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
            return await discover_all_trading_pairs(self.bot)
            
        async def load_pairs_from_config(self):
            """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
            return await load_pairs_from_config(self.bot)
            
        async def load_historical_data_for_pairs(self):
            """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä"""
            return await load_historical_data_for_pairs(self.bot)
    
    return TradingPairs(bot_instance)


async def discover_all_trading_pairs(bot_manager) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        
        if config.ENABLE_AUTO_PAIR_DISCOVERY and bot_manager.exchange:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏
            markets = await fetch_all_markets_from_exchange(bot_manager)
            
            if not markets:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏")
                return False
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            filtered_pairs = await filter_and_rank_pairs(bot_manager, markets)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            max_pairs = config.MAX_TRADING_PAIRS
            bot_manager.all_trading_pairs = filtered_pairs[:max_pairs]
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await categorize_trading_pairs(bot_manager)
            
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(bot_manager.all_trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            logger.info(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(bot_manager.active_pairs)}")
            logger.info(f"üëÄ –í —Å–ø–∏—Å–∫–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {len(bot_manager.watchlist_pairs)}")
            
            return True
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            load_pairs_from_config(bot_manager)
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
        return False


async def fetch_all_markets_from_exchange(bot_manager) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• —Ä—ã–Ω–∫–æ–≤ —Å –±–∏—Ä–∂–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π real_client.py
        if not hasattr(bot_manager, 'real_exchange') or not bot_manager.real_exchange:
            from ...exchange.real_client import RealExchangeClient
            bot_manager.real_exchange = RealExchangeClient()
            await bot_manager.real_exchange.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏
        markets = await bot_manager.real_exchange.get_all_markets()
        
        if not markets:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥")
            load_pairs_from_config(bot_manager)
            return []
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} –†–ï–ê–õ–¨–ù–´–• —Ä—ã–Ω–∫–æ–≤ —Å Bybit")
        return markets
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
        return []


async def filter_and_rank_pairs(bot_manager, markets: List[Dict]) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        filtered_pairs = []
        
        for market in markets:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if await passes_pair_filters(bot_manager, market):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                score = await calculate_pair_score(bot_manager, market)
                market['trading_score'] = score
                filtered_pairs.append(market)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É (–ª—É—á—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        filtered_pairs.sort(key=lambda x: x['trading_score'], reverse=True)
        
        logger.info(f"üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_pairs)} –ø–∞—Ä –∏–∑ {len(markets)}")
        return filtered_pairs
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä: {e}")
        return []


async def passes_pair_filters(bot_manager, market: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    try:
        symbol = market.get('symbol', '')
        base = market.get('base', '')
        quote = market.get('quote', '')
        volume_24h = market.get('volume_24h', 0)
        price = market.get('price', 0)
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if not market.get('active', False):
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ
        if quote not in config.ALLOWED_QUOTE_ASSETS:
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º –±–∞–∑–æ–≤—ã–º –∞–∫—Ç–∏–≤–∞–º
        if base in config.EXCLUDED_BASE_ASSETS:
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
        if volume_24h < config.MIN_VOLUME_24H_USD:
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if price < config.MIN_PRICE_USD or price > config.MAX_PRICE_USD:
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        if symbol in bot_manager.blacklisted_pairs:
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        change_24h = abs(market.get('change_24h', 0))
        if change_24h > 50:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ
            return False
        
        trades_count = market.get('trades_count', 0)
        if trades_count < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            return False
        
        spread_percent = (market.get('ask', 0) - market.get('bid', 0)) / price * 100
        if spread_percent > 1:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 1%
            return False
        
        return True
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {market.get('symbol', 'unknown')}: {e}")
        return False


async def calculate_pair_score(bot_manager, market: Dict) -> float:
    """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        score = 0.0
        
        # –°–∫–æ—Ä –ø–æ –æ–±—ä–µ–º—É (30%)
        volume_24h = market.get('volume_24h', 0)
        volume_score = min(1.0, volume_24h / 50000000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ $50M
        score += volume_score * 0.3
        
        # –°–∫–æ—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤ (20%)
        trades_count = market.get('trades_count', 0)
        activity_score = min(1.0, trades_count / 10000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10k —Å–¥–µ–ª–æ–∫
        score += activity_score * 0.2
        
        # –°–∫–æ—Ä –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Å–ø—Ä–µ–¥—É) (20%)
        price = market.get('price', 1)
        spread = (market.get('ask', price) - market.get('bid', price)) / price
        liquidity_score = max(0, 1 - spread * 100)  # –ß–µ–º –º–µ–Ω—å—à–µ —Å–ø—Ä–µ–¥, —Ç–µ–º –ª—É—á—à–µ
        score += liquidity_score * 0.2
        
        # –°–∫–æ—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (15%)
        change_24h = abs(market.get('change_24h', 0))
        volatility_score = min(1.0, change_24h / 10)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10%
        score += volatility_score * 0.15
        
        # –°–∫–æ—Ä –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (15%)
        base = market.get('base', '')
        popularity_score = get_asset_popularity_score(bot_manager, base)
        score += popularity_score * 0.15
        
        return min(1.0, score)
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞ –¥–ª—è {market.get('symbol', 'unknown')}: {e}")
        return 0.0


def get_asset_popularity_score(bot_manager, base_asset: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞"""
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π —Å–∫–æ—Ä
    popularity_map = {
        'BTC': 1.0, 'ETH': 0.95, 'BNB': 0.9, 'SOL': 0.85, 'ADA': 0.8,
        'XRP': 0.75, 'DOT': 0.7, 'AVAX': 0.65, 'MATIC': 0.6, 'LINK': 0.55,
        'UNI': 0.5, 'LTC': 0.45, 'BCH': 0.4, 'ATOM': 0.35, 'FIL': 0.3
    }
    return popularity_map.get(base_asset, 0.1)  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö


async def categorize_trading_pairs(bot_manager):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot_manager.active_pairs.clear()
        bot_manager.watchlist_pairs.clear()
        bot_manager.trending_pairs.clear()
        bot_manager.high_volume_pairs.clear()
        
        if not bot_manager.all_trading_pairs:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
        sorted_pairs = sorted(bot_manager.all_trading_pairs, 
                            key=lambda x: x.get('trading_score', 0), 
                            reverse=True)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø 30% –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        max_active = min(config.MAX_POSITIONS, len(sorted_pairs) // 3)
        bot_manager.active_pairs = [pair['symbol'] for pair in sorted_pairs[:max_active]]
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 20%)
        watchlist_count = min(50, len(sorted_pairs) // 5)
        start_idx = len(bot_manager.active_pairs)
        bot_manager.watchlist_pairs = [pair['symbol'] for pair in sorted_pairs[start_idx:start_idx + watchlist_count]]
        
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã (—Å –≤—ã—Å–æ–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞ 24—á)
        trending_pairs = [pair for pair in sorted_pairs if abs(pair.get('change_24h', 0)) > 5]
        bot_manager.trending_pairs = [pair['symbol'] for pair in trending_pairs[:20]]
        
        # –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø –ø–æ –æ–±—ä–µ–º—É)
        volume_sorted = sorted(sorted_pairs, key=lambda x: x.get('volume_24h', 0), reverse=True)
        bot_manager.high_volume_pairs = [pair['symbol'] for pair in volume_sorted[:20]]
        
        logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"  üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(bot_manager.active_pairs)}")
        logger.info(f"  üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ: {len(bot_manager.watchlist_pairs)}")
        logger.info(f"  üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ: {len(bot_manager.trending_pairs)}")
        logger.info(f"  üí∞ –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ: {len(bot_manager.high_volume_pairs)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä: {e}")


def load_pairs_from_config(bot_manager):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ø–∞—Ä
    –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –ø–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ TRADING_PAIRS.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ –µ–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        configured_pairs = getattr(config, 'TRADING_PAIRS', ['BTCUSDT', 'ETHUSDT'])
        
        if not configured_pairs or not isinstance(configured_pairs, list):
             logger.error("–°–ø–∏—Å–æ–∫ TRADING_PAIRS –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∏–Ω–∏–º—É–º
             configured_pairs = ['BTCUSDT', 'ETHUSDT']

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(configured_pairs)} –ø–∞—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        bot_manager.all_trading_pairs = configured_pairs
        bot_manager.active_pairs = configured_pairs

        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(bot_manager.active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {', '.join(bot_manager.active_pairs[:5])}...")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç –∞–Ω–∞–ª–∏–∑
        bot_manager.watchlist_pairs = []
        bot_manager.trending_pairs = []
        bot_manager.high_volume_pairs = []

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∏–Ω–∏–º—É–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot_manager.all_trading_pairs = ['BTCUSDT', 'ETHUSDT']
        bot_manager.active_pairs = ['BTCUSDT', 'ETHUSDT']
        return False


async def load_historical_data_for_pairs(bot_instance):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(bot_instance.active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä...")
    
    success_count = 0
    
    for i, symbol in enumerate(bot_instance.active_pairs):
        try:
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–î–ï–†–ñ–ö–£ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã API
            if i > 0:
                await asyncio.sleep(0.5)  # 500ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({i+1}/{len(bot_instance.active_pairs)})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            timeframes = ['1h', '4h']
            
            for tf in timeframes:
                historical_data = await bot_instance.data_collector.collect_historical_data(
                    symbol=symbol, 
                    timeframe=tf, 
                    limit=200
                )
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DataFrame –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if historical_data is not None and not historical_data.empty:
                    success_count += 1
                    logger.info(f"‚úÖ {symbol} {tf}: {len(historical_data)} —Å–≤–µ—á–µ–π")
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol} {tf}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
        except Exception as e:
            # –î–æ–±–∞–≤–ª—è–µ–º traceback –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –≤ –±—É–¥—É—â–µ–º
            import traceback
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            logger.debug(traceback.format_exc())
    
    logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {success_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
    return success_count > 0


async def update_pairs(bot_manager, pairs: List[str]) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    bot_manager.trading_pairs = pairs
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
    bot_manager.active_pairs = pairs[:config.MAX_TRADING_PAIRS]
    logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {len(pairs)}")