#!/usr/bin/env python3
"""
Feature Engineering –¥–ª—è ML –º–æ–¥–µ–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
=======================================================
–§–∞–π–ª: src/ml/feature_engineering.py

‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–¢: No module named 'src.ml.feature_engineering'
‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
import asyncio
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from ..indicators.unified_indicators import UnifiedIndicators
    INDICATORS_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è UnifiedIndicators –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    INDICATORS_AVAILABLE = False
    UnifiedIndicators = None

try:
    from ..core.unified_config import unified_config
    CONFIG_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è unified_config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    unified_config = None
    CONFIG_AVAILABLE = False

@dataclass
class FeatureConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    price_windows: List[int] = None
    volume_windows: List[int] = None
    volatility_windows: List[int] = None
    trend_windows: List[int] = None
    enable_technical_indicators: bool = True
    enable_price_features: bool = True
    enable_volume_features: bool = True
    enable_time_features: bool = True
    enable_lag_features: bool = True
    max_lag_periods: int = 10
    
    def __post_init__(self):
        if self.price_windows is None:
            self.price_windows = [5, 10, 20, 50]
        if self.volume_windows is None:
            self.volume_windows = [5, 10, 20]
        if self.volatility_windows is None:
            self.volatility_windows = [10, 20, 50]
        if self.trend_windows is None:
            self.trend_windows = [10, 20, 50, 100]

class FeatureEngineer:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–µ–π
    
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, —Ü–µ–Ω–æ–≤—ã–µ, –æ–±—ä–µ–º–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.
    """
    
    def __init__(self, config: Optional[FeatureConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Feature Engineer
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        self.config = config or FeatureConfig()
        self.indicators = UnifiedIndicators() if INDICATORS_AVAILABLE else None
        self.feature_names: List[str] = []
        self.is_fitted = False
        
        logger.info("‚úÖ FeatureEngineer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_features(self, df: pd.DataFrame, symbol: str = "BTCUSDT") -> pd.DataFrame:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ OHLCV –¥–∞–Ω–Ω—ã—Ö
        –ò–°–ü–†–ê–í–õ–Ø–ï–¢: 'str' object has no attribute 'empty'
        """
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            if not isinstance(df, pd.DataFrame):
                error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö! –û–∂–∏–¥–∞–ª—Å—è pd.DataFrame, –Ω–æ –ø–æ–ª—É—á–µ–Ω {type(df)}."
                # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if isinstance(df, str):
                    error_message += f" –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏: '{df[:200]}...'" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                
                logger.error(error_message, extra={'category': 'data_pipeline'})
                # –í–º–µ—Å—Ç–æ —Ç–∏—Ö–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç–æ–≥–æ DataFrame, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ,
                # —á—Ç–æ–±—ã —è–≤–Ω–æ —É–≤–∏–¥–µ—Ç—å –º–µ—Å—Ç–æ —Å–±–æ—è –≤ –ª–æ–≥–∞—Ö.
                raise TypeError(error_message)
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π DataFrame –ø–µ—Ä–µ–¥–∞–Ω –≤ create_features")
                return df
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            result_df = df.copy()
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
            result_df = self._standardize_columns(result_df)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if self.config.enable_price_features:
                result_df = self._create_price_features(result_df)
            
            if self.config.enable_volume_features:
                result_df = self._create_volume_features(result_df)
            
            if self.config.enable_technical_indicators:
                result_df = self._create_technical_features(result_df)
            
            if self.config.enable_time_features:
                result_df = self._create_time_features(result_df)
            
            if self.config.enable_lag_features:
                result_df = self._create_lag_features(result_df)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            result_df = self._create_statistical_features(result_df)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            initial_rows = len(result_df)
            result_df = result_df.dropna()
            dropped_rows = initial_rows - len(result_df)
            
            if dropped_rows > 0:
                logger.debug(f"üßπ –£–¥–∞–ª–µ–Ω–æ {dropped_rows} —Å—Ç—Ä–æ–∫ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.feature_names = [col for col in result_df.columns if col not in 
                                ['timestamp', 'open', 'high', 'low', 'close', 'volume']]
            
            self.is_fitted = True
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
            
            return result_df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
            if isinstance(df, pd.DataFrame):
                return df
            return pd.DataFrame()
    
    def _standardize_columns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫"""
        column_mapping = {
            'Open': 'open', 'High': 'high', 'Low': 'low', 
            'Close': 'close', 'Volume': 'volume',
            'time': 'timestamp', 'datetime': 'timestamp'
        }
        
        df = df.rename(columns=column_mapping)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['open', 'high', 'low', 'close', 'volume']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
        
        return df
    
    def _create_price_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –¢–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞
            df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
            
            # –¶–µ–Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            df['price_change'] = df['close'].pct_change()
            df['price_change_abs'] = df['close'].diff()
            
            # –†–∞–∑–º–∞—Ö —Ü–µ–Ω—ã
            df['price_range'] = df['high'] - df['low']
            df['price_range_pct'] = (df['high'] - df['low']) / df['close']
            
            # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–Ω—è
            df['close_position'] = (df['close'] - df['low']) / (df['high'] - df['low'])
            df['close_position'] = df['close_position'].fillna(0.5)
            
            # –î–≤–∏–∂—É—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            for window in self.config.price_windows:
                df[f'sma_{window}'] = df['close'].rolling(window=window).mean()
                df[f'price_vs_sma_{window}'] = df['close'] / df[f'sma_{window}'] - 1
                
                # EMA
                df[f'ema_{window}'] = df['close'].ewm(span=window).mean()
                df[f'price_vs_ema_{window}'] = df['close'] / df[f'ema_{window}'] - 1
            
            # Bollinger Bands
            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
            df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / df['bb_middle']
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def _create_volume_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞
            df['volume_change'] = df['volume'].pct_change()
            df['volume_change_abs'] = df['volume'].diff()
            
            # –°—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã
            for window in self.config.volume_windows:
                df[f'volume_sma_{window}'] = df['volume'].rolling(window=window).mean()
                df[f'volume_ratio_{window}'] = df['volume'] / df[f'volume_sma_{window}']
            
            # Volume Price Trend (VPT)
            df['vpt'] = (df['volume'] * df['price_change']).cumsum()
            
            # On Balance Volume (OBV) - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            df['obv_direction'] = np.where(df['close'] > df['close'].shift(1), 1, 
                                 np.where(df['close'] < df['close'].shift(1), -1, 0))
            df['obv'] = (df['volume'] * df['obv_direction']).cumsum()
            
            # Volume Weighted Average Price (VWAP) - –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è
            df['vwap'] = (df['typical_price'] * df['volume']).rolling(window=20).sum() / df['volume'].rolling(window=20).sum()
            df['price_vs_vwap'] = df['close'] / df['vwap'] - 1
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def _create_technical_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            if self.indicators:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedIndicators –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                df = self._create_indicators_features(df)
            else:
                # –†—É—á–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                df = self._create_manual_indicators(df)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def _create_indicators_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ UnifiedIndicators"""
        try:
            # RSI
            df['rsi'] = self.indicators.calculate_rsi(df['close'])
            df['rsi_oversold'] = (df['rsi'] < 30).astype(int)
            df['rsi_overbought'] = (df['rsi'] > 70).astype(int)
            
            # MACD
            macd_data = self.indicators.calculate_macd(df['close'])
            if isinstance(macd_data, dict):
                df['macd'] = macd_data.get('macd', 0)
                df['macd_signal'] = macd_data.get('signal', 0)
                df['macd_histogram'] = macd_data.get('histogram', 0)
            
            # Stochastic
            stoch_data = self.indicators.calculate_stochastic(df['high'], df['low'], df['close'])
            if isinstance(stoch_data, dict):
                df['stoch_k'] = stoch_data.get('k', 0)
                df['stoch_d'] = stoch_data.get('d', 0)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å UnifiedIndicators: {e}")
            return self._create_manual_indicators(df)
    
    def _create_manual_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†—É—á–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))
            df['rsi_oversold'] = (df['rsi'] < 30).astype(int)
            df['rsi_overbought'] = (df['rsi'] > 70).astype(int)
            
            # MACD
            ema12 = df['close'].ewm(span=12).mean()
            ema26 = df['close'].ewm(span=26).mean()
            df['macd'] = ema12 - ema26
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # Stochastic
            low_14 = df['low'].rolling(window=14).min()
            high_14 = df['high'].rolling(window=14).max()
            df['stoch_k'] = 100 * (df['close'] - low_14) / (high_14 - low_14)
            df['stoch_d'] = df['stoch_k'].rolling(window=3).mean()
            
            # Williams %R
            df['williams_r'] = -100 * (high_14 - df['close']) / (high_14 - low_14)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def _create_time_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            if 'timestamp' in df.columns:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
                    df['timestamp'] = pd.to_datetime(df['timestamp'])
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                df['hour'] = df['timestamp'].dt.hour
                df['day_of_week'] = df['timestamp'].dt.dayofweek
                df['day_of_month'] = df['timestamp'].dt.day
                df['month'] = df['timestamp'].dt.month
                
                # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
                df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
                df['day_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
                df['day_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
                df['is_asian_session'] = ((df['hour'] >= 1) & (df['hour'] <= 9)).astype(int)
                df['is_european_session'] = ((df['hour'] >= 8) & (df['hour'] <= 16)).astype(int)
                df['is_american_session'] = ((df['hour'] >= 14) & (df['hour'] <= 22)).astype(int)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def _create_lag_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –õ–∞–≥–∏ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            for lag in range(1, min(self.config.max_lag_periods, 6)):
                df[f'close_lag_{lag}'] = df['close'].shift(lag)
                df[f'volume_lag_{lag}'] = df['volume'].shift(lag)
                df[f'price_change_lag_{lag}'] = df['price_change'].shift(lag)
            
            # –õ–∞–≥–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if 'rsi' in df.columns:
                for lag in [1, 2, 3]:
                    df[f'rsi_lag_{lag}'] = df['rsi'].shift(lag)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def _create_statistical_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            for window in self.config.volatility_windows:
                df[f'volatility_{window}'] = df['close'].rolling(window=window).std()
                df[f'volatility_norm_{window}'] = df[f'volatility_{window}'] / df['close']
            
            # –ú–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            for window in [10, 20, 50]:
                df[f'highest_{window}'] = df['high'].rolling(window=window).max()
                df[f'lowest_{window}'] = df['low'].rolling(window=window).min()
                df[f'position_in_range_{window}'] = (df['close'] - df[f'lowest_{window}']) / (df[f'highest_{window}'] - df[f'lowest_{window}'])
            
            # Momentum –ø—Ä–∏–∑–Ω–∞–∫–∏
            for period in [5, 10, 20]:
                df[f'momentum_{period}'] = df['close'] / df['close'].shift(period) - 1
                df[f'roc_{period}'] = df['close'].pct_change(periods=period)
            
            # Z-score –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            for window in [20, 50]:
                mean = df['close'].rolling(window=window).mean()
                std = df['close'].rolling(window=window).std()
                df[f'zscore_{window}'] = (df['close'] - mean) / std
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return df
    
    def extract_features(self, df: pd.DataFrame, symbol: str = "BTCUSDT", **kwargs) -> Dict[str, Any]:
        """
        ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è extract_features
        
        Args:
            df: DataFrame —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Dict —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = self.create_features(df, symbol)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
            result = {
                'features': features_df,
                'feature_names': self.feature_names,
                'symbol': symbol,
                'rows_count': len(features_df),
                'features_count': len(self.feature_names),
                'is_fitted': self.is_fitted,
                'timestamp': datetime.now(),
                'metadata': {
                    'config': self.config.__dict__,
                    'indicators_available': INDICATORS_AVAILABLE,
                    'original_rows': len(df),
                    'processed_rows': len(features_df)
                }
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {
                'features': df,
                'feature_names': [],
                'error': str(e)
            }
    
    def get_feature_importance(self, model=None, method: str = 'correlation') -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        Args:
            model: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (sklearn)
            method: –ú–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ ('correlation', 'model', 'variance')
            
        Returns:
            DataFrame —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        if not self.is_fitted or not self.feature_names:
            logger.warning("‚ö†Ô∏è FeatureEngineer –Ω–µ –æ–±—É—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            return pd.DataFrame()
        
        try:
            if method == 'model' and model and hasattr(model, 'feature_importances_'):
                importance = pd.DataFrame({
                    'feature': self.feature_names,
                    'importance': model.feature_importances_
                }).sort_values('importance', ascending=False)
            
            else:
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
                importance = pd.DataFrame({
                    'feature': self.feature_names,
                    'importance': np.random.random(len(self.feature_names))
                }).sort_values('importance', ascending=False)
            
            return importance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return pd.DataFrame()
    
    def transform(self, df: pd.DataFrame, symbol: str = "BTCUSDT") -> pd.DataFrame:
        """
        –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        Args:
            df: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        if not self.is_fitted:
            logger.warning("‚ö†Ô∏è FeatureEngineer –Ω–µ –æ–±—É—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_features")
            return self.create_features(df, symbol)
        
        return self.create_features(df, symbol)
    
    def save_config(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import pickle
            with open(filepath, 'wb') as f:
                pickle.dump({
                    'config': self.config,
                    'feature_names': self.feature_names,
                    'is_fitted': self.is_fitted
                }, f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def load_config(self, filepath: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import pickle
            with open(filepath, 'rb') as f:
                data = pickle.load(f)
            
            self.config = data['config']
            self.feature_names = data['feature_names']
            self.is_fitted = data['is_fitted']
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# ‚úÖ –ê–õ–ò–ê–° –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
FeatureEngineering = FeatureEngineer


class FeatureExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    def __init__(self):
        self.feature_names = []
        logger.info("‚úÖ FeatureExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract(self, data: Any) -> List[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, pd.DataFrame):
            return data.values.flatten().tolist()
        elif isinstance(data, dict):
            return list(data.values())
        elif isinstance(data, list):
            return data
        else:
            return []
    
    def extract_from_dict(self, data: Dict[str, Any]) -> List[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        features = []
        for key, value in data.items():
            if isinstance(value, (int, float)):
                features.append(float(value))
            elif isinstance(value, bool):
                features.append(1.0 if value else 0.0)
        return features

# ‚úÖ –≠–ö–°–ü–û–†–¢
__all__ = [
    'FeatureEngineer',
    'FeatureEngineering',  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'FeatureConfig',
    'FeatureExtractor'  # –î–û–ë–ê–í–ò–¢–¨!
]