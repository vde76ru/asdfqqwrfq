#!/usr/bin/env python3
"""
–û–ë–ù–û–í–õ–ï–ù–ù–´–ô SIGNAL PROCESSOR - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/bot/signal_processor.py

‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–û:
- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–µ—Å–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import asyncio
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any, Union
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
import logging
import json

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from ..core.unified_config import unified_config as config
    CONFIG_AVAILABLE = True
except ImportError:
    CONFIG_AVAILABLE = False
    config = None

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from ..common.types import UnifiedTradingSignal as TradingSignal
    TRADING_SIGNAL_AVAILABLE = True
except ImportError:
    TRADING_SIGNAL_AVAILABLE = False
    TradingSignal = None

try:
    from ..core.database import SessionLocal
    from ..core.models import Trade, Signal
    DATABASE_AVAILABLE = True
except ImportError:
    DATABASE_AVAILABLE = False
    SessionLocal = None

logger = logging.getLogger(__name__)

class SignalQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    EXCELLENT = "excellent"    # >0.8 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    GOOD = "good"             # 0.6-0.8 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    AVERAGE = "average"       # 0.4-0.6 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    POOR = "poor"             # 0.2-0.4 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    INVALID = "invalid"       # <0.2 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

class SignalStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    PENDING = "pending"
    VALIDATED = "validated"
    FILTERED = "filtered"
    AGGREGATED = "aggregated"
    PROCESSED = "processed"
    REJECTED = "rejected"

@dataclass
class ProcessedSignal:
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    original_signal: TradingSignal
    strategy_name: str
    symbol: str
    quality: SignalQuality
    confidence_adjusted: float     # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    priority: int                  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1-10 (10 - –Ω–∞–∏–≤—ã—Å—à–∏–π)
    risk_score: float             # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ 0-1
    timestamp: datetime
    validation_results: Dict[str, Any] = field(default_factory=dict)
    status: SignalStatus = SignalStatus.PENDING
    # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    contributing_strategies: List[str] = field(default_factory=list)
    strategy_weights: Dict[str, float] = field(default_factory=dict)
    metadata: Dict[str, Any] = field(default_factory=dict)
    aggregated_stop_loss: Optional[float] = None
    aggregated_take_profit: Optional[float] = None

@dataclass 
class AggregatedSignal:
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    symbol: str
    action: str                   # BUY, SELL, WAIT
    confidence: float            # –ö–æ–Ω—Å–µ–Ω—Å—É—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    strategies_count: int        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategy_names: List[str]    # –ò–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    individual_signals: List[ProcessedSignal]
    consensus_strength: float    # –°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ 0-1
    conflicting_signals: int     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö
    avg_stop_loss: float
    avg_take_profit: float
    recommended_position_size: float
    timestamp: datetime
    # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    price: float = 0.0
    contributing_strategies: List[str] = field(default_factory=list)
    strategy_weights: Dict[str, float] = field(default_factory=dict)
    metadata: Dict[str, Any] = field(default_factory=dict)
    risk_score: float = 0.0

class SignalProcessor:
    """
    ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –°–ò–ì–ù–ê–õ–û–í
    
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–µ—Å–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –í–•–û–î–Ø–©–ò–ï      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –í–ê–õ–ò–î–ê–¶–ò–Ø      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –§–ò–õ–¨–¢–†–ê–¶–ò–Ø    ‚îÇ
    ‚îÇ   –°–ò–ì–ù–ê–õ–´       ‚îÇ    ‚îÇ   - –ö–∞—á–µ—Å—Ç–≤–æ     ‚îÇ    ‚îÇ   - –î—É–±–ª–∏–∫–∞—Ç—ã   ‚îÇ
    ‚îÇ   - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏   ‚îÇ    ‚îÇ   - –ü–æ–ª–Ω–æ—Ç–∞      ‚îÇ    ‚îÇ   - –°–ª–∞–±—ã–µ       ‚îÇ
    ‚îÇ   - ML –º–æ–¥–µ–ª–∏   ‚îÇ    ‚îÇ   - –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å   ‚îÇ    ‚îÇ   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ   ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚îÇ                        ‚îÇ                        ‚îÇ
             ‚ñº                        ‚ñº                        ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –ê–ì–†–ï–ì–ê–¶–ò–Ø     ‚îÇ    ‚îÇ   –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø  ‚îÇ    ‚îÇ   –ò–°–ü–û–õ–ù–ï–ù–ò–ï    ‚îÇ
    ‚îÇ   - –ö–æ–Ω—Å–µ–Ω—Å—É—Å   ‚îÇ    ‚îÇ   - –ö–∞—á–µ—Å—Ç–≤–æ     ‚îÇ    ‚îÇ   - –õ—É—á—à–∏–µ      ‚îÇ
    ‚îÇ   - –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è‚îÇ    ‚îÇ   - –°—Ä–æ—á–Ω–æ—Å—Ç—å    ‚îÇ    ‚îÇ   - –í–æ–≤—Ä–µ–º—è     ‚îÇ
    ‚îÇ   - –í–µ—Å–∞        ‚îÇ    ‚îÇ   - –†–∏—Å–∫–∏        ‚îÇ    ‚îÇ   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ   ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self, max_signal_age_minutes: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            max_signal_age_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.max_signal_age = timedelta(minutes=max_signal_age_minutes)
        self.processed_signals = deque(maxlen=1000)
        self.signal_cache = {}
        self.last_signals_by_strategy = defaultdict(lambda: None)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._load_settings()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self._initialize_strategy_weights()
        
        logger.info("‚úÖ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {CONFIG_AVAILABLE}")
        logger.info(f"üéØ Min confidence: {self.min_confidence}")
    
    def _load_settings(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if CONFIG_AVAILABLE and config:
            try:
                self.min_confidence = getattr(config, 'MIN_STRATEGY_CONFIDENCE', 0.6)
            except:
                self.min_confidence = 0.6
        else:
            self.min_confidence = 0.6
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.consensus_threshold = 0.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.max_conflicting_ratio = 0.3  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        
        logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: min_confidence={self.min_confidence}")
    
    def _initialize_strategy_weights(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –í–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_weights = {
            'multi_indicator': 0.25,  # 25%
            'momentum': 0.20,         # 20%
            'mean_reversion': 0.15,   # 15%
            'breakout': 0.15,         # 15%
            'scalping': 0.10,         # 10%
            'swing': 0.10,            # 10%
            'ml_prediction': 0.05     # 5%
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if CONFIG_AVAILABLE and config:
            try:
                config_weights = {}
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                weight_attributes = [
                    ('multi_indicator', 'WEIGHT_MULTI_INDICATOR'),
                    ('momentum', 'WEIGHT_MOMENTUM'),
                    ('mean_reversion', 'WEIGHT_MEAN_REVERSION'),
                    ('breakout', 'WEIGHT_BREAKOUT'),
                    ('scalping', 'WEIGHT_SCALPING'),
                    ('swing', 'WEIGHT_SWING'),
                    ('ml_prediction', 'WEIGHT_ML_PREDICTION')
                ]
                
                for strategy_name, attr_name in weight_attributes:
                    try:
                        weight = getattr(config, attr_name, default_weights[strategy_name])
                        config_weights[strategy_name] = float(weight)
                    except (AttributeError, ValueError):
                        config_weights[strategy_name] = default_weights[strategy_name]
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {attr_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤–µ—Å–æ–≤
                total_weight = sum(config_weights.values())
                if abs(total_weight - 1.0) > 0.01:
                    logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –≤–µ—Å–æ–≤ ({total_weight:.3f}) != 1.0, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º")
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
                    for strategy in config_weights:
                        config_weights[strategy] /= total_weight
                
                self.strategy_weights = config_weights
                logger.info("‚úÖ –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                self.strategy_weights = default_weights
        else:
            self.strategy_weights = default_weights
            logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å–∞
        logger.info("‚öñÔ∏è –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        for strategy, weight in self.strategy_weights.items():
            logger.info(f"   {strategy}: {weight:.2%}")
    
    async def process_signal(self, signal: TradingSignal, strategy_name: str,
                           symbol: str) -> Optional[ProcessedSignal]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            ProcessedSignal –∏–ª–∏ None –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω
        """
        try:
            logger.debug(
                f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {strategy_name}: {signal.action} "
                f"–¥–ª—è {symbol} (confidence: {signal.confidence:.2f})"
            )
            
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            validation_results = await self._validate_signal(signal, strategy_name, symbol)
            if not validation_results['is_valid']:
                logger.debug(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {validation_results['reason']}")
                return None
            
            # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            quality = self._determine_signal_quality(signal, validation_results)
            
            # –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            adjusted_confidence = self._adjust_confidence(
                signal, strategy_name, validation_results
            )
            
            # –®–∞–≥ 4: –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority = self._calculate_priority(signal, strategy_name, quality)
            
            # –®–∞–≥ 5: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
            risk_score = await self._assess_risk(signal, symbol)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            processed = ProcessedSignal(
                original_signal=signal,
                strategy_name=strategy_name,
                symbol=symbol,
                quality=quality,
                confidence_adjusted=adjusted_confidence,
                priority=priority,
                risk_score=risk_score,
                timestamp=datetime.utcnow(),
                validation_results=validation_results,
                status=SignalStatus.VALIDATED,
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                contributing_strategies=[strategy_name],
                strategy_weights={strategy_name: self.strategy_weights.get(strategy_name, 1.0)},
                metadata={
                    'processor_version': '2.0',
                    'config_available': CONFIG_AVAILABLE
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à–µ
            self._cache_signal(processed)
            
            logger.info(
                f"‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {strategy_name} ‚Üí {signal.action} "
                f"(quality: {quality.value}, priority: {priority})"
            )
            
            return processed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def aggregate_signals(self, signals: List[ProcessedSignal],
                              symbol: str) -> Optional[AggregatedSignal]:
        """
        ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π
        
        Args:
            signals: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            AggregatedSignal –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        """
        try:
            if not signals:
                return None
            
            logger.debug(f"üîÑ –ê–≥—Ä–µ–≥–∞—Ü–∏—è {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            valid_signals = self._filter_valid_signals(signals)
            if not valid_signals:
                logger.debug(f"‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            actions_groups = self._group_signals_by_action(valid_signals)
            
            # –ò—â–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            consensus_action, consensus_signals = self._find_consensus(actions_groups)
            if not consensus_action:
                logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è {symbol}")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            aggregated_params = self._calculate_aggregated_parameters(consensus_signals)
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            aggregated = AggregatedSignal(
                symbol=symbol,
                action=consensus_action,
                confidence=aggregated_params['confidence'],
                strategies_count=len(consensus_signals),
                strategy_names=[s.strategy_name for s in consensus_signals],
                individual_signals=consensus_signals,
                consensus_strength=len(consensus_signals) / len(valid_signals),
                conflicting_signals=len(valid_signals) - len(consensus_signals),
                avg_stop_loss=aggregated_params['stop_loss'],
                avg_take_profit=aggregated_params['take_profit'],
                recommended_position_size=aggregated_params['position_size'],
                timestamp=datetime.utcnow(),
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                price=aggregated_params.get('price', 0.0),
                contributing_strategies=[s.strategy_name for s in consensus_signals],
                strategy_weights=self._get_contributing_weights(consensus_signals),
                metadata={
                    'aggregation_method': 'weighted_consensus',
                    'total_signals': len(signals),
                    'valid_signals': len(valid_signals),
                    'processor_version': '2.0'
                },
                risk_score=self._calculate_aggregated_risk(consensus_signals)
            )
            
            logger.info(
                f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {consensus_action} "
                f"(—Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(consensus_signals)}, –∫–æ–Ω—Å–µ–Ω—Å—É—Å: {aggregated.consensus_strength:.2f})"
            )
            
            return aggregated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return None
    
    def _get_contributing_weights(self, signals: List[ProcessedSignal]) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å–∞ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        weights = {}
        for signal in signals:
            strategy = signal.strategy_name
            weights[strategy] = self.strategy_weights.get(strategy, 1.0)
        return weights
    
    def _calculate_aggregated_risk(self, signals: List[ProcessedSignal]) -> float:
        """–†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞"""
        if not signals:
            return 0.5
        
        # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫
        total_weight = sum(self.strategy_weights.get(s.strategy_name, 1.0) for s in signals)
        if total_weight == 0:
            return 0.5
        
        weighted_risk = sum(
            s.risk_score * self.strategy_weights.get(s.strategy_name, 1.0)
            for s in signals
        ) / total_weight
        
        return weighted_risk
    
    async def _validate_signal(self, signal: TradingSignal, strategy_name: str, 
                             symbol: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
            if not signal.symbol or not signal.action:
                return {'is_valid': False, 'reason': '–ù–µ–ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if signal.action not in ['BUY', 'SELL', 'HOLD', 'WAIT']:
                return {'is_valid': False, 'reason': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {signal.action}'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal.confidence < self.min_confidence:
                return {'is_valid': False, 'reason': f'–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞
            if datetime.utcnow() - signal.timestamp > self.max_signal_age:
                return {'is_valid': False, 'reason': '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            if signal.price <= 0:
                return {'is_valid': False, 'reason': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {signal.price}'}
            
            return {
                'is_valid': True,
                'checks_passed': ['symbol', 'action', 'confidence', 'age', 'price'],
                'signal_age_seconds': (datetime.utcnow() - signal.timestamp).total_seconds()
            }
            
        except Exception as e:
            return {'is_valid': False, 'reason': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}'}
    
    def _determine_signal_quality(self, signal: TradingSignal, 
                                validation_results: Dict[str, Any]) -> SignalQuality:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        confidence = signal.confidence
        
        if confidence >= 0.8:
            return SignalQuality.EXCELLENT
        elif confidence >= 0.6:
            return SignalQuality.GOOD
        elif confidence >= 0.4:
            return SignalQuality.AVERAGE
        elif confidence >= 0.2:
            return SignalQuality.POOR
        else:
            return SignalQuality.INVALID
    
    def _adjust_confidence(self, signal: TradingSignal, strategy_name: str,
                         validation_results: Dict[str, Any]) -> float:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        base_confidence = signal.confidence
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_weight = self.strategy_weights.get(strategy_name, 1.0)
        adjusted = base_confidence * strategy_weight
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
        signal_age = validation_results.get('signal_age_seconds', 0)
        age_factor = max(0.5, 1.0 - (signal_age / 300))  # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
        
        return min(1.0, adjusted * age_factor)
    
    def _calculate_priority(self, signal: TradingSignal, strategy_name: str,
                          quality: SignalQuality) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        quality_priority = {
            SignalQuality.EXCELLENT: 10,
            SignalQuality.GOOD: 8,
            SignalQuality.AVERAGE: 6,
            SignalQuality.POOR: 4,
            SignalQuality.INVALID: 1
        }
        
        base_priority = quality_priority.get(quality, 1)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy_weight = self.strategy_weights.get(strategy_name, 1.0)
        strategy_bonus = int(strategy_weight * 2)
        
        return min(10, base_priority + strategy_bonus)
    
    async def _assess_risk(self, signal: TradingSignal, symbol: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        base_risk = 1.0 - signal.confidence
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞, –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ —Ç.–¥.
        
        return max(0.0, min(1.0, base_risk))
    
    def _cache_signal(self, signal: ProcessedSignal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∫–µ—à"""
        cache_key = f"{signal.strategy_name}_{signal.symbol}_{signal.original_signal.action}"
        self.signal_cache[cache_key] = signal
        self.last_signals_by_strategy[signal.strategy_name] = signal
        self.processed_signals.append(signal)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self._cleanup_old_signals()
    
    def _cleanup_old_signals(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–µ—à–∞"""
        current_time = datetime.utcnow()
        keys_to_remove = []
        
        for key, signal in self.signal_cache.items():
            if current_time - signal.timestamp > self.max_signal_age:
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.signal_cache[key]
    
    def _filter_valid_signals(self, signals: List[ProcessedSignal]) -> List[ProcessedSignal]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            valid = []
            current_time = datetime.utcnow()
            
            for signal in signals:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                if current_time - signal.timestamp > self.max_signal_age:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if signal.quality in [SignalQuality.INVALID, SignalQuality.POOR]:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ WAIT —Å–∏–≥–Ω–∞–ª—ã
                if signal.original_signal.action == 'WAIT':
                    continue
                
                valid.append(signal)
            
            return valid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return signals
    
    def _group_signals_by_action(self, signals: List[ProcessedSignal]) -> Dict[str, List[ProcessedSignal]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º"""
        groups = defaultdict(list)
        
        for signal in signals:
            action = signal.original_signal.action
            groups[action].append(signal)
        
        return dict(groups)
    
    def _find_consensus(self, actions_groups: Dict[str, List[ProcessedSignal]]) -> Tuple[Optional[str], List[ProcessedSignal]]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not actions_groups:
                return None, []
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
            weighted_votes = {}
            
            for action, signals in actions_groups.items():
                total_weight = sum(
                    signal.confidence_adjusted * self.strategy_weights.get(signal.strategy_name, 1.0)
                    for signal in signals
                )
                weighted_votes[action] = total_weight
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            best_action = max(weighted_votes.keys(), key=lambda x: weighted_votes[x])
            best_signals = actions_groups[best_action]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            total_weight = sum(weighted_votes.values())
            consensus_ratio = weighted_votes[best_action] / total_weight if total_weight > 0 else 0
            
            if consensus_ratio >= self.consensus_threshold:
                return best_action, best_signals
            else:
                return None, []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {e}")
            return None, []
    
    def _calculate_aggregated_parameters(self, signals: List[ProcessedSignal]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if not signals:
                return {
                    'confidence': 0.0,
                    'stop_loss': 0.0,
                    'take_profit': 0.0,
                    'position_size': 0.0,
                    'price': 0.0
                }
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            total_weight = sum(s.confidence_adjusted for s in signals)
            
            if total_weight == 0:
                weights = [1/len(signals)] * len(signals)
            else:
                weights = [s.confidence_adjusted / total_weight for s in signals]
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = sum(s.confidence_adjusted * w for s, w in zip(signals, weights))
            
            # –°—Ä–µ–¥–Ω–∏–µ stop_loss –∏ take_profit
            stop_losses = [getattr(s.original_signal, 'stop_loss', None) for s in signals]
            take_profits = [getattr(s.original_signal, 'take_profit', None) for s in signals]
            prices = [s.original_signal.price for s in signals]
            
            stop_loss = np.mean([sl for sl in stop_losses if sl is not None]) if any(stop_losses) else 0.0
            take_profit = np.mean([tp for tp in take_profits if tp is not None]) if any(take_profits) else 0.0
            price = np.mean(prices) if prices else 0.0
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            position_size = min(1.0, confidence * len(signals) / 3)
            
            return {
                'confidence': confidence,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'position_size': position_size,
                'price': price
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {
                'confidence': 0.0,
                'stop_loss': 0.0,
                'take_profit': 0.0,
                'position_size': 0.0,
                'price': 0.0
            }
    
    def get_recent_signals(self, symbol: Optional[str] = None, 
                         strategy: Optional[str] = None,
                         limit: int = 10) -> List[ProcessedSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            signals = list(self.processed_signals)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É
            if symbol:
                signals = [s for s in signals if s.symbol == symbol]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if strategy:
                signals = [s for s in signals if s.strategy_name == strategy]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            signals.sort(key=lambda x: x.timestamp, reverse=True)
            
            return signals[:limit]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        try:
            total_signals = len(self.processed_signals)
            
            if total_signals == 0:
                return {
                    'total_processed': 0,
                    'quality_distribution': {},
                    'strategy_distribution': {},
                    'avg_confidence': 0.0,
                    'strategy_weights': self.strategy_weights.copy(),
                    'config_available': CONFIG_AVAILABLE
                }
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            quality_dist = defaultdict(int)
            for signal in self.processed_signals:
                quality_dist[signal.quality.value] += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_dist = defaultdict(int)
            for signal in self.processed_signals:
                strategy_dist[signal.strategy_name] += 1
            
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            avg_confidence = np.mean([
                s.confidence_adjusted for s in self.processed_signals
            ])
            
            return {
                'total_processed': total_signals,
                'quality_distribution': dict(quality_dist),
                'strategy_distribution': dict(strategy_dist),
                'avg_confidence': avg_confidence,
                'active_signals': len(self.signal_cache),
                'strategy_weights': self.strategy_weights.copy(),
                'min_confidence': self.min_confidence,
                'consensus_threshold': self.consensus_threshold,
                'config_available': CONFIG_AVAILABLE
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'error': str(e),
                'config_available': CONFIG_AVAILABLE
            }

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
signal_processor = None

def get_signal_processor() -> SignalProcessor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global signal_processor
    
    if signal_processor is None:
        signal_processor = SignalProcessor()
    
    return signal_processor

def create_signal_processor(**kwargs) -> SignalProcessor:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    return SignalProcessor(**kwargs)

# ‚úÖ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
signal_processor = SignalProcessor()

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'SignalProcessor',
    'ProcessedSignal',
    'AggregatedSignal',
    'SignalQuality',
    'SignalStatus',
    'TradingSignal',
    'get_signal_processor',
    'create_signal_processor',
    'signal_processor'
]