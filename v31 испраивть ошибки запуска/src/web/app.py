# –§–∞–π–ª: src/web/app.py
# ‚ö†Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø, –ü–û–õ–ù–ê–Ø –ò –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø. –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–® –§–ê–ô–õ –≠–¢–ò–ú –ö–û–î–û–ú.

import os
import logging
import atexit
from datetime import datetime, timedelta
from flask import Flask, render_template, jsonify, request, redirect, url_for, session
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_socketio import SocketIO, emit
from flask_cors import CORS

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from ..core.database import SessionLocal
from ..core.models import User
from ..core.unified_config import unified_config as config
from .websocket_server import init_websocket

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Singleton-—ç–∫–∑–µ–º–ø–ª—è—Ä `bot_manager`.
try:
    from ..bot.manager import bot_manager
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotManager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError as e:
    logger.critical(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ú–ü–û–†–¢–ò–†–û–í–ê–¢–¨ BotManager: {e}. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
    bot_manager = None

try:
    from ..exchange.unified_exchange import UnifiedExchangeClient as ExchangeClient
    exchange_client = ExchangeClient()
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π ExchangeClient (–¥–ª—è API) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except ImportError as e:
    logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ExchangeClient: {e}. API, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–µ–π, –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    exchange_client = None

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
app: Flask = None
socketio: SocketIO = None
login_manager: LoginManager = None

def create_app() -> tuple[Flask, SocketIO]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    global app, socketio, login_manager

    app = Flask(__name__, template_folder='templates', static_folder='static')

    # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask ---
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'a-very-secret-key-that-you-should-change')
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)
    CORS(app, resources={r"/*": {"origins": "*"}})

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π ---
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SocketIO
    socketio = SocketIO(
        app,  # ‚úÖ –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º app –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        cors_allowed_origins="*",
        async_mode='threading',
        ping_timeout=60,
        ping_interval=25,
        max_http_buffer_size=1000000,
        engineio_logger=False,
        logger=False
    )
    
    login_manager = LoginManager()
    login_manager.init_app(app)
    login_manager.login_view = 'login'

    @login_manager.user_loader
    def load_user(user_id: int) -> User:
        db = SessionLocal()
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ primary key, —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ
            return db.query(User).get(int(user_id))
        finally:
            db.close()

    # ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ app =====
    with app.app_context():
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
        register_page_routes(app)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API
        from .unified_api import signals_api_bp
        app.register_blueprint(signals_api_bp)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_websocket_handlers(socketio)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        register_app_handlers(app)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    def cleanup():
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—á–∏—Å—Ç–∫–∏...")
        if bot_manager and hasattr(bot_manager, 'is_running') and bot_manager.is_running:
            logger.info("... –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±–æ—Ç—É ...")
            bot_manager.stop()
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    atexit.register(cleanup)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    log_registered_routes(app)

    logger.info("üöÄ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É.")
    return app, socketio

def register_page_routes(app_instance: Flask):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    logger.info("... –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü ...")
    
    @app_instance.route('/')
    def index():
        return redirect(url_for('dashboard')) if current_user.is_authenticated else redirect(url_for('login'))

    @app_instance.route('/login', methods=['GET', 'POST'])
    def login():
        # ‚úÖ –ü–û–õ–ù–´–ô –ö–û–î –§–£–ù–ö–¶–ò–ò LOGIN
        if current_user.is_authenticated:
            return redirect(url_for('dashboard'))

        if request.method == 'POST':
            data = request.get_json() if request.is_json else request.form
            username = data.get('username')
            password = data.get('password')
            
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.username == username).first()
                if user and user.check_password(password):
                    if user.is_blocked:
                        message = '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
                        if request.is_json: return jsonify({'success': False, 'message': message}), 403
                        return render_template('login.html', error=message)

                    login_user(user, remember=True)
                    user.last_login = datetime.utcnow()
                    user.failed_login_attempts = 0
                    db.commit()
                    
                    if request.is_json: return jsonify({'success': True, 'redirect': url_for('dashboard')})
                    return redirect(url_for('dashboard'))
                else:
                    if user:
                        user.failed_login_attempts += 1
                        if user.failed_login_attempts >= 5:
                            user.is_blocked = True
                            user.blocked_at = datetime.utcnow()
                        db.commit()
                    
                    message = '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
                    if request.is_json: return jsonify({'success': False, 'message': message}), 401
                    return render_template('login.html', error=message)
            finally:
                db.close()
        
        return render_template('login.html')

    @app_instance.route('/logout')
    @login_required
    def logout():
        # ‚úÖ –ü–û–õ–ù–´–ô –ö–û–î –§–£–ù–ö–¶–ò–ò LOGOUT
        logout_user()
        return redirect(url_for('login'))

    @app_instance.route('/dashboard')
    @login_required
    def dashboard(): return render_template('dashboard.html')

    @app_instance.route('/charts')
    @login_required
    def charts_page(): return render_template('charts.html')

    @app_instance.route('/analytics')
    @login_required
    def analytics_page(): return render_template('analytics.html')
    
    @app.route('/signals')
    def signals_page():
        return render_template('signals.html')

    @app_instance.route('/news')
    @login_required
    def news(): return render_template('news.html')

    @app_instance.route('/settings')
    @login_required
    def settings(): return render_template('settings.html')


def register_websocket_handlers(socketio_instance: SocketIO):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ WebSocket."""
    logger.info("... –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ...")

    @socketio_instance.on('connect')
    def handle_connect():
        logger.info(f"WebSocket client connected: {request.sid}")

    @socketio_instance.on('disconnect')
    def handle_disconnect(*args): # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            client_sid = request.sid if hasattr(request, 'sid') else 'unknown'
            logger.info(f"WebSocket client disconnected: {client_sid}")
        except Exception as e:
            logger.debug(f"WebSocket disconnect handled: {e}")

    @socketio_instance.on_error_default
    def error_handler(e):
        logger.error(f"WebSocket Error: {e}", exc_info=True)

def register_app_handlers(app_instance: Flask):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("... –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ...")

    @app_instance.errorhandler(404)
    def not_found_error(error):
        if request.path.startswith('/api/'):
            return jsonify({'success': False, 'error': 'Endpoint not found'}), 404
        return render_template('404.html'), 404

    @app_instance.errorhandler(500)
    def internal_error(error):
        logger.error(f"Internal Server Error on {request.path}: {error}", exc_info=True)
        if request.path.startswith('/api/'):
            return jsonify({'success': False, 'error': 'An internal server error occurred.'}), 500
        return render_template('500.html'), 500

    @app_instance.before_request
    def before_request():
        session.permanent = True

def log_registered_routes(app_instance: Flask):
    """–í—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    rules = sorted(app_instance.url_map.iter_rules(), key=lambda r: r.rule)
    for rule in rules:
        methods = ','.join(sorted(rule.methods))
        logger.info(f"   - {rule.endpoint:30s} {methods:30s} -> {rule.rule}")

__all__ = ['create_app']