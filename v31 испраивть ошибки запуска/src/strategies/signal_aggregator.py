#!/usr/bin/env python3
"""
–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/strategies/signal_aggregator.py

–§—É–Ω–∫—Ü–∏–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º
- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
- –£—á–µ—Ç –≤–µ—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
import json
import numpy as np
from collections import defaultdict

from ..core.database import SessionLocal
from ..core.signal_models import (
    SignalExtended, SignalType, AggregatedSignal, FinalSignalType
)
from ..core.unified_config import unified_config as config

logger = logging.getLogger(__name__)

@dataclass
class StrategyWeight:
    """–í–µ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    name: str
    weight: float  # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    reliability: float  # –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (0-1)
    min_confidence: float  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞
    priority: int  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)
    
@dataclass
class SignalGroup:
    """–ì—Ä—É–ø–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    symbol: str
    signals: List[SignalExtended] = field(default_factory=list)
    buy_count: int = 0
    sell_count: int = 0
    neutral_count: int = 0
    total_confidence: float = 0.0
    weighted_confidence: float = 0.0
    timestamp: datetime = field(default_factory=datetime.utcnow)

class SignalAggregator:
    """
    –°–µ—Ä–≤–∏—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    # –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    STRATEGY_WEIGHTS = {
        'whale_hunting': StrategyWeight(
            name='whale_hunting',
            weight=1.5,
            reliability=0.75,
            min_confidence=0.3,
            priority=8
        ),
        'sleeping_giants': StrategyWeight(
            name='sleeping_giants',
            weight=1.2,
            reliability=0.8,
            min_confidence=0.4,
            priority=7
        ),
        'order_book_analysis': StrategyWeight(
            name='order_book_analysis',
            weight=1.0,
            reliability=0.7,
            min_confidence=0.35,
            priority=6
        ),
        'technical_analysis': StrategyWeight(
            name='technical_analysis',
            weight=0.8,
            reliability=0.65,
            min_confidence=0.4,
            priority=5
        )
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        self.db = SessionLocal()
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.check_interval = 10  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.aggregation_window = 60  # –û–∫–Ω–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.min_signals_required = 2  # –ú–∏–Ω–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        
        # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = set()
        self.last_aggregation = {}
        
        logger.info("üìä SignalAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ SignalAggregator")
        self.is_running = True
        
        while self.is_running:
            try:
                await self._aggregate_signals()
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(30)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SignalAggregator")
        self.is_running = False
        
        if self.db:
            self.db.close()
    
    async def _aggregate_signals(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–∫–Ω–æ
            window_start = datetime.utcnow() - timedelta(seconds=self.aggregation_window)
            
            signals = self.db.query(SignalExtended).filter(
                SignalExtended.created_at >= window_start,
                SignalExtended.id.notin_(self.processed_signals)
            ).all()
            
            if not signals:
                return
            
            logger.info(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            signal_groups = self._group_signals_by_symbol(signals)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for symbol, group in signal_groups.items():
                if len(group.signals) >= self.min_signals_required:
                    aggregated = await self._process_signal_group(group)
                    
                    if aggregated:
                        self._save_aggregated_signal(aggregated, group)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –∫—ç—à
            for signal in signals:
                self.processed_signals.add(signal.id)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
            self._cleanup_cache()
            
            self.db.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
            self.db.rollback()
    
    def _group_signals_by_symbol(self, signals: List[SignalExtended]) -> Dict[str, SignalGroup]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
        groups = defaultdict(lambda: SignalGroup(symbol=''))
        
        for signal in signals:
            group = groups[signal.symbol]
            group.symbol = signal.symbol
            group.signals.append(signal)
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            if signal.signal_type == SignalType.BUY:
                group.buy_count += 1
            elif signal.signal_type == SignalType.SELL:
                group.sell_count += 1
            else:
                group.neutral_count += 1
            
            # –°—É–º–º–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            group.total_confidence += signal.confidence
        
        return dict(groups)
    
    async def _process_signal_group(self, group: SignalGroup) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            weighted_buy = 0.0
            weighted_sell = 0.0
            total_weight = 0.0
            
            strategy_signals = {}  # –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            
            for signal in group.signals:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_weight = self.STRATEGY_WEIGHTS.get(
                    signal.strategy,
                    StrategyWeight(signal.strategy, 1.0, 0.5, 0.3, 5)
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                if signal.confidence < strategy_weight.min_confidence:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≤–µ—Å
                effective_weight = (
                    strategy_weight.weight * 
                    strategy_weight.reliability * 
                    signal.confidence
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–∏–ø—É
                if signal.signal_type == SignalType.BUY:
                    weighted_buy += effective_weight
                elif signal.signal_type == SignalType.SELL:
                    weighted_sell += effective_weight
                
                total_weight += effective_weight
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                strategy_signals[signal.strategy] = {
                    'signal': signal,
                    'weight': effective_weight,
                    'priority': strategy_weight.priority
                }
            
            if total_weight == 0:
                return None
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
            buy_score = weighted_buy / total_weight
            sell_score = weighted_sell / total_weight
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            final_signal, confidence = self._determine_final_signal(
                buy_score, sell_score, group, strategy_signals
            )
            
            if final_signal == FinalSignalType.NEUTRAL:
                return None  # –ù–µ —Å–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = self._generate_metadata(group, strategy_signals)
            
            return {
                'symbol': group.symbol,
                'final_signal': final_signal,
                'confidence_score': confidence,
                'buy_score': buy_score,
                'sell_score': sell_score,
                'contributing_signals': [s.id for s in group.signals],
                'details': metadata
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group.symbol}: {e}")
            return None
    
    def _determine_final_signal(self, buy_score: float, sell_score: float, 
                                group: SignalGroup, 
                                strategy_signals: Dict) -> Tuple[FinalSignalType, float]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        signal_diff = buy_score - sell_score
        abs_diff = abs(signal_diff)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_count = len(strategy_signals)
        consensus_factor = min(strategy_count / 3, 1.0)  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏ 3+ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        base_confidence = abs_diff * consensus_factor
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        max_priority = max(s['priority'] for s in strategy_signals.values())
        priority_factor = 0.5 + (max_priority / 10) * 0.5  # –û—Ç 0.5 –¥–æ 1.0
        
        confidence = min(base_confidence * priority_factor, 1.0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        if signal_diff > 0.6 and confidence > 0.7:
            return FinalSignalType.STRONG_BUY, confidence
        elif signal_diff > 0.3:
            return FinalSignalType.BUY, confidence
        elif signal_diff < -0.6 and confidence > 0.7:
            return FinalSignalType.STRONG_SELL, confidence
        elif signal_diff < -0.3:
            return FinalSignalType.SELL, confidence
        else:
            return FinalSignalType.NEUTRAL, confidence
    
    def _generate_metadata(self, group: SignalGroup, 
                          strategy_signals: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –≤–µ—Å—É
        sorted_strategies = sorted(
            strategy_signals.items(),
            key=lambda x: x[1]['weight'],
            reverse=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏—Ö –≤–∫–ª–∞–¥–æ–º
        strategy_contributions = []
        for strategy_name, data in sorted_strategies:
            signal = data['signal']
            contribution = {
                'strategy': strategy_name,
                'signal_type': signal.signal_type.value,
                'confidence': signal.confidence,
                'weight': data['weight'],
                'reason': signal.reason
            }
            strategy_contributions.append(contribution)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        confidences = [s.confidence for s in group.signals]
        
        metadata = {
            'total_signals': len(group.signals),
            'buy_signals': group.buy_count,
            'sell_signals': group.sell_count,
            'strategy_contributions': strategy_contributions,
            'average_confidence': np.mean(confidences),
            'confidence_std': np.std(confidences),
            'aggregation_timestamp': datetime.utcnow().isoformat(),
            'window_seconds': self.aggregation_window
        }
        
        return metadata
    
    def _save_aggregated_signal(self, aggregated_data: Dict[str, Any], 
                               group: SignalGroup):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Ö–æ–∂–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            recent_check = datetime.utcnow() - timedelta(minutes=5)
            existing = self.db.query(AggregatedSignal).filter(
                AggregatedSignal.symbol == aggregated_data['symbol'],
                AggregatedSignal.created_at >= recent_check
            ).first()
            
            if existing and existing.final_signal == aggregated_data['final_signal']:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
                existing.confidence_score = max(
                    existing.confidence_score,
                    aggregated_data['confidence_score']
                )
                existing.updated_at = datetime.utcnow()
                logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª {existing.symbol}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            agg_signal = AggregatedSignal(
                symbol=aggregated_data['symbol'],
                final_signal=aggregated_data['final_signal'],
                confidence_score=aggregated_data['confidence_score'],
                contributing_signals=aggregated_data['contributing_signals'],
                buy_signals_count=group.buy_count,
                sell_signals_count=group.sell_count,
                neutral_signals_count=group.neutral_count,
                details=aggregated_data['metadata']
            )
            
            self.db.add(agg_signal)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            self.last_aggregation[aggregated_data['symbol']] = datetime.utcnow()
            
            logger.info(
                f"üéØ –ù–æ–≤—ã–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {agg_signal.symbol} "
                f"{agg_signal.final_signal.value} (confidence: {agg_signal.confidence_score:.2f})"
            )
            
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Å–∏–ª—å–Ω—ã–π, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (agg_signal.final_signal in [FinalSignalType.STRONG_BUY, FinalSignalType.STRONG_SELL] 
                and agg_signal.confidence_score > 0.8):
                logger.warning(
                    f"‚ö° –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: {agg_signal.symbol} "
                    f"{agg_signal.final_signal.value} ({agg_signal.confidence_score:.2f})"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            raise
    
    def _cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ ID –∏–∑ –∫—ç—à–∞ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        if len(self.processed_signals) > 10000:
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            self.processed_signals = set(list(self.processed_signals)[-5000:])
    
    def get_latest_aggregated_signals(self, limit: int = 20) -> List[AggregatedSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            return self.db.query(AggregatedSignal).order_by(
                AggregatedSignal.created_at.desc()
            ).limit(limit).all()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        try:
            since_24h = datetime.utcnow() - timedelta(hours=24)
            
            total_aggregated = self.db.query(AggregatedSignal).filter(
                AggregatedSignal.created_at >= since_24h
            ).count()
            
            by_type = self.db.query(
                AggregatedSignal.final_signal,
                self.db.func.count(AggregatedSignal.id)
            ).filter(
                AggregatedSignal.created_at >= since_24h
            ).group_by(
                AggregatedSignal.final_signal
            ).all()
            
            type_stats = {t.value: c for t, c in by_type}
            
            return {
                'is_running': self.is_running,
                'period': '24h',
                'total_aggregated_signals': total_aggregated,
                'signals_by_type': type_stats,
                'cached_processed_signals': len(self.processed_signals),
                'active_strategies': len(self.STRATEGY_WEIGHTS)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
async def main():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    aggregator = SignalAggregator()
    
    try:
        await aggregator.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await aggregator.stop()

if __name__ == "__main__":
    asyncio.run(main())
