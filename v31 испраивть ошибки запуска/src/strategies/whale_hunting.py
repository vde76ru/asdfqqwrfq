#!/usr/bin/env python3
"""
–°—Ç—Ä–∞—Ç–µ–≥–∏—è "–û—Ö–æ—Ç–∞ –Ω–∞ –∫–∏—Ç–æ–≤" (Whale Hunting)
–§–∞–π–ª: src/strategies/whale_hunting.py

–õ–æ–≥–∏–∫–∞:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã whale_transactions
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –£—á–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from decimal import Decimal
from dataclasses import dataclass

from sqlalchemy import desc, and_, func
from sqlalchemy.orm import Session

# =================================================================
# üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
# =================================================================
from ..core.database import SessionLocal
from ..core.unified_config import unified_config as config
from ..core.models import (
    WhaleTransaction,
    TransactionTypeEnum,
    Signal,  # <-- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å Signal
    WhaleAddress,
    WhaleReputationTypeEnum, # <-- –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Enum
    SignalTypeEnum
)
from .base import BaseStrategy # <-- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
from ..exchange import get_exchange_client
from ..api_clients.onchain_data_producer import OnchainDataProducer


logger = logging.getLogger(__name__)


@dataclass
class WhaleReputation:
    """–†–µ–ø—É—Ç–∞—Ü–∏—è –∫–∏—Ç–∞"""
    address: str
    reputation_type: WhaleReputationTypeEnum # <-- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Enum –∏–∑ –º–æ–¥–µ–ª–µ–π
    win_rate: float
    total_transactions: int
    total_volume_usd: Decimal
    confidence_modifier: float  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏


class WhaleHuntingStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–∏—Ç–æ–≤
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
    - –î–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –±–∏—Ä–∂–∏ = —Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ
    - –í—ã–≤–æ–¥—ã —Å –±–∏—Ä–∂ = —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ
    - –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —É–º–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ = —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ
    """
    
    def __init__(self, 
                 name: str = "whale_hunting",
                 min_usd_value: float = 100_000,
                 exchange_flow_threshold: float = 500_000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            min_usd_value: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (USD)
            exchange_flow_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –±–∏—Ä–∂–µ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (USD)
        """
        super().__init__(name)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.min_usd_value = getattr(config, 'WHALE_MIN_USD_VALUE', min_usd_value)
        self.exchange_flow_threshold = exchange_flow_threshold
        self.lookback_hours = getattr(config, 'WHALE_LOOKBACK_HOURS', 24)
        self.confidence_base = getattr(config, 'WHALE_SIGNAL_CONFIDENCE', 0.7)
        
        # –ö—ç—à —Ä–µ–ø—É—Ç–∞—Ü–∏–π
        self.known_whales: Dict[str, WhaleReputation] = {}
        self.last_reputation_update = datetime.utcnow()
        self.reputation_update_interval = timedelta(hours=6)
        
        self.exchange_client = None # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        
        logger.info(f"‚úÖ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (min_value=${self.min_usd_value:,.0f})")
        
    async def _ensure_exchange_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω."""
        if self.exchange_client is None:
            self.exchange_client = await get_exchange_client()
            if self.exchange_client is None:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ExchangeClient –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

    async def generate_signals(self) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
        üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ `generate_signals` –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        """
        logger.debug(f"üîç {self.name}: –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        await self._ensure_exchange_client()
        
        db = SessionLocal()
        signals = []
        
        try:
            if datetime.utcnow() - self.last_reputation_update > self.reputation_update_interval:
                await self._update_whale_reputations(db)
            
            recent_time = datetime.utcnow() - timedelta(hours=self.lookback_hours)
            
            whale_txs = db.query(WhaleTransaction).filter(
                and_(
                    WhaleTransaction.is_processed == False,
                    WhaleTransaction.usd_value >= self.min_usd_value,
                    WhaleTransaction.timestamp >= recent_time
                )
            ).order_by(desc(WhaleTransaction.usd_value)).limit(100).all()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(whale_txs)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤")
            
            for tx in whale_txs:
                signal = await self._analyze_transaction(tx, db)
                if signal:
                    signals.append(signal)
                tx.is_processed = True
            
            accumulation_signals = await self._analyze_accumulation_patterns(db)
            signals.extend(accumulation_signals)
            
            db.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for signal_data in signals:
                await self._save_signal(signal_data)

            logger.info(f"‚úÖ {self.name}: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.name}: {e}", exc_info=True)
            db.rollback()
        finally:
            db.close()
            
        return signals
        
    async def _analyze_transaction(self, tx: WhaleTransaction, db: Session) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        signal = None
        
        from_reputation = await self._get_whale_reputation(tx.from_address, db)
        to_reputation = await self._get_whale_reputation(tx.to_address, db)
        
        confidence = self.confidence_base
        
        if tx.transaction_type == TransactionTypeEnum.EXCHANGE_DEPOSIT and tx.usd_value >= self.exchange_flow_threshold:
            signal = self._create_signal_dict(tx, 'sell', confidence * 0.8, f"üêã –ö—Ä—É–ø–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ${tx.usd_value:,.0f} –Ω–∞ –±–∏—Ä–∂—É")
            
        elif tx.transaction_type == TransactionTypeEnum.EXCHANGE_WITHDRAWAL and tx.usd_value >= self.exchange_flow_threshold:
            if to_reputation.reputation_type == WhaleReputationTypeEnum.SMART_MONEY:
                confidence *= to_reputation.confidence_modifier
            signal = self._create_signal_dict(tx, 'buy', confidence, f"ÔøΩ –ö—Ä—É–ø–Ω—ã–π –≤—ã–≤–æ–¥ ${tx.usd_value:,.0f} —Å –±–∏—Ä–∂–∏")
            
        elif tx.transaction_type == TransactionTypeEnum.TRANSFER:
            if from_reputation.reputation_type == WhaleReputationTypeEnum.SMART_MONEY and to_reputation.reputation_type == WhaleReputationTypeEnum.EXCHANGE:
                signal = self._create_signal_dict(tx, 'sell', confidence * from_reputation.confidence_modifier, f"üí° Smart money –ø–µ—Ä–µ–≤–æ–¥–∏—Ç ${tx.usd_value:,.0f} –Ω–∞ –±–∏—Ä–∂—É")
            elif to_reputation.reputation_type == WhaleReputationTypeEnum.SMART_MONEY:
                signal = self._create_signal_dict(tx, 'buy', confidence * to_reputation.confidence_modifier, f"üí° Smart money –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç ${tx.usd_value:,.0f}")
                
        return signal
        
    async def _analyze_accumulation_patterns(self, db: Session) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        signals = []
        lookback_days = 7
        start_date = datetime.utcnow() - timedelta(days=lookback_days)
        
        accumulation_query = db.query(
            WhaleTransaction.symbol,
            WhaleTransaction.to_address,
            func.sum(WhaleTransaction.usd_value).label('total_accumulated'),
            func.count(WhaleTransaction.id).label('tx_count')
        ).filter(
            and_(
                WhaleTransaction.timestamp >= start_date,
                WhaleTransaction.transaction_type.in_([TransactionTypeEnum.EXCHANGE_WITHDRAWAL, TransactionTypeEnum.TRANSFER]),
                WhaleTransaction.usd_value >= self.min_usd_value
            )
        ).group_by(WhaleTransaction.symbol, WhaleTransaction.to_address).having(func.sum(WhaleTransaction.usd_value) >= self.exchange_flow_threshold * 2).all()
        
        for row in accumulation_query:
            symbol, address, total_accumulated, tx_count = row
            reputation = await self._get_whale_reputation(address, db)
            
            if reputation.reputation_type in [WhaleReputationTypeEnum.SMART_MONEY, WhaleReputationTypeEnum.INSTITUTION]:
                confidence = self.confidence_base * reputation.confidence_modifier
                if tx_count > 3:
                    confidence *= 1.1
                
                signal = {
                    'symbol': symbol,
                    'action': 'buy',
                    'confidence': min(confidence, 0.95),
                    'reason': f"üìà –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${total_accumulated:,.0f} –∑–∞ {tx_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    'details': {
                        'pattern': 'accumulation',
                        'whale_address': address,
                        'whale_type': reputation.reputation_type.value,
                        'total_accumulated': float(total_accumulated),
                        'transaction_count': tx_count,
                        'period_days': lookback_days
                    }
                }
                signals.append(signal)
                
        return signals
        
    async def _update_whale_reputations(self, db: Session):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–π –∫–∏—Ç–æ–≤"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–π –∫–∏—Ç–æ–≤...")
        # (–õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)
        self.last_reputation_update = datetime.utcnow()
        
    async def _get_whale_reputation(self, address: str, db: Session) -> WhaleReputation:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–∏—Ç–∞"""
        address_lower = address.lower()
        if address_lower in self.known_whales:
            return self.known_whales[address_lower]
        
        whale_addr_db = db.query(WhaleAddress).filter_by(address=address_lower).first()
        
        rep_type = WhaleReputationTypeEnum.UNKNOWN
        if whale_addr_db:
            rep_type = whale_addr_db.reputation_type
        
        reputation = WhaleReputation(
            address=address_lower, reputation_type=rep_type, win_rate=0.5,
            total_transactions=whale_addr_db.total_transactions if whale_addr_db else 0,
            total_volume_usd=whale_addr_db.total_volume_usd if whale_addr_db else Decimal(0),
            confidence_modifier=1.0
        )
        self.known_whales[address_lower] = reputation
        return reputation

    def _create_signal_dict(self, tx: WhaleTransaction, action: str, confidence: float, reason: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞."""
        return {
            "symbol": tx.symbol,
            "strategy": self.name,
            "action": action,
            "confidence": confidence,
            "reason": reason,
            "details": {
                "transaction_hash": tx.transaction_hash,
                "usd_value": float(tx.usd_value),
                "whale_transaction_id": tx.id,
                'transaction_type': tx.transaction_type.value,
                'timestamp': tx.timestamp.isoformat(),
                'block_number': tx.block_number
            }
        }
        
    async def _save_signal(self, signal_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –ë–î —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã."""
        db = self.db_session_factory()
        try:
            symbol_for_ticker = signal_data['symbol'].replace('/', '')
            ticker = await self.exchange_client.get_ticker(symbol_for_ticker)
            current_price = float(ticker['last_price']) if ticker and ticker.get('last_price') else 0.0

            if current_price == 0.0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {signal_data['symbol']}, —Å–∏–≥–Ω–∞–ª –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                return

            signal = Signal(
                symbol=signal_data['symbol'],
                strategy=self.name,
                action=signal_data['action'].upper(),
                price=current_price,
                confidence=signal_data['confidence'],
                reason=signal_data['reason'],
                indicators=signal_data.get('details', {})
            )
            db.add(signal)
            db.commit()
            logger.info(f"–°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {signal.symbol} {signal.action} @ ${signal.price}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}", exc_info=True)
            db.rollback()
        finally:
            db.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    strategy = WhaleHuntingStrategy()
    
    while True:
        try:
            signals = await strategy.generate_signals()
            
            if signals:
                logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
                for signal in signals:
                    logger.info(f"  - {signal['symbol']}: {signal['action']} (confidence: {signal['confidence']:.2%})")
                    
            await asyncio.sleep(60)
            
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ main: {e}", exc_info=True)
            await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())