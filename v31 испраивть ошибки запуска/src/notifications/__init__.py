"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
===============================
–§–∞–π–ª: src/notifications/__init__.py

üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
‚úÖ –ò–º–ø–æ—Ä—Ç unified_config –≤–º–µ—Å—Ç–æ config
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
"""

import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from ..core.unified_config import unified_config as config
    CONFIG_AVAILABLE = True
    logger.info("‚úÖ unified_config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ notifications")
except ImportError as e:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å unified_config: {e}")
    CONFIG_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
    class MinimalConfig:
        TELEGRAM_ENABLED = False
        TELEGRAM_BOT_TOKEN = ""
        TELEGRAM_CHAT_ID = ""
        EMAIL_ENABLED = False
        
    config = MinimalConfig()

# ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ï –ò–ú–ü–û–†–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
try:
    from .telegram import TelegramNotifier, telegram_notifier
    TELEGRAM_AVAILABLE = True
    logger.info("‚úÖ TelegramNotifier –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è TelegramNotifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    TELEGRAM_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class TelegramNotifier:
        def __init__(self):
            self.enabled = False
        
        async def send_message(self, text: str, **kwargs):
            logger.info(f"üì± Telegram (–∑–∞–≥–ª—É—à–∫–∞): {text}")
    
    telegram_notifier = TelegramNotifier()

try:
    from .email import EmailNotifier
    EMAIL_AVAILABLE = True
    logger.info("‚úÖ EmailNotifier –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è EmailNotifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    EMAIL_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class EmailNotifier:
        def __init__(self):
            self.enabled = False
        
        async def send_email(self, subject: str, body: str, **kwargs):
            logger.info(f"üìß Email (–∑–∞–≥–ª—É—à–∫–∞): {subject}")

# ‚úÖ –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ú–ï–ù–ï–î–ñ–ï–†–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
class NotificationManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å unified_config
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.config = config
        self.telegram = telegram_notifier if TELEGRAM_AVAILABLE else TelegramNotifier()
        self.email = EmailNotifier() if EMAIL_AVAILABLE else EmailNotifier()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        self.telegram_enabled = (
            TELEGRAM_AVAILABLE and 
            getattr(config, 'TELEGRAM_ENABLED', False) and
            getattr(config, 'TELEGRAM_BOT_TOKEN', '') and
            getattr(config, 'TELEGRAM_CHAT_ID', '')
        )
        
        self.email_enabled = (
            EMAIL_AVAILABLE and 
            getattr(config, 'EMAIL_ENABLED', False)
        )
        
        logger.info(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if self.telegram_enabled else '‚ùå'}")
        logger.info(f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if self.email_enabled else '‚ùå'}")
    
    async def send_trade_notification(self, trade_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            symbol = trade_data.get('symbol', 'Unknown')
            side = trade_data.get('side', 'Unknown')
            quantity = trade_data.get('quantity', 0)
            price = trade_data.get('price', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            emoji = "üü¢" if side == "Buy" else "üî¥"
            message = (
                f"{emoji} –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª\n"
                f"üìä {symbol}\n"
                f"üìà {side}: {quantity} @ ${price}\n"
                f"‚è∞ {trade_data.get('timestamp', 'Now')}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if self.telegram_enabled:
                await self.telegram.send_message(message)
            
            if self.email_enabled:
                await self.email.send_email(
                    subject=f"Trade Alert: {symbol} {side}",
                    body=message
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ: {e}")
    
    async def send_error_alert(self, error_message: str, component: str = "System"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = (
                f"üö® –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´\n"
                f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}\n"
                f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n"
                f"‚è∞ {logger.name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
            )
            
            if self.telegram_enabled:
                await self.telegram.send_message(message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def send_daily_summary(self, summary_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            total_trades = summary_data.get('total_trades', 0)
            profit_loss = summary_data.get('profit_loss', 0)
            
            emoji = "üìà" if profit_loss >= 0 else "üìâ"
            message = (
                f"{emoji} –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n"
                f"üìä –°–¥–µ–ª–æ–∫: {total_trades}\n"
                f"üí∞ P&L: ${profit_loss:.2f}\n"
                f"üìÖ {summary_data.get('date', 'Today')}"
            )
            
            if self.telegram_enabled:
                await self.telegram.send_message(message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def check_status(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            'telegram_available': TELEGRAM_AVAILABLE,
            'telegram_enabled': self.telegram_enabled,
            'email_available': EMAIL_AVAILABLE,
            'email_enabled': self.email_enabled,
            'config_available': CONFIG_AVAILABLE
        }

# ‚úÖ –°–û–ó–î–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
try:
    notification_manager = NotificationManager()
    logger.info("‚úÖ NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationManager: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class DummyNotificationManager:
        def __init__(self):
            pass
        
        async def send_trade_notification(self, trade_data):
            pass
        
        async def send_error_alert(self, error_message, component="System"):
            pass
        
        async def send_daily_summary(self, summary_data):
            pass
        
        def check_status(self):
            return {'all_disabled': True}
    
    notification_manager = DummyNotificationManager()

# ‚úÖ –≠–ö–°–ü–û–†–¢–´
__all__ = [
    'NotificationManager',
    'TelegramNotifier', 
    'EmailNotifier',
    'notification_manager',
    'telegram_notifier'
]