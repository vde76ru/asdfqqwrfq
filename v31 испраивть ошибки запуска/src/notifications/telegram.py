"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/notifications/telegram.py
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
import aiohttp
import os
from decimal import Decimal
import json
from sqlalchemy import and_, desc, func

logger = logging.getLogger(__name__)


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö"""
    
    def __init__(self, db_session_factory, config: Dict = None):
        self.db_session_factory = db_session_factory
        self.config = config or {}
        
        # Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_token = self.config.get('telegram_token', os.getenv('TELEGRAM_BOT_TOKEN'))
        self.telegram_chat_id = self.config.get('telegram_chat_id', os.getenv('TELEGRAM_CHAT_ID'))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.min_signal_strength = self.config.get('min_signal_strength', 0.7)
        self.cooldown_minutes = self.config.get('cooldown_minutes', 60)
        self.check_interval = self.config.get('check_interval', 60)
        
        # –ö—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.sent_notifications: Dict[str, datetime] = {}
        
        # Telegram API URL
        self.telegram_api_url = f"https://api.telegram.org/bot{self.telegram_token}"
        
        logger.info("NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            from ..core.signal_models import AggregatedSignal, FinalSignalType
            
            with self.db_session_factory() as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                cutoff_time = datetime.utcnow() - timedelta(minutes=5)
                
                strong_signals = db.query(AggregatedSignal).filter(
                    and_(
                        AggregatedSignal.updated_at > cutoff_time,
                        AggregatedSignal.confidence_score >= self.min_signal_strength,
                        AggregatedSignal.final_signal.in_([
                            FinalSignalType.STRONG_BUY,
                            FinalSignalType.STRONG_SELL
                        ])
                    )
                ).all()
                
                for signal in strong_signals:
                    await self._process_signal(signal)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _process_signal(self, signal):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            last_sent = self.sent_notifications.get(signal.symbol)
            if last_sent and (datetime.utcnow() - last_sent).total_seconds() < self.cooldown_minutes * 60:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            emoji = "üü¢" if "buy" in signal.final_signal.value.lower() else "üî¥"
            signal_type = "–ü–û–ö–£–ü–ö–ê" if "buy" in signal.final_signal.value.lower() else "–ü–†–û–î–ê–ñ–ê"
            
            message = f"{emoji} <b>–°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: {signal_type}</b>\n\n"
            message += f"üìä <b>–°–∏–º–≤–æ–ª:</b> {signal.symbol}\n"
            message += f"üí™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence_score:.1%}\n"
            message += f"üìà <b>–°–∏–≥–Ω–∞–ª–æ–≤ BUY:</b> {signal.buy_signals_count}\n"
            message += f"üìâ <b>–°–∏–≥–Ω–∞–ª–æ–≤ SELL:</b> {signal.sell_signals_count}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if signal.metadata:
                metadata = json.loads(signal.metadata) if isinstance(signal.metadata, str) else signal.metadata
                if 'strategies' in metadata:
                    message += f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b> {', '.join(metadata['strategies'])}\n"
            
            message += f"\n‚è∞ <i>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_telegram_message(message, parse_mode='HTML')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.sent_notifications[signal.symbol] = datetime.utcnow()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {signal.symbol}: {e}")
    
    async def send_telegram_message(self, text: str, parse_mode: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_token or not self.telegram_chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': self.telegram_chat_id,
                    'text': text
                }
                
                if parse_mode:
                    data['parse_mode'] = parse_mode
                
                async with session.post(
                    f"{self.telegram_api_url}/sendMessage",
                    json=data
                ) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        logger.info("Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
                        return False
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            from ..core.signal_models import SignalExtended, AggregatedSignal, SignalType
            
            with self.db_session_factory() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                cutoff_time = datetime.utcnow() - timedelta(hours=24)
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_symbols = db.query(func.count(func.distinct(SignalExtended.symbol))).filter(
                    SignalExtended.created_at > cutoff_time
                ).scalar() or 0
                
                total_signals = db.query(func.count(SignalExtended.id)).filter(
                    SignalExtended.created_at > cutoff_time
                ).scalar() or 0
                
                buy_signals = db.query(func.count(SignalExtended.id)).filter(
                    and_(
                        SignalExtended.created_at > cutoff_time,
                        SignalExtended.signal_type == SignalType.BUY
                    )
                ).scalar() or 0
                
                sell_signals = db.query(func.count(SignalExtended.id)).filter(
                    and_(
                        SignalExtended.created_at > cutoff_time,
                        SignalExtended.signal_type == SignalType.SELL
                    )
                ).scalar() or 0
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
                strong_signal_symbols = db.query(func.count(func.distinct(AggregatedSignal.symbol))).filter(
                    and_(
                        AggregatedSignal.updated_at > cutoff_time,
                        AggregatedSignal.confidence_score >= self.min_signal_strength
                    )
                ).scalar() or 0
                
                # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                top_symbols = db.query(
                    SignalExtended.symbol,
                    func.count(SignalExtended.id).label('signal_count')
                ).filter(
                    SignalExtended.created_at > cutoff_time
                ).group_by(
                    SignalExtended.symbol
                ).order_by(
                    desc('signal_count')
                ).limit(5).all()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = "<b>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                message += f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols}\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
                message += f"‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ BUY: {buy_signals}\n"
                message += f"‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ SELL: {sell_signals}\n"
                message += f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏: {strong_signal_symbols}\n"
                
                if top_symbols:
                    message += "\n<b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:</b>\n"
                    for i, (symbol, count) in enumerate(top_symbols, 1):
                        message += f"{i}. {symbol} - {count} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                
                message += f"\n<i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</i>"
                
                await self.send_telegram_message(message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def send_error_notification(self, error_message: str, component: str = "System"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"üö® <b>–û–®–ò–ë–ö–ê –í –°–ò–°–¢–ï–ú–ï</b>\n\n"
            message += f"üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</b> {component}\n"
            message += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}\n"
            message += f"‚è∞ <i>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</i>"
            
            await self.send_telegram_message(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
