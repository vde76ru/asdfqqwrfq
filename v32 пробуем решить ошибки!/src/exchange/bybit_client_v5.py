#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø BYBIT API v5 - PRODUCTION READY
==================================================
–§–∞–π–ª: src/exchange/bybit_client_v5.py

‚úÖ –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –°–û –í–°–ï–ú–ò –ú–ï–¢–û–î–ê–ú–ò
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –° WEBSOCKET:
‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ heartbeat
‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ Bybit API
"""

import ccxt
import time
import logging
import os
import asyncio
import hmac
import hashlib
import json
import threading
import websocket
import aiohttp
import random
from typing import Optional, Dict, Any, List, Callable, Union
from datetime import datetime
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from ..core.unified_config import unified_config
    UNIFIED_CONFIG_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è unified_config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    unified_config = None
    UNIFIED_CONFIG_AVAILABLE = False

@dataclass
class BybitCredentials:
    """–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bybit"""
    api_key: str
    api_secret: str
    testnet: bool = True
    recv_window: int = 5000

@dataclass
class BybitEndpoints:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Bybit API"""
    rest_base: str
    ws_public: str
    ws_private: str

class BybitAPIError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ API Bybit"""
    def __init__(self, message: str, error_code: int = None, response: dict = None):
        self.message = message
        self.error_code = error_code
        self.response = response
        super().__init__(self.message)

class BybitWebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, credentials: BybitCredentials, endpoints: BybitEndpoints):
        self.credentials = credentials
        self.endpoints = endpoints
        self.connections = {}
        self.callbacks = {}
        self.reconnect_attempts = {}
        self.max_reconnect_attempts = 10
        self.ping_interval = 20
        self.is_initialized = True
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket
        self.ws_connected = {'public': False, 'private': False}
        self.last_message_time = {'public': time.time(), 'private': time.time()}
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å heartbeat
        self._heartbeat_started = False
        self._heartbeat_task = None
        self._heartbeat_lock = threading.Lock()
        
        # –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self._connection_locks = {'public': threading.Lock(), 'private': threading.Lock()}
        self._connecting = {'public': False, 'private': False}
        
        logger.info("‚úÖ BybitWebSocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def connect_private(self, callback: Callable):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        with self._connection_locks['private']:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if self._connecting['private']:
                logger.warning("‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...")
                return self.connections.get('private')
            
            if 'private' in self.connections and self.connections['private'] and self.ws_connected.get('private'):
                logger.info("‚ÑπÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω")
                return self.connections['private']
            
            self._connecting['private'] = True
            
        try:
            logger.info("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            expires = str(int(time.time() * 1000) + 10000)
            signature = self._generate_signature(expires)
            
            auth_msg = {
                "op": "auth",
                "args": [{
                    "apiKey": self.credentials.api_key,
                    "expires": expires,
                    "signature": signature
                }]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            manager = self
            
            def on_message(ws, message):
                try:
                    # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    manager.last_message_time['private'] = time.time()
                    
                    data = json.loads(message)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –æ—Ç Bybit
                    if data.get('op') == 'ping':
                        pong_msg = {'op': 'pong', 'args': [str(int(time.time() * 1000))]}
                        ws.send(json.dumps(pong_msg))
                        return
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if data.get('success'):
                        logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                        manager.ws_connected['private'] = True
                        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        subscribe_msg = {
                            "op": "subscribe",
                            "args": ["position", "order", "wallet"]
                        }
                        ws.send(json.dumps(subscribe_msg))
                        logger.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ position, order, wallet")
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ callback
                    if callback:
                        callback(data)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            def on_error(ws, error):
                logger.error(f"‚ùå Private WebSocket –æ—à–∏–±–∫–∞: {error}")
                manager.ws_connected['private'] = False
                manager._connecting['private'] = False
                manager._schedule_reconnect('private')
            
            def on_close(ws, close_status_code, close_msg):
                logger.warning(f"‚ö†Ô∏è Private WebSocket –∑–∞–∫—Ä—ã—Ç: {close_msg}")
                manager.ws_connected['private'] = False
                manager._connecting['private'] = False
            
            def on_open(ws):
                logger.info("üîê WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                manager.last_message_time['private'] = time.time()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                ws.send(json.dumps(auth_msg))
            
            ws = websocket.WebSocketApp(
                self.endpoints.ws_private,
                on_message=on_message,
                on_error=on_error,
                on_close=on_close,
                on_open=on_open
            )
            
            self.connections['private'] = ws
            self.callbacks['private'] = callback
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_ws():
                try:
                    ws.run_forever(ping_interval=self.ping_interval)
                finally:
                    manager._connecting['private'] = False
            
            thread = threading.Thread(target=run_ws, daemon=True)
            thread.start()
            
            # –ó–∞–ø—É—Å–∫ heartbeat (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó)
            self._ensure_heartbeat_started()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            self._connecting['private'] = False
            
            return ws
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket: {e}")
            self._connecting['private'] = False
            return None
    
    def connect_public(self, callback: Callable):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        with self._connection_locks['public']:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if self._connecting['public']:
                logger.warning("‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–π WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...")
                return self.connections.get('public')
            
            if 'public' in self.connections and self.connections['public'] and self.ws_connected.get('public'):
                logger.info("‚ÑπÔ∏è –ü—É–±–ª–∏—á–Ω—ã–π WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω")
                return self.connections['public']
            
            self._connecting['public'] = True
            
        try:
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            manager = self
            
            def on_message(ws, message):
                try:
                    # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    manager.last_message_time['public'] = time.time()
                    
                    data = json.loads(message)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –æ—Ç Bybit
                    if data.get('op') == 'ping':
                        pong_msg = {'op': 'pong', 'args': [str(int(time.time() * 1000))]}
                        ws.send(json.dumps(pong_msg))
                        return
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ callback
                    if callback:
                        callback(data)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            def on_error(ws, error):
                logger.error(f"‚ùå Public WebSocket –æ—à–∏–±–∫–∞: {error}")
                manager.ws_connected['public'] = False
                manager._connecting['public'] = False
                manager._schedule_reconnect('public')
            
            def on_close(ws, close_status_code, close_msg):
                logger.warning(f"‚ö†Ô∏è Public WebSocket –∑–∞–∫—Ä—ã—Ç: {close_msg}")
                manager.ws_connected['public'] = False
                manager._connecting['public'] = False
            
            def on_open(ws):
                logger.info("üì° –ü—É–±–ª–∏—á–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                manager.ws_connected['public'] = True
                manager.last_message_time['public'] = time.time()
            
            ws = websocket.WebSocketApp(
                self.endpoints.ws_public + "/linear",
                on_message=on_message,
                on_error=on_error,
                on_close=on_close,
                on_open=on_open
            )
            
            self.connections['public'] = ws
            self.callbacks['public'] = callback
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_ws():
                try:
                    ws.run_forever(ping_interval=self.ping_interval)
                finally:
                    manager._connecting['public'] = False
            
            thread = threading.Thread(target=run_ws, daemon=True)
            thread.start()
            
            # –ó–∞–ø—É—Å–∫ heartbeat (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó)
            self._ensure_heartbeat_started()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            self._connecting['public'] = False
            
            return ws
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket: {e}")
            self._connecting['public'] = False
            return None

    def _ensure_heartbeat_started(self):
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ heartbeat —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï"""
        with self._heartbeat_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ heartbeat –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if self._heartbeat_started:
                logger.debug("üíì Heartbeat —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ task
            if self._heartbeat_task and not self._heartbeat_task.done():
                logger.debug("üíì Heartbeat task —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –î–û —Å–æ–∑–¥–∞–Ω–∏—è task
                self._heartbeat_started = True
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è heartbeat –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_closed():
                        raise RuntimeError("Loop is closed")
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                
                self._heartbeat_task = asyncio.create_task(self._websocket_heartbeat())
                logger.info("üíì WebSocket heartbeat –∑–∞–ø—É—â–µ–Ω")
                
            except Exception as e:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                self._heartbeat_started = False
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ heartbeat: {e}")

    def subscribe(self, channel: str, topics: List[str], ws_type: str = 'public'):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        if ws_type not in self.connections or not self.ws_connected.get(ws_type):
            logger.error(f"‚ùå WebSocket {ws_type} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        ws = self.connections[ws_type]
        
        try:
            for topic in topics:
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [f"{channel}.{topic}"] if topic else [channel]
                }
                ws.send(json.dumps(subscribe_msg))
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel}.{topic if topic else ''}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def _schedule_reconnect(self, ws_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º rate limiting"""
        attempts = self.reconnect_attempts.get(ws_type, 0)
        
        if attempts >= self.max_reconnect_attempts:
            logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {ws_type}")
            return
            
        self.reconnect_attempts[ws_type] = attempts + 1
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —É—á–µ—Ç–æ–º rate limiting Bybit
        base_delay = 5
        max_delay = 300
        delay = min(max_delay, base_delay * (2 ** attempts))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∂–∏—Ç—Ç–µ—Ä
        jitter = random.uniform(0, delay * 0.1)
        total_delay = delay + jitter
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws_type} —á–µ—Ä–µ–∑ {total_delay:.1f}s (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1}/{self.max_reconnect_attempts})")
        
        def delayed_reconnect():
            try:
                self._reconnect(ws_type)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ delayed_reconnect: {e}")
        
        timer = threading.Timer(total_delay, delayed_reconnect)
        timer.daemon = True
        timer.start()
    
    def _reconnect(self, ws_type: str):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws_type}...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if ws_type in self.connections and self.connections[ws_type]:
                try:
                    self.connections[ws_type].close()
                except:
                    pass
                del self.connections[ws_type]
            
            self.ws_connected[ws_type] = False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            callback = self.callbacks.get(ws_type)
            if callback:
                if ws_type == 'private':
                    self.connect_private(callback)
                elif ws_type == 'public':
                    self.connect_public(callback)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {ws_type}: {e}")

    async def _websocket_heartbeat(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π heartbeat –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üíì WebSocket heartbeat –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self._heartbeat_started:
                await asyncio.sleep(self.ping_interval)
                
                current_time = time.time()
                
                for ws_type, ws in self.connections.items():
                    if ws and self.ws_connected.get(ws_type):
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            last_msg_time = self.last_message_time.get(ws_type, 0)
                            time_since_last_msg = current_time - last_msg_time
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥ - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                            if time_since_last_msg > 60:
                                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {ws_type} WebSocket –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥")
                                self._schedule_reconnect(ws_type)
                                continue
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                            ping_msg = {"op": "ping"}
                            ws.send(json.dumps(ping_msg))
                            logger.debug(f"üì° Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {ws_type}")
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat –¥–ª—è {ws_type}: {e}")
                            self._schedule_reconnect(ws_type)
                            
        except asyncio.CancelledError:
            logger.info("üíî WebSocket heartbeat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ heartbeat: {e}")
        finally:
            self._heartbeat_started = False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
            with self._heartbeat_lock:
                self._heartbeat_started = False
                if self._heartbeat_task and not self._heartbeat_task.done():
                    self._heartbeat_task.cancel()
                    logger.info("üíî WebSocket heartbeat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            for ws_type, ws in self.connections.items():
                if ws:
                    try:
                        ws.close()
                    except:
                        pass
                self.ws_connected[ws_type] = False
                self._connecting[ws_type] = False
                
            self.connections.clear()
            logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
    
    def _generate_signature(self, expires: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        val = f"GET/realtime{expires}"
        signature = hmac.new(
            bytes(self.credentials.api_secret, "utf-8"),
            bytes(val, "utf-8"),
            hashlib.sha256
        ).hexdigest()
        return signature

class BybitClientV5:
    """Production-ready –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit API v5 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, api_key: str, secret: str, testnet: bool = True):
        self.credentials = BybitCredentials(api_key, secret, testnet)
        self.testnet = testnet
        self.exchange = None
        self.is_initialized = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.request_count = 0
        self.success_count = 0
        self.error_count = 0
        self.last_request_time = None
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.cache = {
            'balance': {},
            'positions': {},
            'orders': {},
            'tickers': {},
            'last_update': {}
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        if testnet:
            self.endpoints = BybitEndpoints(
                rest_base="https://api-testnet.bybit.com",
                ws_public="wss://stream-testnet.bybit.com/v5/public",
                ws_private="wss://stream-testnet.bybit.com/v5/private"
            )
        else:
            self.endpoints = BybitEndpoints(
                rest_base="https://api.bybit.com",
                ws_public="wss://stream.bybit.com/v5/public",
                ws_private="wss://stream.bybit.com/v5/private"
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
        self.ws_manager = BybitWebSocketManager(self.credentials, self.endpoints)
        
        logger.info("üéØ BybitClientV5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CCXT exchange
            self.exchange = ccxt.bybit({
                'apiKey': self.credentials.api_key,
                'secret': self.credentials.api_secret,
                'sandbox': self.testnet,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'linear',
                    'recvWindow': self.credentials.recv_window,
                }
            })
            
            logger.info("‚úÖ CCXT exchange –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                server_time = await self._get_server_time()
                if server_time:
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.is_initialized = True
                    return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    # ================== HTTP API METHODS ==================

    async def _make_request(self, method: str, endpoint: str, params: dict = None) -> dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        try:
            timestamp = str(int(time.time() * 1000))
            url = f"{self.endpoints.rest_base}{endpoint}"
            
            async with aiohttp.ClientSession() as session:
                if method == 'GET':
                    # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query string
                    query_string = ""
                    if params:
                        sorted_params = sorted(params.items())
                        query_string = "&".join([f"{k}={v}" for k, v in sorted_params])
                    
                    signature = self._generate_signature(timestamp, method, endpoint, query_string)
                    url += f"?{query_string}"
                    
                    headers = self._get_headers(timestamp, signature)
                    
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        self._update_stats(result)
                        return result
                        
                else:  # POST, PUT, DELETE
                    # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON body
                    json_body = json.dumps(params or {})
                    signature = self._generate_signature(timestamp, method, endpoint, json_body)
                    
                    headers = self._get_headers(timestamp, signature)
                    
                    async with session.request(method, url, headers=headers, data=json_body) as response:
                        result = await response.json()
                        self._update_stats(result)
                        return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {method} {endpoint}: {e}")
            self.error_count += 1
            return {
                'retCode': -1,
                'retMsg': str(e),
                'result': None
            }

    def _generate_signature(self, timestamp: str, method: str, endpoint: str, params: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        param_str = f"{timestamp}{self.credentials.api_key}{self.credentials.recv_window}{params}"
        signature = hmac.new(
            bytes(self.credentials.api_secret, "utf-8"),
            bytes(param_str, "utf-8"),
            hashlib.sha256
        ).hexdigest()
        return signature

    def _get_headers(self, timestamp: str, signature: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'X-BAPI-API-KEY': self.credentials.api_key,
            'X-BAPI-TIMESTAMP': timestamp,
            'X-BAPI-SIGN': signature,
            'X-BAPI-RECV-WINDOW': str(self.credentials.recv_window),
            'Content-Type': 'application/json'
        }

    def _update_stats(self, response: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.request_count += 1
        self.last_request_time = datetime.now()
        
        if response.get('retCode') == 0:
            self.success_count += 1
        else:
            self.error_count += 1

    async def _get_server_time(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = await self._make_request('GET', '/v5/market/time')
            if response.get('retCode') == 0:
                return int(response['result']['timeSecond'])
            return None
        except Exception:
            return None

    # ================== WALLET & ACCOUNT METHODS ==================

    async def get_wallet_balance(self, account_type: str = "UNIFIED", coin: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        params = {"accountType": account_type}
        if coin:
            params["coin"] = coin
        
        response = await self._make_request('GET', '/v5/account/wallet-balance', params)
        
        if response.get('retCode') == 0:
            self.cache['balance'] = response['result']
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {account_type}")
        
        return response

    async def get_positions(self, category: str = "linear", symbol: str = None, settleCoin: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.is_initialized:
                await self.initialize()
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Bybit API v5 —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            params = {"category": category}
            
            if symbol:
                params["symbol"] = symbol
            elif settleCoin:
                params["settleCoin"] = settleCoin
            else:
                # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –Ω—É–∂–µ–Ω settleCoin
                params["settleCoin"] = "USDT"
            
            response = await self._make_request("GET", "/v5/position/list", params)
            
            if response and response.get('retCode') == 0:
                logger.debug(f"üìä –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è category={category}")
                return {
                    'success': True,
                    'data': response.get('result', {})
                }
            else:
                error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {
                'success': False,
                'error': str(e)
            }
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {
                'success': False,
                'error': str(e)
            }


    async def set_leverage(self, category: str, symbol: str, buy_leverage: str, 
                          sell_leverage: str = None) -> dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞"""
        params = {
            "category": category,
            "symbol": symbol,
            "buyLeverage": buy_leverage,
            "sellLeverage": sell_leverage or buy_leverage
        }
        
        response = await self._make_request('POST', '/v5/position/set-leverage', params)
        
        if response.get('retCode') == 0:
            logger.info(f"üîß –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {symbol}: {buy_leverage}x")
        
        return response

    # ================== ORDER METHODS ==================

    async def place_order(self, category: str, symbol: str, side: str, order_type: str,
                         qty: str, price: str = None, time_in_force: str = "GTC",
                         position_idx: int = 0, reduce_only: bool = False,
                         take_profit: str = None, stop_loss: str = None,
                         tp_sl_mode: str = "Full", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            "category": category,
            "symbol": symbol,
            "side": side,
            "orderType": order_type,
            "qty": qty,
            "positionIdx": position_idx
        }
        
        if price:
            params["price"] = price
        if order_type == "Limit":
            params["timeInForce"] = time_in_force
        if reduce_only:
            params["reduceOnly"] = reduce_only
        if take_profit:
            params["takeProfit"] = take_profit
        if stop_loss:
            params["stopLoss"] = stop_loss
        if take_profit or stop_loss:
            params["tpslMode"] = tp_sl_mode
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params.update(kwargs)
        
        response = await self._make_request('POST', '/v5/order/create', params)
        
        if response.get('retCode') == 0:
            order_id = response['result']['orderId']
            logger.info(f"üìù –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {symbol} {side} {qty} - ID: {order_id}")
        
        return response

    async def place_market_order(self, symbol: str, side: str, qty: str, 
                                category: str = "linear", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–∞"""
        return await self.place_order(
            category=category,
            symbol=symbol,
            side=side,
            order_type="Market",
            qty=qty,
            **kwargs
        )

    async def place_limit_order(self, symbol: str, side: str, qty: str, price: str,
                               category: str = "linear", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ limit –æ—Ä–¥–µ—Ä–∞"""
        return await self.place_order(
            category=category,
            symbol=symbol,
            side=side,
            order_type="Limit",
            qty=qty,
            price=price,
            **kwargs
        )

    async def cancel_order(self, category: str, symbol: str, order_id: str = None, 
                          order_link_id: str = None) -> dict:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            "category": category,
            "symbol": symbol
        }
        
        if order_id:
            params["orderId"] = order_id
        elif order_link_id:
            params["orderLinkId"] = order_link_id
        else:
            raise BybitAPIError("–ù–µ–æ–±—Ö–æ–¥–∏–º orderId –∏–ª–∏ orderLinkId")
        
        response = await self._make_request('POST', '/v5/order/cancel', params)
        
        if response.get('retCode') == 0:
            logger.info(f"‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {order_id or order_link_id}")
        
        return response

    async def get_order_history(self, category: str = "linear", symbol: str = None, 
                               limit: int = 50) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        params = {
            "category": category,
            "limit": limit
        }
        if symbol:
            params["symbol"] = symbol
        
        return await self._make_request('GET', '/v5/order/history', params)

    # ================== MARKET DATA METHODS ==================

    async def get_tickers(self, category: str = "linear", symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤"""
        params = {"category": category}
        if symbol:
            params["symbol"] = symbol
        
        response = await self._make_request('GET', '/v5/market/tickers', params)
        
        if response.get('retCode') == 0:
            self.cache['tickers'] = response['result']
            self.cache['last_update']['tickers'] = time.time()
        
        return response

    async def get_market_data(self, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker_data = await self.get_tickers("linear", symbol)
            if ticker_data.get('retCode') == 0:
                result = ticker_data.get('result', {})
                ticker_list = result.get('list', [])
                if ticker_list:
                    return ticker_list[0]
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market data –¥–ª—è {symbol}: {e}")
            return None

    async def get_klines(self, category: str, symbol: str, 
                        interval: str, limit: int = 200) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–≤–µ—á–µ–π)"""
        params = {
            "category": category,
            "symbol": symbol,
            "interval": interval,
            "limit": limit
        }
        return await self._make_request('GET', '/v5/market/kline', params)

    async def get_orderbook(self, category: str, symbol: str, 
                           limit: int = 25) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        params = {
            "category": category,
            "symbol": symbol,
            "limit": limit
        }
        response = await self._make_request('GET', '/v5/market/orderbook', params)
        
        if response.get('retCode') == 0:
            result = response.get('result', {})
            return {
                'bids': result.get('b', []),
                'asks': result.get('a', []),
                'symbol': result.get('s', symbol),
                'timestamp': result.get('ts', int(time.time() * 1000))
            }
        return {}

    async def get_public_trading_records(self, category: str, symbol: str, 
                                        limit: int = 100) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö"""
        params = {
            "category": category,
            "symbol": symbol,
            "limit": limit
        }
        return await self._make_request('GET', '/v5/market/recent-trade', params)

    # ================== WEBSOCKET METHODS ==================

    def start_private_websocket(self, callback: Callable):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        return self.ws_manager.connect_private(callback)

    def start_public_websocket(self, callback: Callable):
        """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        return self.ws_manager.connect_public(callback)

    def subscribe_positions(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("position", [""], "private")

    def subscribe_orders(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("order", [""], "private")

    def subscribe_wallet(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("wallet", [""], "private")

    def subscribe_ticker(self, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("tickers", [symbol], "public")

    def subscribe_orderbook(self, symbol: str, depth: int = 50):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("orderbook", [f"{depth}.{symbol}"], "public")

    # ================== UTILITY METHODS ==================

    async def get_balance(self, coin: str = 'USDT') -> float:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if not self.exchange:
                raise BybitAPIError("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            balance = await asyncio.to_thread(self.exchange.fetch_balance)
            return float(balance.get(coin, {}).get('free', 0))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            raise BybitAPIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")

    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            'request_count': self.request_count,
            'success_count': self.success_count,
            'error_count': self.error_count,
            'success_rate': (self.success_count / max(self.request_count, 1)) * 100,
            'last_request': self.last_request_time.isoformat() if self.last_request_time else None,
            'cache_size': {
                'balance': len(self.cache.get('balance', {})),
                'positions': len(self.cache.get('positions', {})),
                'tickers': len(self.cache.get('tickers', {}))
            }
        }

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.ws_manager:
            self.ws_manager.disconnect()
        logger.info("üßπ BybitClientV5 –æ—á–∏—â–µ–Ω")

# ================== FACTORY FUNCTIONS ==================

def create_bybit_client_from_env(testnet: bool = True) -> BybitClientV5:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if UNIFIED_CONFIG_AVAILABLE and unified_config:
            logger.info("üìã API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ unified_config")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º unified_config
            api_key = getattr(unified_config, 'BYBIT_API_KEY', '')
            api_secret = getattr(unified_config, 'BYBIT_API_SECRET', '')
            testnet = getattr(unified_config, 'BYBIT_TESTNET', True)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ get_bybit_exchange_config (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            if not api_key or not api_secret:
                try:
                    bybit_config = unified_config.get_bybit_exchange_config()
                    api_key = bybit_config.get('apiKey', '')
                    api_secret = bybit_config.get('secret', '')
                    testnet = bybit_config.get('sandbox', True)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ get_bybit_exchange_config: {e}")
                    
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv('BYBIT_API_KEY', '')
            api_secret = os.getenv('BYBIT_API_SECRET', '')
            testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'
        
        if not api_key or not api_secret:
            raise ValueError("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        logger.info(f"‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {'testnet' if testnet else 'mainnet'}")
        
        return BybitClientV5(api_key, api_secret, testnet)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise

# ================== EXPORTS ==================

__all__ = [
    'BybitClientV5',
    'BybitWebSocketManager',
    'BybitCredentials', 
    'BybitEndpoints',
    'BybitAPIError',
    'create_bybit_client_from_env'
]