"""
–ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BotManager
–§–∞–π–ª: src/bot/internal/initialization.py

–í—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import traceback
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple

from src.core.database import SessionLocal, get_session
from src.core.unified_config import unified_config as config
from src.bot.internal.types import ComponentInfo, ComponentStatus

logger = logging.getLogger(__name__)

def get_initialization(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    class Initialization:
        def __init__(self, bot):
            self.bot = bot
            
        async def initialize_all_components(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
            return await initialize_all_components(self.bot)
            
        async def init_exchange_client(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
            return await init_exchange_client(self.bot)
            
        async def initialize_enhanced_exchange(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ exchange –∫–ª–∏–µ–Ω—Ç–∞"""
            return await initialize_enhanced_exchange(self.bot)
            
        async def init_market_analyzer(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
            return await init_market_analyzer(self.bot)
            
        async def init_trader(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
            return await init_trader(self.bot)
            
        async def init_risk_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
            return await init_risk_manager(self.bot)
            
        async def init_portfolio_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            return await init_portfolio_manager(self.bot)
            
        async def init_notifier(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            return await init_notifier(self.bot)
            
        async def init_data_collector(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
            return await init_data_collector(self.bot)
            
        async def init_strategy_factory(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
            return await init_strategy_factory(self.bot)
            
        async def display_account_info(self):
            """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
            return await display_account_info(self.bot)
            
        async def _process_balance_info(self, balance_info: dict):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
            return await _process_balance_info(self.bot, balance_info)
            
        async def init_config_validator(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
            return await init_config_validator(self.bot)
            
        async def init_execution_engine(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
            return await init_execution_engine(self.bot)
            
        async def init_ml_system(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã"""
            return await init_ml_system(self.bot)
            
        async def init_news_analyzer(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
            return await init_news_analyzer(self.bot)
            
        async def init_websocket_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            return await init_websocket_manager(self.bot)
            
        async def init_export_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
            return await init_export_manager(self.bot)
            
        async def init_health_monitor(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
            return await init_health_monitor(self.bot)
    
    return Initialization(bot_instance)


async def initialize_all_components(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        # ‚úÖ –°–ù–ê–ß–ê–õ–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú EXCHANGE –û–¢–î–ï–õ–¨–ù–û (–í–ù–ï –¶–ò–ö–õ–ê)
        if not bot_manager._exchange_initialized:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exchange_client...")
            exchange_success = await init_exchange_client(bot_manager)
            if not exchange_success:
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å exchange")
                return False
            bot_manager._exchange_initialized = True
            logger.info("‚úÖ exchange_client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("‚úÖ exchange_client —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ENHANCED EXCHANGE - –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange...")
        try:
            await initialize_enhanced_exchange(bot_manager)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Enhanced exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        initialization_order = [
            ('database', init_database, [], True),
            ('config_validator', init_config_validator, ['database'], True),
            ('data_collector', init_data_collector, [], True),
            ('market_analyzer', init_market_analyzer, ['data_collector'], True),
            ('risk_manager', init_risk_manager, ['market_analyzer'], True),
            ('portfolio_manager', init_portfolio_manager, ['risk_manager'], True),
            ('strategy_factory', init_strategy_factory, ['market_analyzer'], True),
            ('trader', init_trader, ['exchange_client', 'risk_manager'], True),
            ('execution_engine', init_execution_engine, ['exchange_client', 'risk_manager'], False),
            ('notifier', init_notifier, [], False),
            ('ml_system', init_ml_system, ['data_collector'], False),
            ('news_analyzer', init_news_analyzer, [], False),
            ('websocket_manager', init_websocket_manager, ['exchange_client'], False),
            ('export_manager', init_export_manager, ['database'], False),
            ('health_monitor', init_health_monitor, [], False)
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for comp_name, init_func, dependencies, is_critical in initialization_order:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç exchange_client
                if 'exchange_client' in dependencies and not bot_manager._exchange_initialized:
                    logger.warning(f"‚ö†Ô∏è {comp_name} –ø—Ä–æ–ø—É—â–µ–Ω - exchange_client –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                other_deps = [dep for dep in dependencies if dep != 'exchange_client']
                deps_ready = all(
                    bot_manager.components.get(dep, ComponentInfo('', ComponentStatus.NOT_INITIALIZED)).status == ComponentStatus.READY
                    for dep in other_deps
                )
                
                if not deps_ready and other_deps:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {comp_name} –Ω–µ –≥–æ—Ç–æ–≤—ã: {other_deps}")
                    if is_critical:
                        return False
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                comp_info = ComponentInfo(
                    name=comp_name,
                    status=ComponentStatus.INITIALIZING,
                    dependencies=dependencies,
                    is_critical=is_critical
                )
                bot_manager.components[comp_name] = comp_info
                
                logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {comp_name}...")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                result = await init_func(bot_manager)
                
                if result:
                    comp_info.status = ComponentStatus.READY
                    comp_info.last_heartbeat = datetime.utcnow()
                    logger.info(f"‚úÖ {comp_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    comp_info.status = ComponentStatus.FAILED
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}")
                    if is_critical:
                        return False
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}: {e}")
                if comp_name in bot_manager.components:
                    bot_manager.components[comp_name].status = ComponentStatus.FAILED
                    bot_manager.components[comp_name].error = str(e)
                if is_critical:
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        critical_components = [name for name, comp in bot_manager.components.items() if comp.is_critical]
        failed_critical = [name for name in critical_components 
                         if bot_manager.components[name].status != ComponentStatus.READY]
        
        if failed_critical:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {failed_critical}")
            return False
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len([c for c in bot_manager.components.values() if c.status == ComponentStatus.READY])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False


async def init_database(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç text –¥–ª—è SQLAlchemy 2.x
        from sqlalchemy import text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = SessionLocal()
        try:
            db.execute(text("SELECT 1"))  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
            db.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def init_config_validator(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.validate_config():
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def init_exchange_client(bot_manager):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º EnhancedUnifiedExchangeClient"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        from ...exchange import get_enhanced_exchange_client, BYBIT_INTEGRATION_AVAILABLE
        
        if BYBIT_INTEGRATION_AVAILABLE:
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º EnhancedUnifiedExchangeClient")
            bot_manager.exchange_client = get_enhanced_exchange_client()
        else:
            logger.warning("‚ö†Ô∏è Enhanced –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            from ...exchange import UnifiedExchangeClient
            bot_manager.exchange_client = UnifiedExchangeClient()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ
        exchange_name = getattr(config, 'DEFAULT_EXCHANGE', 'bybit')
        testnet = getattr(config, 'BYBIT_TESTNET', True)
        
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_name} (testnet={testnet})...")
        success = await bot_manager.exchange_client.connect(exchange_name, testnet)
        
        if success:
            logger.info("‚úÖ Exchange –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –î–ª—è Enhanced –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if hasattr(bot_manager.exchange_client, 'initialize'):
                await bot_manager.exchange_client.initialize()
                
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


async def init_data_collector(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –†–ï–ê–õ–¨–ù–´–ô"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DataCollector
        from ...data.data_collector import DataCollector
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å exchange_client –∏ —Å–µ—Å—Å–∏–µ–π –ë–î
        bot_manager.data_collector = DataCollector(
            bot_manager.exchange_client, 
            SessionLocal  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π, –∞ –Ω–µ self.db
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫
        await bot_manager.data_collector.start()
        
        logger.info("‚úÖ DataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataCollector: {e}")
        return False


async def init_market_analyzer(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        from ...analysis.market_analyzer import MarketAnalyzer
        bot_manager.market_analyzer = MarketAnalyzer()
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
        return False


async def init_risk_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {e}")
        return False


async def init_portfolio_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return False


async def init_strategy_factory(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return False


async def init_trader(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫: {e}")
        return False


async def init_execution_engine(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        from ...exchange.execution_engine import OrderExecutionEngine, get_execution_engine
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
        bot_manager.execution_engine = get_execution_engine()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        if bot_manager.execution_engine:
            logger.info("‚úÖ OrderExecutionEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            bot_manager.execution_engine.validation_settings.update({
                'min_confidence': getattr(bot_manager.config, 'MIN_SIGNAL_CONFIDENCE', 0.6),
                'max_slippage': getattr(bot_manager.config, 'MAX_SLIPPAGE_PERCENT', 0.5) / 100,
                'min_volume_ratio': 0.01,
                'max_position_correlation': 0.7
            })
            
            return True
        else:
            logger.warning("‚ö†Ô∏è OrderExecutionEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OrderExecutionEngine: {e}")
        return False


async def init_notifier(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        if config.TELEGRAM_ENABLED and config.TELEGRAM_BOT_TOKEN:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.info("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False


async def init_ml_system(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        if not getattr(bot_manager.config, 'ENABLE_MACHINE_LEARNING', False):
            logger.info("‚ÑπÔ∏è –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é ML —Å–∏—Å—Ç–µ–º—É
        from ...ml.models.direction_classifier import DirectionClassifier
        from ...ml.models.price_regressor import PriceLevelRegressor
        from ...ml.models.rl_agent import TradingRLAgent
        from ...ml.features.feature_engineering import FeatureEngineer
        from ...ml.training.trainer import MLTrainer
        
        class MLSystem:
            def __init__(self):
                self.direction_classifier = DirectionClassifier()
                self.price_regressor = PriceLevelRegressor()
                self.rl_agent = TradingRLAgent()
                self.feature_engineer = FeatureEngineer()
                self.trainer = MLTrainer()
                self.is_initialized = False
                
            async def initialize(self):
                """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º trainer
                    await self.trainer.initialize()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    await self.load_models()
                    
                    self.is_initialized = True
                    logger.info("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML: {e}")
                    self.is_initialized = False
                
            async def load_models(self):
                """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                    available_models = self.trainer.list_available_models()
                    
                    if available_models:
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(available_models)} –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
                        for model_info in available_models[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –º–æ–¥–µ–ª–µ–π
                            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è {model_info['symbol']}")
                    else:
                        logger.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            
            async def predict_direction(self, symbol: str, df) -> Dict[str, Any]:
                """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                    features = await self.feature_engineer.extract_features(symbol, df)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction = self.direction_classifier.predict(features)
                    
                    return {
                        'action': prediction['direction_labels'][0],  # BUY/SELL/HOLD
                        'confidence': prediction['confidence'][0],
                        'probabilities': prediction['probabilities'][0],
                        'features': features.to_dict() if hasattr(features, 'to_dict') else {},
                        'model_type': 'ensemble',
                        'forecast_horizon': 5
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
                    return None
            
            async def predict_price_levels(self, symbol: str, df) -> Dict[str, Any]:
                """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω—ã"""
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º price regressor
                    features = await self.feature_engineer.extract_features(symbol, df)
                    levels = self.price_regressor.predict_levels(features)
                    
                    current_price = df['close'].iloc[-1]
                    
                    return {
                        'support': levels.get('support', current_price * 0.98),
                        'resistance': levels.get('resistance', current_price * 1.02),
                        'pivot': levels.get('pivot', current_price),
                        'confidence': levels.get('confidence', 0.5),
                        'targets': {
                            'target_1': current_price * 1.01,
                            'target_2': current_price * 1.02,
                            'target_3': current_price * 1.03
                        }
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
                    return {'support': 0, 'resistance': 0}
            
            async def get_rl_recommendation(self, symbol: str, df) -> Dict[str, Any]:
                """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç RL –∞–≥–µ–Ω—Ç–∞"""
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    state = self._prepare_rl_state(df)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    action_data = self.rl_agent.predict(state)
                    
                    return {
                        'action': action_data['action_name'],  # BUY/HOLD/SELL
                        'confidence': action_data['confidence'],
                        'q_values': action_data.get('q_values', [])
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ RL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
                    return None
            
            def _prepare_rl_state(self, df) -> Any:
                """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è RL –∞–≥–µ–Ω—Ç–∞"""
                import numpy as np
                # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                row = df.iloc[-1]
                state = np.array([
                    row.get('rsi', 50) / 100.0,
                    row.get('macd', 0) / 100.0,
                    row.get('bb_position', 0.5),
                    row.get('volume_ratio', 1.0),
                    row.get('price_change', 0) / 10.0,
                    df['close'].pct_change().iloc[-5:].mean() * 100,  # 5-–ø–µ—Ä–∏–æ–¥ momentum
                    df['volume'].iloc[-5:].mean() / df['volume'].iloc[-20:].mean(),  # Volume ratio
                    0.5  # Portfolio state placeholder
                ])
                return state
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML —Å–∏—Å—Ç–µ–º—É
        bot_manager.ml_system = MLSystem()
        await bot_manager.ml_system.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if getattr(bot_manager.config, 'ENABLE_ML_TRAINING', False):
            from .trading_loops import ml_training_loop
            asyncio.create_task(ml_training_loop(bot_manager))
        
        logger.info("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


async def init_news_analyzer(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        if not config.ENABLE_NEWS_ANALYSIS:
            logger.info("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False


async def init_websocket_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False


async def init_export_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False


async def init_health_monitor(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False


async def initialize_enhanced_exchange(bot_manager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange –∫–ª–∏–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å V5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        from ...exchange import check_bybit_v5_capabilities
        v5_capabilities = check_bybit_v5_capabilities()
        logger.info(f"üîç V5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {v5_capabilities}")
        
        if not v5_capabilities.get('enhanced_features', False):
            logger.warning("‚ö†Ô∏è Enhanced –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–µ–º enhanced –∫–ª–∏–µ–Ω—Ç
        from ...exchange import get_enhanced_exchange_client
        bot_manager.enhanced_exchange_client = get_enhanced_exchange_client()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if hasattr(bot_manager.enhanced_exchange_client, 'initialize'):
            success = await bot_manager.enhanced_exchange_client.initialize()
            if success:
                logger.info("‚úÖ Enhanced exchange –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health_check
                try:
                    if hasattr(bot_manager.enhanced_exchange_client, 'health_check'):
                        health_status = await bot_manager.enhanced_exchange_client.health_check()
                        status = health_status.get('overall_status', 'unknown')
                        logger.info(f"üîç Enhanced –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å: {status}")
                    else:
                        logger.info("üîç Enhanced –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å: initialized (no health_check)")
                except Exception as health_error:
                    logger.warning(f"‚ö†Ô∏è Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_error}")
                    # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                
                bot_manager.v5_integration_enabled = True
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å enhanced –∫–ª–∏–µ–Ω—Ç")
                return False
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ initialize - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤
            logger.info("‚úÖ Enhanced –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
            bot_manager.v5_integration_enabled = True
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ enhanced –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


async def display_account_info(bot_manager):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ"""
    try:
        logger.info("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ enhanced client (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        balance_info = None
        
        if bot_manager.enhanced_exchange_client:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å v5_client —á–µ—Ä–µ–∑ bybit_integration
                if hasattr(bot_manager.enhanced_exchange_client, 'bybit_integration') and \
                   hasattr(bot_manager.enhanced_exchange_client.bybit_integration, 'v5_client') and \
                   bot_manager.enhanced_exchange_client.bybit_integration.v5_client:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ v5_client
                    balance_info = await bot_manager.enhanced_exchange_client.bybit_integration.v5_client.get_wallet_balance()
                    logger.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ v5_client")
                else:
                    logger.warning("‚ö†Ô∏è V5 client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ enhanced client")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Enhanced client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        if not balance_info and bot_manager.exchange_client:
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ UnifiedExchangeClient
                if hasattr(bot_manager.exchange_client, 'exchange') and bot_manager.exchange_client.exchange:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ get_balance –∏–∑ UnifiedExchangeClient
                    unified_balance = await bot_manager.exchange_client.get_balance()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è _process_balance_info
                    if 'error' not in unified_balance:
                        balance_info = {
                            'retCode': 0,
                            'result': {
                                'list': [{
                                    'accountType': 'UNIFIED',
                                    'totalEquity': str(unified_balance.get('total_usdt', 0)),
                                    'totalAvailableBalance': str(unified_balance.get('free_usdt', 0)),
                                    'totalWalletBalance': str(unified_balance.get('total_usdt', 0)),
                                    'coin': []
                                }]
                            }
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º
                        for coin, details in unified_balance.get('assets', {}).items():
                            balance_info['result']['list'][0]['coin'].append({
                                'coin': coin,
                                'walletBalance': str(details.get('total', 0)),
                                'availableToWithdraw': str(details.get('free', 0)),
                                'equity': str(details.get('total', 0))
                            })
                        
                        logger.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ UnifiedExchangeClient")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        
        if balance_info and isinstance(balance_info, dict):
            await process_balance_info(bot_manager, balance_info)
            
        if hasattr(bot_manager.enhanced_exchange_client, 'v5_client'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            account_types = ['UNIFIED', 'CONTRACT', 'SPOT']
            for acc_type in account_types:
                try:
                    balance_info = await bot_manager.enhanced_exchange_client.v5_client.get_wallet_balance(
                        accountType=acc_type
                    )
                    logger.info(f"üí∞ {acc_type} –∞–∫–∫–∞—É–Ω—Ç: {balance_info}")
                except Exception as e:
                    logger.debug(f"‚ùå {acc_type} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
        logger.error(traceback.format_exc())


async def process_balance_info(bot_manager, balance_info: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        logger.info("üí∞ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–†–ì–û–í–û–ú –ê–ö–ö–ê–£–ù–¢–ï BYBIT")
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float
        def safe_float(value, default=0.0):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
            if value is None:
                return default
            if isinstance(value, (int, float)):
                return float(value)
            if isinstance(value, str):
                if value.strip() == '' or value.strip() == '0' or value.strip() == 'null':
                    return default
                try:
                    return float(value.strip())
                except (ValueError, AttributeError):
                    return default
            return default
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Bybit Unified Account
        if 'result' in balance_info and balance_info.get('retCode') == 0:
            result = balance_info.get('result', {})
            account_list = result.get('list', [])
            
            if account_list:
                account = account_list[0]
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                account_type = account.get('accountType', 'UNIFIED')
                total_equity = safe_float(account.get('totalEquity', 0))
                total_available = safe_float(account.get('totalAvailableBalance', 0))
                total_wallet = safe_float(account.get('totalWalletBalance', 0))
                
                logger.info(f"üíº –¢–ò–ü –ê–ö–ö–ê–£–ù–¢–ê: {account_type} (–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π)")
                logger.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_wallet:.2f}")
                logger.info(f"üìä –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_equity:.2f}")
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${total_available:.2f}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º
                coins = account.get('coin', [])
                logger.info("üìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ê–ö–¢–ò–í–ê–ú:")
                
                for coin_data in coins:
                    coin_symbol = coin_data.get('coin', '')
                    
                    if coin_symbol == 'USDT':
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –±–∞–ª–∞–Ω—Å–∞
                        wallet_balance = safe_float(coin_data.get('walletBalance', 0))
                        equity = safe_float(coin_data.get('equity', 0))
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        available_withdraw = safe_float(coin_data.get('availableToWithdraw', 0))
                        available_balance = safe_float(coin_data.get('availableBalance', 0))
                        free_balance = safe_float(coin_data.get('free', 0))
                        
                        # –î–ª—è SPOT –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å availableToBorrow
                        available_borrow = safe_float(coin_data.get('availableToBorrow', 0))
                        
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Unified Account
                        locked = safe_float(coin_data.get('locked', 0))
                        
                        # –î–ª—è Unified Account –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance - locked
                        # –ï—Å–ª–∏ locked = 0, —Ç–æ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω
                        if locked == 0 or locked < 1:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–ª–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                            available_final = wallet_balance
                            locked = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–ª–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        else:
                            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                            available_final = wallet_balance - locked
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                        if available_final < 1 and wallet_balance > 1:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –¥–∞–ª –º–∞–ª–æ
                            alternative_available = max(
                                available_withdraw, 
                                available_balance, 
                                free_balance, 
                                available_borrow,
                                wallet_balance * 0.99  # 99% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∫ fallback
                            )
                            
                            if alternative_available > available_final:
                                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {alternative_available:.2f}")
                                available_final = alternative_available
                                locked = wallet_balance - available_final
                        else:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            available_final = max(available_withdraw, available_balance, free_balance, available_borrow)
                        
                        logger.info(f"   üí∞ USDT:")
                        logger.info(f"      üìà –ë–∞–ª–∞–Ω—Å: {wallet_balance:.2f}")
                        logger.info(f"      ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_final:.2f}")
                        logger.info(f"      üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.2f}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                        bot_manager.balance = wallet_balance
                        bot_manager.available_balance = available_final
                        bot_manager.locked_balance = locked
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        logger.debug(f"üîç USDT –±–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª–∏:")
                        logger.debug(f"   walletBalance: {coin_data.get('walletBalance', 'N/A')}")
                        logger.debug(f"   availableToWithdraw: {coin_data.get('availableToWithdraw', 'N/A')}")
                        logger.debug(f"   availableBalance: {coin_data.get('availableBalance', 'N/A')}")
                        logger.debug(f"   free: {coin_data.get('free', 'N/A')}")
                        logger.debug(f"   locked: {coin_data.get('locked', 'N/A')}")
                        logger.debug(f"   equity: {coin_data.get('equity', 'N/A')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        elif isinstance(balance_info, dict) and any(key in balance_info for key in ['USDT', 'BTC', 'ETH']):
            logger.info("üè¶ –ë–ê–õ–ê–ù–° –ü–û –ê–ö–¢–ò–í–ê–ú:")
            
            main_currencies = ['USDT', 'BTC', 'ETH', 'BNB']
            
            for currency in main_currencies:
                if currency in balance_info:
                    balance_data = balance_info[currency]
                    if isinstance(balance_data, dict):
                        free = safe_float(balance_data.get('free', 0))
                        used = safe_float(balance_data.get('used', 0))
                        total = safe_float(balance_data.get('total', 0))
                        
                        if total > 0:
                            logger.info(f"   ü™ô {currency}: {total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:.4f})")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º USDT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
                    if currency == 'USDT' and isinstance(balance_data, dict):
                        bot_manager.balance = safe_float(balance_data.get('total', 0))
                        bot_manager.available_balance = safe_float(balance_data.get('free', 0))
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if not hasattr(bot_manager, 'balance') or bot_manager.balance is None:
            bot_manager.balance = 0.0
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 0")
        
        if not hasattr(bot_manager, 'available_balance') or bot_manager.available_balance is None:
            bot_manager.available_balance = 0.0
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 0")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        logger.info(f"üìä –ò–¢–û–ì–û –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        logger.info(f"   üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${bot_manager.balance:.2f}")
        logger.info(f"   üí∏ –î–æ—Å—Ç—É–ø–Ω–æ: ${bot_manager.available_balance:.2f}")
        logger.info(f"   üîí –í –ø–æ–∑–∏—Ü–∏—è—Ö: ${getattr(bot_manager, 'locked_balance', 0):.2f}")
        
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        logger.error(traceback.format_exc())
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not hasattr(bot_manager, 'balance'):
            bot_manager.balance = 0.0
        if not hasattr(bot_manager, 'available_balance'):
            bot_manager.available_balance = 0.0
        
        logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –±–∞–ª–∞–Ω—Å=${bot_manager.balance:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ=${bot_manager.available_balance:.2f}")