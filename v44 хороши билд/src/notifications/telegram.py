# –§–∞–π–ª: src/notifications/telegram.py
import logging
import aiohttp
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from ..core.unified_config import unified_config as config
from ..core.database import SessionLocal
from ..core.models import Signal as TradingSignal

logger = logging.getLogger(__name__)

@dataclass
class NotificationCooldown:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cooldown –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    symbol: str
    last_sent: datetime
    signal_type: str
    
class TelegramNotifier:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    def __init__(self):
        self.token = getattr(config, 'TELEGRAM_BOT_TOKEN', None)
        self.chat_id = getattr(config, 'TELEGRAM_CHAT_ID', None)
        self.enabled = bool(self.token and self.chat_id and 
                          self.token != "***–í–ê–®_TELEGRAM_BOT_TOKEN***")
        
        if self.enabled:
            self.api_url = f"https://api.telegram.org/bot{self.token}"
            logger.info("‚úÖ TelegramNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –∏ chat_id.")
        else:
            logger.warning("‚ö†Ô∏è TelegramNotifier –æ—Ç–∫–ª—é—á–µ–Ω: —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    async def send_message(self, text: str, parse_mode: str = 'HTML') -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return False
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) > 4000:
            text = text[:3997] + "..."
        
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/sendMessage", json=payload) as response:
                    if response.status == 200:
                        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}", exc_info=True)
            return False

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self, db_session_factory=None, config: Dict[str, Any] = None):
        self.telegram = TelegramNotifier()
        self.db_session_factory = db_session_factory or SessionLocal
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = config or {}
        self.min_signal_strength = self.config.get('min_signal_strength', 0.7)
        self.cooldown_minutes = self.config.get('cooldown_minutes', 60)
        self.check_interval = self.config.get('check_interval', 60)
        
        # –ö—ç—à –¥–ª—è cooldown
        self.cooldowns: Dict[str, NotificationCooldown] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'signals_sent': 0,
            'trades_sent': 0,
            'errors_sent': 0,
            'last_daily_summary': None
        }
        
        logger.info(f"‚úÖ NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (min_strength: {self.min_signal_strength})")
    
    def _format_number(self, value: float, decimals: int = 4) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        if value >= 1000000:
            return f"{value/1000000:.2f}M"
        elif value >= 1000:
            return f"{value/1000:.2f}K"
        else:
            return f"{value:.{decimals}f}"
    
    def _get_trend_emoji(self, value: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞"""
        if value > 0.05:
            return "üöÄ"
        elif value > 0.02:
            return "üìà"
        elif value > 0:
            return "‚ûï"
        elif value < -0.05:
            return "üí•"
        elif value < -0.02:
            return "üìâ"
        elif value < 0:
            return "‚ûñ"
        else:
            return "‚û°Ô∏è"
    
    def _check_cooldown(self, symbol: str, signal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        key = f"{symbol}_{signal_type}"
        if key in self.cooldowns:
            cooldown = self.cooldowns[key]
            if datetime.utcnow() - cooldown.last_sent < timedelta(minutes=self.cooldown_minutes):
                return False
        return True
    
    def _update_cooldown(self, symbol: str, signal_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cooldown –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        key = f"{symbol}_{signal_type}"
        self.cooldowns[key] = NotificationCooldown(
            symbol=symbol,
            last_sent=datetime.utcnow(),
            signal_type=signal_type
        )
    
    async def send_signal_notification(self, signal: TradingSignal, market_data: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
        if not self.telegram.enabled:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        if signal.strength < self.min_signal_strength:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if not self._check_cooldown(signal.symbol, signal.action):
            logger.debug(f"Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {signal.symbol} {signal.action}")
            return
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            action_emoji = "üü¢" if signal.action == "BUY" else "üî¥"
            strength_emoji = "üí™" if signal.strength > 0.8 else "üëç" if signal.strength > 0.7 else "üëå"
            
            message = f"{action_emoji} <b>–°–ò–ì–ù–ê–õ: {signal.action} {signal.symbol}</b>\n"
            message += f"{strength_emoji} <b>–°–∏–ª–∞:</b> {signal.strength:.1%}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += f"üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${signal.price:.4f}\n"
            
            if signal.stop_loss:
                sl_pct = abs((signal.stop_loss - signal.price) / signal.price * 100)
                message += f"üõ° <b>Stop Loss:</b> ${signal.stop_loss:.4f} (-{sl_pct:.1f}%)\n"
            
            if signal.take_profit:
                tp_pct = abs((signal.take_profit - signal.price) / signal.price * 100)
                message += f"üéØ <b>Take Profit:</b> ${signal.take_profit:.4f} (+{tp_pct:.1f}%)\n"
            
            message += f"üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {signal.strategy}\n"
            
            # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if market_data:
                message += "\n<b>üìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                
                if 'volume_24h' in market_data:
                    message += f"üìä –û–±—ä–µ–º 24—á: ${self._format_number(market_data['volume_24h'])}\n"
                
                if 'price_change_24h' in market_data:
                    change = market_data['price_change_24h']
                    emoji = self._get_trend_emoji(change)
                    message += f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change:.2%}\n"
                
                if 'rsi' in market_data:
                    rsi = market_data['rsi']
                    rsi_status = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if rsi > 70 else "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if rsi < 30 else "–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω"
                    message += f"üîÑ RSI: {rsi:.1f} ({rsi_status})\n"
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if signal.indicators:
                message += "\n<b>üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
                for key, value in signal.indicators.items():
                    if isinstance(value, (int, float)):
                        message += f"‚Ä¢ {key}: {value:.2f}\n"
                    else:
                        message += f"‚Ä¢ {key}: {value}\n"
            
            # –í—Ä–µ–º—è
            message += f"\n‚è∞ <i>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            success = await self.telegram.send_message(message)
            if success:
                self._update_cooldown(signal.symbol, signal.action)
                self.stats['signals_sent'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ: {e}")
    
    async def send_trade_notification(self, 
                                    symbol: str, 
                                    side: str, 
                                    price: float, 
                                    amount: float,
                                    strategy: str = None,
                                    confidence: float = None,
                                    order_id: str = None,
                                    pnl: float = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ"""
        if not self.telegram.enabled:
            return
        
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
            side_emoji = "üü¢" if side.upper() in ["BUY", "LONG"] else "üî¥"
            
            message = f"{side_emoji} <b>–°–î–ï–õ–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n"
            message += f"üìä <b>–ü–∞—Ä–∞:</b> {symbol}\n"
            message += f"üìà <b>–°—Ç–æ—Ä–æ–Ω–∞:</b> {side.upper()}\n"
            message += f"üíµ <b>–¶–µ–Ω–∞:</b> ${price:.4f}\n"
            message += f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {self._format_number(amount)}\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> ${self._format_number(price * amount, 2)}\n"
            
            if strategy:
                message += f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy}\n"
            
            if confidence is not None:
                conf_emoji = "üî•" if confidence > 0.8 else "‚úÖ" if confidence > 0.6 else "‚ö°"
                message += f"{conf_emoji} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence:.1%}\n"
            
            if order_id:
                message += f"üîñ <b>ID –æ—Ä–¥–µ—Ä–∞:</b> <code>{order_id}</code>\n"
            
            if pnl is not None:
                pnl_emoji = "üíö" if pnl > 0 else "üíî"
                message += f"{pnl_emoji} <b>P&L:</b> ${pnl:.2f}\n"
            
            message += f"\n‚è∞ <i>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>"
            
            success = await self.telegram.send_message(message)
            if success:
                self.stats['trades_sent'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ: {e}")
    
    async def send_error_notification(self, component: str, error_message: str, details: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if not self.telegram.enabled:
            return
        
        try:
            message = f"üö® <b>–û–®–ò–ë–ö–ê –í –°–ò–°–¢–ï–ú–ï</b>\n\n"
            message += f"üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</b> {component}\n"
            message += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}\n"
            
            if details:
                message += f"\nüìã <b>–î–µ—Ç–∞–ª–∏:</b>\n<code>{details[:500]}</code>\n"
            
            message += f"\n‚è∞ <i>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>"
            
            success = await self.telegram.send_message(message)
            if success:
                self.stats['errors_sent'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not self.telegram.enabled:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            with self.db_session_factory() as db:
                today = datetime.utcnow().date()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                signals_today = db.query(TradingSignal).filter(
                    TradingSignal.timestamp >= today
                ).all()
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_signals = len(signals_today)
                buy_signals = len([s for s in signals_today if s.action == "BUY"])
                sell_signals = len([s for s in signals_today if s.action == "SELL"])
                strong_signals = len([s for s in signals_today if s.strength > 0.8])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = "üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê</b>\n\n"
                message += f"üìÖ <b>–î–∞—Ç–∞:</b> {today}\n\n"
                
                message += f"üìà <b>–°–∏–≥–Ω–∞–ª—ã:</b>\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_signals}\n"
                message += f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞: {buy_signals} üü¢\n"
                message += f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞: {sell_signals} üî¥\n"
                message += f"‚Ä¢ –°–∏–ª—å–Ω—ã–µ (>80%): {strong_signals} üí™\n\n"
                
                message += f"üìÆ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                message += f"‚Ä¢ –°–∏–≥–Ω–∞–ª—ã: {self.stats['signals_sent']}\n"
                message += f"‚Ä¢ –°–¥–µ–ª–∫–∏: {self.stats['trades_sent']}\n"
                message += f"‚Ä¢ –û—à–∏–±–∫–∏: {self.stats['errors_sent']}\n"
                
                # –¢–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                symbol_counts = {}
                for signal in signals_today:
                    symbol_counts[signal.symbol] = symbol_counts.get(signal.symbol, 0) + 1
                
                if symbol_counts:
                    top_symbols = sorted(symbol_counts.items(), key=lambda x: x[1], reverse=True)[:5]
                    message += f"\nüèÜ <b>–¢–æ–ø —Å–∏–º–≤–æ–ª—ã:</b>\n"
                    for symbol, count in top_symbols:
                        message += f"‚Ä¢ {symbol}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                
                await self.telegram.send_message(message)
                self.stats['last_daily_summary'] = datetime.utcnow()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î
            with self.db_session_factory() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Å –≤—ã—Å–æ–∫–æ–π —Å–∏–ª–æ–π
                one_hour_ago = datetime.utcnow() - timedelta(hours=1)
                
                recent_signals = db.query(TradingSignal).filter(
                    TradingSignal.timestamp > one_hour_ago,
                    TradingSignal.strength >= self.min_signal_strength,
                    TradingSignal.notification_sent == False  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ
                ).all()
                
                for signal in recent_signals:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_signal_notification(signal)
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    signal.notification_sent = True
                    db.commit()
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.5)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
telegram_notifier = TelegramNotifier()

__all__ = ['NotificationManager', 'TelegramNotifier', 'telegram_notifier']