/**
 * MultiCurrencyCharts - –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
 * –§–∞–π–ª: src/web/static/js/multi_charts.js
 */

class MultiCurrencyCharts {
    constructor() {
        this.activeSymbols = [];
        this.charts = {};
        this.updateInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥
        this.updateTimer = null;
        
        console.log('üìä MultiCurrencyCharts –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    init() {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadActiveSymbols();
        this.createChartContainers();
        this.initializeCharts();
        this.startUpdates();
    }

    async loadActiveSymbols() {
        try {
            const response = await fetch('/api/config/pairs');
            const data = await response.json();
            
            if (data.success) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞
                this.activeSymbols = data.pairs
                    .filter(p => p.category === 'primary' && p.active)
                    .slice(0, 4)
                    .map(p => p.symbol);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:', error);
            // Fallback
            this.activeSymbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT'];
        }
    }

    createChartContainers() {
        const container = document.getElementById('multi-charts-container');
        if (!container) return;

        container.innerHTML = '';
        
        this.activeSymbols.forEach(symbol => {
            const chartHtml = `
                <div class="col-lg-6 mb-4" id="container-${symbol}">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">${symbol}</h6>
                                <small class="text-muted">
                                    <span id="volume-${symbol}">Vol: -</span>
                                </small>
                            </div>
                            <div class="text-end">
                                <div class="price-info">
                                    <span class="current-price h5 mb-0" id="price-${symbol}">-</span>
                                </div>
                                <div>
                                    <span class="price-change small" id="change-${symbol}">-</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            <canvas id="multi-chart-${symbol}" height="300"></canvas>
                        </div>
                        <div class="card-footer p-2">
                            <div class="row text-center small">
                                <div class="col">
                                    <div class="text-muted">24h High</div>
                                    <div id="high-${symbol}">-</div>
                                </div>
                                <div class="col">
                                    <div class="text-muted">24h Low</div>
                                    <div id="low-${symbol}">-</div>
                                </div>
                                <div class="col">
                                    <div class="text-muted">RSI</div>
                                    <div id="rsi-${symbol}">-</div>
                                </div>
                                <div class="col">
                                    <div class="text-muted">MACD</div>
                                    <div id="macd-${symbol}">-</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.innerHTML += chartHtml;
        });
    }

    initializeCharts() {
        this.activeSymbols.forEach(symbol => {
            const ctx = document.getElementById(`multi-chart-${symbol}`);
            if (!ctx) return;

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'Price',
                            data: [],
                            borderColor: this.getColorForSymbol(symbol),
                            backgroundColor: this.getColorForSymbol(symbol, 0.1),
                            borderWidth: 2,
                            pointRadius: 0,
                            tension: 0.1,
                            yAxisID: 'y-price'
                        },
                        {
                            label: 'Volume',
                            data: [],
                            type: 'bar',
                            backgroundColor: 'rgba(150, 150, 150, 0.3)',
                            yAxisID: 'y-volume',
                            hidden: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    if (context.dataset.label === 'Price') {
                                        return `Price: $${context.parsed.y.toFixed(2)}`;
                                    } else if (context.dataset.label === 'Volume') {
                                        return `Volume: ${(context.parsed.y / 1000000).toFixed(2)}M`;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxTicksLimit: 8,
                                maxRotation: 0
                            }
                        },
                        'y-price': {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toFixed(0);
                                }
                            }
                        },
                        'y-volume': {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                display: false
                            },
                            ticks: {
                                callback: function(value) {
                                    return (value / 1000000).toFixed(0) + 'M';
                                }
                            }
                        }
                    }
                }
            });

            this.charts[symbol] = {
                chart: chart,
                maxDataPoints: 50,
                data: []
            };
        });
    }

    getColorForSymbol(symbol, alpha = 1) {
        const colors = {
            'BTCUSDT': `rgba(247, 147, 26, ${alpha})`,    // Bitcoin Orange
            'ETHUSDT': `rgba(98, 126, 234, ${alpha})`,    // Ethereum Blue
            'BNBUSDT': `rgba(243, 186, 47, ${alpha})`,    // Binance Yellow
            'SOLUSDT': `rgba(133, 94, 255, ${alpha})`,    // Solana Purple
            'ADAUSDT': `rgba(0, 122, 255, ${alpha})`,     // Cardano Blue
            'XRPUSDT': `rgba(0, 170, 144, ${alpha})`,     // XRP Green
            'DOGEUSDT': `rgba(204, 172, 63, ${alpha})`,   // Dogecoin Gold
            'MATICUSDT': `rgba(130, 71, 229, ${alpha})`   // Polygon Purple
        };
        
        return colors[symbol] || `rgba(75, 192, 192, ${alpha})`;
    }

    async updateAllCharts() {
        try {
            const symbolsToFetch = this.activeSymbols;
            if (!symbolsToFetch || symbolsToFetch.length === 0) {
                return; // –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
            }
    
            const symbolsParam = symbolsToFetch.join(',');
            const response = await fetch(`/api/charts/multi/${symbolsParam}`);
    
            if (!response.ok) {
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ 2xx (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404, 500)
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status} ${response.statusText}`);
            }
            
            const result = await response.json();
    
            if (result.success && result.data) {
                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                symbolsToFetch.forEach(symbol => {
                    const tickerData = result.data[symbol]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    if (tickerData && tickerData.length > 0) {
                        // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                        const lastCandle = tickerData[tickerData.length - 1];
                        const chartInfo = {
                            price: lastCandle.close,
                            volume: lastCandle.volume,
                            // –ï—Å–ª–∏ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 24h –¥–∞–Ω–Ω—ã–µ, —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫–∏
                            change_24h: 0, 
                            high_24h: Math.max(...tickerData.map(c => c.high)),
                            low_24h: Math.min(...tickerData.map(c => c.low))
                        };
                        
                        this.updateChart(symbol, tickerData); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏
                        this.updatePriceDisplay(symbol, chartInfo);
                        this.updateIndicators(symbol, chartInfo);
    
                    } else {
                        // –î–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç
                        console.warn(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ ${symbol} –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.`);
                        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                        const priceEl = document.getElementById(`price-${symbol}`);
                        if (priceEl) priceEl.textContent = 'N/A';
                    }
                });
            } else {
                 // –ï—Å–ª–∏ success: false
                 throw new Error(result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.");
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
            // –ú–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
            this.activeSymbols.forEach(symbol => {
                const priceEl = document.getElementById(`price-${symbol}`);
                if (priceEl) priceEl.textContent = 'Error';
            });
        }
    }

    updateChart(symbol, data) {
        const chartData = this.charts[symbol];
        if (!chartData) return;

        const timestamp = new Date().toLocaleTimeString();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        chartData.chart.data.labels.push(timestamp);
        chartData.chart.data.datasets[0].data.push(data.price);
        chartData.chart.data.datasets[1].data.push(data.volume);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        if (chartData.chart.data.labels.length > chartData.maxDataPoints) {
            chartData.chart.data.labels.shift();
            chartData.chart.data.datasets[0].data.shift();
            chartData.chart.data.datasets[1].data.shift();
        }
        
        chartData.chart.update('none');
    }

    updatePriceDisplay(symbol, data) {
        if (!data || data.price === undefined) {
            console.warn(`–í updatePriceDisplay –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
            return; 
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Å –ø–æ–º–æ—â—å—é "||" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const price = data.price || 0;
        const change = data.change_24h || 0;
        const volume = data.volume || 0;
        const high = data.high_24h || 0;
        const low = data.low_24h || 0;
    
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
        const priceEl = document.getElementById(`price-${symbol}`);
        if (priceEl) priceEl.textContent = `$${price.toFixed(2)}`;
        
        const changeEl = document.getElementById(`change-${symbol}`);
        if (changeEl) {
            const changeClass = change >= 0 ? 'text-success' : 'text-danger';
            const changeSign = change >= 0 ? '‚Üë' : '‚Üì';
            changeEl.textContent = `${changeSign} ${Math.abs(change).toFixed(2)}%`;
            changeEl.className = `price-change small ${changeClass}`;
        }
        
        const volumeEl = document.getElementById(`volume-${symbol}`);
        if (volumeEl) {
            const volumeInM = (volume / 1000000).toFixed(2);
            volumeEl.textContent = `Vol: ${volumeInM}M`;
        }
        
        const highEl = document.getElementById(`high-${symbol}`);
        if (highEl) highEl.textContent = `$${high.toFixed(2)}`;
        
        const lowEl = document.getElementById(`low-${symbol}`);
        if (lowEl) lowEl.textContent = `$${low.toFixed(2)}`;
    }


    async updateIndicators(symbol, data) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const rsi = 50 + Math.random() * 30 - 15;
        const macd = Math.random() > 0.5 ? 'Bullish' : 'Bearish';
        
        document.getElementById(`rsi-${symbol}`).textContent = rsi.toFixed(1);
        
        const macdEl = document.getElementById(`macd-${symbol}`);
        macdEl.textContent = macd;
        macdEl.className = macd === 'Bullish' ? 'text-success' : 'text-danger';
    }

    startUpdates() {
        this.updateAllCharts();
        this.updateTimer = setInterval(() => {
            this.updateAllCharts();
        }, this.updateInterval);
    }

    stopUpdates() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
        }
    }

    setUpdateInterval(interval) {
        this.updateInterval = interval;
        this.stopUpdates();
        this.startUpdates();
    }

    addSymbol(symbol) {
        if (this.activeSymbols.includes(symbol)) return;
        
        this.activeSymbols.push(symbol);
        this.createChartContainers();
        this.initializeCharts();
        this.updateAllCharts();
    }

    removeSymbol(symbol) {
        const index = this.activeSymbols.indexOf(symbol);
        if (index === -1) return;
        
        this.activeSymbols.splice(index, 1);
        delete this.charts[symbol];
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.getElementById(`container-${symbol}`);
        if (container) {
            container.remove();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
let multiCharts;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('multi-charts-container')) {
        multiCharts = new MultiCurrencyCharts();
        multiCharts.init();
    }
});