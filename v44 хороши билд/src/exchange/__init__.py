"""
Exchange –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: src/exchange/__init__.py

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã fallback –∏–º–ø–æ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ç–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""
import logging
from typing import Dict, Tuple

try:
    from ..logging import get_logger
    logger = get_logger(__name__)
except ImportError:
    import logging
    logger = logging.getLogger(__name__)

# ‚úÖ –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–û–ì–û –ú–û–î–£–õ–Ø —Å —á–µ—Ç–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
try:
    from .unified_exchange import (
        UnifiedExchangeClient,
        BaseExchangeClient, 
        ExchangeClientFactory,
        get_real_exchange_client,
        get_exchange_client
    )
    logger.info("‚úÖ Unified Exchange –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    UNIFIED_AVAILABLE = True
except ImportError as e:
    error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å unified_exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
    logger.critical(error_msg)
    logger.critical("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª src/exchange/unified_exchange.py")
    logger.critical("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install ccxt")
    raise ImportError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å unified_exchange –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. "
                     "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏.") from e

# ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò CCXT
def _check_exchange_dependencies() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–∞–º–∏"""
    dependencies = {
        'ccxt': False,
        'websocket': False,
        'aiohttp': False,
        'requests': False,
    }
    
    try:
        import ccxt
        dependencies['ccxt'] = True
        logger.info(f"‚úÖ CCXT –≤–µ—Ä—Å–∏—è: {ccxt.__version__}")
    except ImportError:
        logger.critical("‚ùå CCXT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å!")
    
    try:
        import websocket
        dependencies['websocket'] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è websocket-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - WebSocket —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    try:
        import aiohttp
        dependencies['aiohttp'] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
    
    try:
        import requests
        dependencies['requests'] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - HTTP —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
    
    return dependencies

# ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ê–õ–ò–ê–°–û–í –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
ExchangeClient = UnifiedExchangeClient

# ‚úÖ –ò–ú–ü–û–†–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ú–û–î–£–õ–ï–ô —Å —á–µ—Ç–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
def _import_optional_exchange_module(module_name: str, class_names: list):
    """–ò–º–ø–æ—Ä—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö exchange –º–æ–¥—É–ª–µ–π"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å __import__
        module = __import__(f"{__name__}.{module_name}", fromlist=class_names)
        components = {}
        for class_name in class_names:
            try:
                components[class_name] = getattr(module, class_name)
                logger.info(f"‚úÖ {class_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ {module_name}")
            except AttributeError:
                logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ {module_name}")
                components[class_name] = None
        return components
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return {class_name: None for class_name in class_names}
        
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
logger.info("üîç –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ exchange –º–æ–¥—É–ª–∏...")

position_components = _import_optional_exchange_module(
    'position_manager', 
    ['PositionManager', 'get_position_manager']
)

execution_components = _import_optional_exchange_module(
    'execution_engine', 
    ['OrderExecutionEngine', 'get_execution_engine']
)

# ‚úÖ BYBIT V5 –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø - –ù–û–í–û–ï
logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bybit V5 –º–æ–¥—É–ª–µ–π...")

bybit_v5_components = _import_optional_exchange_module(
    'bybit_client_v5',
    ['BybitClientV5', 'create_bybit_client_from_env']
)

bybit_integration_components = _import_optional_exchange_module(
    'bybit_integration',
    ['BybitIntegrationManager', 'EnhancedUnifiedExchangeClient', 'upgrade_existing_client']
)

# –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
PositionManager = position_components['PositionManager']
get_position_manager = position_components['get_position_manager']
OrderExecutionEngine = execution_components['OrderExecutionEngine']
get_execution_engine = execution_components['get_execution_engine']

# Bybit V5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
BybitClientV5 = bybit_v5_components['BybitClientV5']
create_bybit_client_from_env = bybit_v5_components['create_bybit_client_from_env']
BybitIntegrationManager = bybit_integration_components['BybitIntegrationManager']
EnhancedUnifiedExchangeClient = bybit_integration_components['EnhancedUnifiedExchangeClient']
upgrade_existing_client = bybit_integration_components['upgrade_existing_client']

# –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bybit V5
BYBIT_V5_AVAILABLE = BybitClientV5 is not None
BYBIT_INTEGRATION_AVAILABLE = BybitIntegrationManager is not None

# ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ENHANCED –ö–õ–ò–ï–ù–¢–ê
def get_enhanced_exchange_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ enhanced –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    if BYBIT_INTEGRATION_AVAILABLE:
        return EnhancedUnifiedExchangeClient()
    else:
        logger.info("üîÑ Enhanced –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
        return get_real_exchange_client()

def check_bybit_v5_capabilities() -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Bybit V5"""
    return {
        'v5_client_available': BYBIT_V5_AVAILABLE,
        'integration_available': BYBIT_INTEGRATION_AVAILABLE,
        'enhanced_features': BYBIT_V5_AVAILABLE and BYBIT_INTEGRATION_AVAILABLE
    }

# ‚úÖ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò EXCHANGE –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô
def check_exchange_capabilities() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ exchange –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    
    Returns:
        dict: –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å exchange –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    deps = _check_exchange_dependencies()
    bybit_caps = check_bybit_v5_capabilities()
    
    capabilities = {
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        'dependencies': deps,
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'unified_client': UnifiedExchangeClient is not None,
        'base_client': BaseExchangeClient is not None,
        'client_factory': ExchangeClientFactory is not None,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'position_manager': PositionManager is not None,
        'execution_engine': OrderExecutionEngine is not None,
        
        # Bybit V5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'bybit_v5_client': BYBIT_V5_AVAILABLE,
        'bybit_integration': BYBIT_INTEGRATION_AVAILABLE,
        'enhanced_client': BYBIT_INTEGRATION_AVAILABLE,
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        'basic_trading': all([
            deps['ccxt'],
            UnifiedExchangeClient is not None
        ]),
        'advanced_trading': all([
            deps['ccxt'],
            deps['websocket'],
            UnifiedExchangeClient is not None,
            PositionManager is not None,
            OrderExecutionEngine is not None
        ]),
        'bybit_v5_trading': all([
            deps['ccxt'],
            BYBIT_V5_AVAILABLE,
            BYBIT_INTEGRATION_AVAILABLE
        ]),
        'full_exchange_stack': all([
            deps['ccxt'],
            deps['websocket'],
            deps['aiohttp'],
            UnifiedExchangeClient is not None,
            PositionManager is not None,
            OrderExecutionEngine is not None,
            BYBIT_V5_AVAILABLE,
            BYBIT_INTEGRATION_AVAILABLE
        ])
    }
    
    logger.info("üìà –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Exchange –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    logger.info(f"   ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: {capabilities['basic_trading']}")
    logger.info(f"   üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: {capabilities['advanced_trading']}")
    logger.info(f"   üéØ Bybit V5 —Ç–æ—Ä–≥–æ–≤–ª—è: {capabilities['bybit_v5_trading']}")
    logger.info(f"   üöÄ –ü–æ–ª–Ω—ã–π Exchange —Å—Ç–µ–∫: {capabilities['full_exchange_stack']}")
    
    return capabilities

def get_exchange_recommendation() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é Exchange –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    caps = check_exchange_capabilities()
    
    if caps['full_exchange_stack']:
        return "üéâ –ü–æ–ª–Ω—ã–π Exchange —Å—Ç–µ–∫ —Å Bybit V5 –¥–æ—Å—Ç—É–ø–µ–Ω - –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã!"
    elif caps['bybit_v5_trading']:
        return "üéØ Bybit V5 —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ aiohttp –∏ websocket-client"
    elif caps['advanced_trading']:
        return "üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞. –î–ª—è Bybit V5 –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏"
    elif caps['basic_trading']:
        return "‚ö° –ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–ª—è WebSocket —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ websocket-client"
    else:
        return "‚ùå –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ccxt: pip install ccxt"

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'UnifiedExchangeClient',
    'BaseExchangeClient',
    'ExchangeClientFactory',
    
    # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'ExchangeClient',
    
    # –§—É–Ω–∫—Ü–∏–∏
    'get_real_exchange_client',
    'get_exchange_client',
    'get_position_manager',
    'get_execution_engine',
    'get_enhanced_exchange_client',
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'PositionManager',
    'OrderExecutionEngine',
    
    # Bybit V5 –∫–ª–∞—Å—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    'BybitClientV5',
    'create_bybit_client_from_env',
    'BybitIntegrationManager',
    'EnhancedUnifiedExchangeClient',
    'upgrade_existing_client',
    
    # –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    'BYBIT_V5_AVAILABLE',
    'BYBIT_INTEGRATION_AVAILABLE',
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'check_exchange_capabilities',
    'check_bybit_v5_capabilities',
    'get_exchange_recommendation'
]

try:
    from .unified_exchange import UnifiedExchangeClient
    # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
    class unified_exchange_client:
        UnifiedExchangeClient = UnifiedExchangeClient
        
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ globals –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    import sys
    sys.modules[f'{__name__}.unified_exchange_client'] = unified_exchange_client
    
except ImportError:
    pass

# ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –ò–ú–ü–û–†–¢–ï
logger.info("üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange –º–æ–¥—É–ª–µ–π...")
_dependencies = _check_exchange_dependencies()

if not _dependencies['ccxt']:
    raise ImportError("‚ùå CCXT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ccxt")

_capabilities = check_exchange_capabilities()
_recommendation = get_exchange_recommendation()
logger.info(_recommendation)

if not _capabilities['basic_trading']:
    raise ImportError("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")

# –õ–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ Bybit V5
if BYBIT_V5_AVAILABLE:
    logger.info("üéØ Bybit V5 –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
if BYBIT_INTEGRATION_AVAILABLE:
    logger.info("üîó Bybit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
if BYBIT_V5_AVAILABLE and BYBIT_INTEGRATION_AVAILABLE:
    logger.info("‚ú® Enhanced Exchange –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ get_enhanced_exchange_client()")