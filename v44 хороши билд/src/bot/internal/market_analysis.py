"""
–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
–§–∞–π–ª: src/bot/internal/market_analysis.py
"""

import asyncio
import logging
import numpy as np
import pandas as pd
import traceback
import time
import random
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)

def get_market_analysis(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    
    class MarketAnalysis:
        def __init__(self, bot):
            self.bot = bot
            
        async def analyze_market_conditions(self):
            """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
            return await analyze_market_conditions(self.bot)
            
        async def determine_market_phase(self):
            """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã"""
            return await determine_market_phase(self.bot)
    
    return MarketAnalysis(bot_instance)

async def _update_market_data(bot_instance):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        logger.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        updated_pairs = 0
        for symbol in bot_instance.active_pairs:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º data_collector –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                if hasattr(bot_instance, 'data_collector') and bot_instance.data_collector:
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ data_collector
                    market_data = await bot_instance.data_collector.collect_market_data(symbol)
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä—è
                    if market_data and isinstance(market_data, dict):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º candles –≤ –∫—ç—à –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        if 'candles' in market_data and market_data['candles']:
                            if symbol not in bot_instance.candle_cache:
                                bot_instance.candle_cache[symbol] = deque(maxlen=100)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–∏ –≤ –∫—ç—à
                            for candle in market_data['candles']:
                                bot_instance.candle_cache[symbol].append(candle)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
                        if 'ticker' in market_data and market_data['ticker']:
                            last_price = float(market_data['ticker'].get('last', 0))
                            
                            if symbol not in bot_instance.price_history:
                                bot_instance.price_history[symbol] = deque(maxlen=100)
                            
                            bot_instance.price_history[symbol].append({
                                'price': last_price,
                                'volume': float(market_data['ticker'].get('volume', 0)),
                                'timestamp': datetime.utcnow()
                            })
                            
                            updated_pairs += 1
                            logger.debug(f"üìà {symbol}: ${last_price:.4f}")
                else:
                    # Fallback: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ exchange
                    if hasattr(bot_instance.exchange_client, 'get_klines'):
                        candles = await bot_instance.exchange_client.get_klines(
                            symbol=symbol,
                            interval='5m',
                            limit=50
                        )
                    elif hasattr(bot_instance.exchange_client, 'fetch_ohlcv'):
                        candles = await bot_instance.exchange_client.fetch_ohlcv(
                            symbol, '5m', limit=50
                        )
                    else:
                        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                        continue
                    
                    if candles and len(candles) > 0:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
                        if symbol not in bot_instance.candle_cache:
                            bot_instance.candle_cache[symbol] = deque(maxlen=100)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏
                        for candle in candles[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
                            candle_data = {
                                'timestamp': candle[0] if isinstance(candle, list) else candle.get('timestamp'),
                                'open': float(candle[1] if isinstance(candle, list) else candle.get('open', 0)),
                                'high': float(candle[2] if isinstance(candle, list) else candle.get('high', 0)),
                                'low': float(candle[3] if isinstance(candle, list) else candle.get('low', 0)),
                                'close': float(candle[4] if isinstance(candle, list) else candle.get('close', 0)),
                                'volume': float(candle[5] if isinstance(candle, list) else candle.get('volume', 0))
                            }
                            bot_instance.candle_cache[symbol].append(candle_data)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
                        last_candle = candles[-1]
                        last_price = float(last_candle[4] if isinstance(last_candle, list) else last_candle.get('close', 0))
                        
                        if symbol not in bot_instance.price_history:
                            bot_instance.price_history[symbol] = deque(maxlen=100)
                        
                        bot_instance.price_history[symbol].append({
                            'price': last_price,
                            'volume': float(last_candle[5] if isinstance(last_candle, list) else last_candle.get('volume', 0)),
                            'timestamp': datetime.utcnow()
                        })
                        
                        updated_pairs += 1
                        logger.debug(f"üìà {symbol}: ${last_price:.4f}")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
        
        if updated_pairs > 0:
            logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {updated_pairs}/{len(bot_instance.active_pairs)} –ø–∞—Ä")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(traceback.format_exc())

async def _update_market_data_for_symbol(bot_instance, symbol: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        if bot_instance.data_collector:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º data_collector
            market_data = await bot_instance.data_collector.collect_market_data(symbol)
            if market_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                bot_instance.market_data_cache[symbol] = market_data
                return True
        else:
            # –ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if hasattr(bot_instance.exchange_client, 'fetch_ticker'):
                ticker = await bot_instance.exchange_client.fetch_ticker(symbol)
                if ticker:
                    bot_instance.market_data_cache[symbol] = {
                        'price': ticker.get('last', 0),
                        'volume': ticker.get('volume', 0),
                        'timestamp': datetime.utcnow()
                    }
                    return True
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return False

async def _find_all_trading_opportunities(bot_instance):
    """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
    opportunities = []
    
    try:
        logger.debug("üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_factory = None
        if hasattr(bot_instance, 'strategy_factory'):
            strategy_factory = bot_instance.strategy_factory
        else:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            try:
                from ...strategies import strategy_factory as sf
                strategy_factory = sf
            except ImportError:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                return opportunities
        
        for symbol in bot_instance.active_pairs:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                market_data = await _prepare_market_data(bot_instance, symbol)
                
                if not market_data or len(market_data.get('close', [])) < 20:
                    logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                df = _market_data_to_dataframe(bot_instance, market_data)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
                active_strategies = getattr(bot_instance.config, 'ACTIVE_STRATEGIES', None)

                # –ï—Å–ª–∏ –Ω–µ—Ç ACTIVE_STRATEGIES, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                if active_strategies is None:
                    active_strategies = {}
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Å–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if hasattr(bot_instance.config, 'STRATEGY_WEIGHTS'):
                        strategy_weights_raw = bot_instance.config.STRATEGY_WEIGHTS
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                        if isinstance(strategy_weights_raw, str):
                            for pair in strategy_weights_raw.split(','):
                                if ':' in pair:
                                    name, weight = pair.strip().split(':')
                                    active_strategies[name.strip()] = float(weight)
                        elif isinstance(strategy_weights_raw, dict):
                            active_strategies = strategy_weights_raw
                    
                    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if not active_strategies:
                        active_strategies = {
                            'multi_indicator': 25.0,
                            'momentum': 20.0,
                            'mean_reversion': 15.0,
                            'breakout': 15.0,
                            'scalping': 10.0,
                            'swing': 10.0,
                            'whale_hunting': 15.0,
                            'sleeping_giants': 12.0,
                            'order_book_analysis': 10.0
                        }
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(active_strategies, str):
                    logger.warning(f"‚ö†Ô∏è ACTIVE_STRATEGIES —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {active_strategies}")
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                    parsed_strategies = {}
                    try:
                        import json
                        parsed_strategies = json.loads(active_strategies)
                    except:
                        # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                        for strategy in active_strategies.split(','):
                            strategy = strategy.strip()
                            if strategy:
                                parsed_strategies[strategy] = 1.0
                    active_strategies = parsed_strategies
                
                logger.debug(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {list(active_strategies.keys())}")
                
                for strategy_name, weight in active_strategies.items():
                    if weight <= 0:
                        continue
                        
                    try:
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        strategy = strategy_factory.create(strategy_name)
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                        signal = await strategy.analyze(df, symbol)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TradingSignal –≤ —Å–ª–æ–≤–∞—Ä—å
                        if signal and signal.action != 'WAIT' and signal.action != 'HOLD':
                            opportunity = {
                                'symbol': symbol,
                                'strategy': strategy_name,
                                'signal': signal.action,
                                'confidence': signal.confidence * (weight / 100.0),  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                                'price': signal.price if signal.price > 0 else float(market_data['close'][-1]),
                                'stop_loss': signal.stop_loss,
                                'take_profit': signal.take_profit,
                                'timestamp': datetime.utcnow(),
                                'reasons': [signal.reason] if signal.reason else [f'{strategy_name}_signal'],
                                'raw_confidence': signal.confidence,
                                'strategy_weight': weight
                            }
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                            min_confidence = getattr(bot_instance.config, 'MIN_STRATEGY_CONFIDENCE', 0.65)
                            if signal.confidence >= min_confidence:
                                opportunities.append(opportunity)
                                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} {signal.action} –æ—Ç {strategy_name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
                            
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy_name}: {e}")
                        continue
                
                # ML –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
                if getattr(bot_instance.config, 'ENABLE_MACHINE_LEARNING', False) and hasattr(bot_instance, 'ml_system') and bot_instance.ml_system:
                    ml_signal = await _analyze_with_ml(bot_instance, symbol, df)
                    if ml_signal and ml_signal['confidence'] >= getattr(bot_instance.config, 'ML_PREDICTION_THRESHOLD', 0.7):
                        opportunities.append(ml_signal)
                        logger.info(f"ü§ñ ML —Å–∏–≥–Ω–∞–ª: {symbol} {ml_signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_signal['confidence']:.2f})")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
                
        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        import traceback
        traceback.print_exc()
        
    return opportunities
    
def _market_data_to_dataframe(bot_instance, market_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ market_data –≤ DataFrame –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        import pandas as pd
        
        # –ï—Å–ª–∏ —É–∂–µ DataFrame - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(market_data, pd.DataFrame):
            return market_data
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ DataFrame
        df_data = {
            'open': market_data.get('open', []),
            'high': market_data.get('high', []),
            'low': market_data.get('low', []),
            'close': market_data.get('close', []),
            'volume': market_data.get('volume', [])
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
        lengths = [len(v) for v in df_data.values() if isinstance(v, list)]
        if lengths and all(l == lengths[0] for l in lengths):
            df = pd.DataFrame(df_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'timestamp' in market_data:
                df['timestamp'] = pd.to_datetime(market_data['timestamp'])
                df.set_index('timestamp', inplace=True)
                
            return df
        else:
            logger.error("–ù–µ–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame: {e}")
        return None

async def _analyze_with_ml(bot_instance, symbol: str, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –º–æ–¥–µ–ª–µ–π"""
    try:
        if not hasattr(bot_instance, 'ml_system') or not bot_instance.ml_system:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ML –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not getattr(bot_instance.config, 'ENABLE_MACHINE_LEARNING', False):
            return None
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        direction_prediction = None
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ trainer (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(bot_instance.ml_system, 'trainer') and bot_instance.ml_system.trainer:
                if hasattr(bot_instance.ml_system.trainer, 'predict_direction'):
                    direction_prediction = await bot_instance.ml_system.trainer.predict_direction(symbol, df)
                elif hasattr(bot_instance.ml_system.trainer, 'predict'):
                    direction_prediction = await bot_instance.ml_system.trainer.predict(symbol, df)
            
            # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ direction_classifier (–µ—Å–ª–∏ trainer –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            if not direction_prediction and hasattr(bot_instance.ml_system, 'direction_classifier'):
                if hasattr(bot_instance.ml_system.direction_classifier, 'predict'):
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                    features = bot_instance.ml_system.feature_engineer.create_features(df, symbol) if hasattr(bot_instance.ml_system, 'feature_engineer') else df
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction_result = bot_instance.ml_system.direction_classifier.predict(features)
                    
                    if 'error' not in prediction_result:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        direction_prediction = {
                            'direction': prediction_result.get('direction_labels', ['HOLD'])[-1] if prediction_result.get('direction_labels') else 'HOLD',
                            'confidence': prediction_result.get('confidence', [0.5])[-1] if prediction_result.get('confidence') else 0.5,
                            'features': {},
                            'model_type': 'direction_classifier'
                        }
            
            # –°–ø–æ—Å–æ–± 3: –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
            if not direction_prediction:
                logger.warning("‚ö†Ô∏è ML –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
                direction_prediction = {
                    'direction': 'HOLD',
                    'confidence': 0.3,  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏
                    'features': {},
                    'model_type': 'fallback'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        min_confidence = getattr(bot_instance.config, 'ML_PREDICTION_THRESHOLD', 0.7)
        if direction_prediction.get('confidence', 0) < min_confidence:
            logger.debug(f"ü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {direction_prediction.get('confidence', 0):.2f} < {min_confidence}")
            return None
            
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ price_prediction
        price_prediction = {
            'support': df['close'].iloc[-1] * 0.98, 
            'resistance': df['close'].iloc[-1] * 1.02,
            'confidence': 0.5
        }
        
        try:
            if hasattr(bot_instance.ml_system, 'price_regressor'):
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã
                pass
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ price_prediction: {e}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ RL recommendation  
        rl_recommendation = None
        try:
            if hasattr(bot_instance.ml_system, 'rl_agent') and bot_instance.ml_system.rl_agent:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å RL –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                pass
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RL recommendation: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        ml_signal = {
            'symbol': symbol,
            'signal': direction_prediction.get('direction', 'HOLD'),
            'price': df['close'].iloc[-1],
            'confidence': direction_prediction['confidence'],
            'stop_loss': price_prediction.get('support', df['close'].iloc[-1] * 0.98),
            'take_profit': price_prediction.get('resistance', df['close'].iloc[-1] * 1.02),
            'strategy': 'ml_prediction',
            'ml_features': direction_prediction.get('features', {}),
            'price_targets': price_prediction.get('targets', {}),
            'rl_action': rl_recommendation.get('action') if rl_recommendation else None,
            'indicators': {
                'ml_direction_confidence': direction_prediction['confidence'],
                'ml_price_confidence': price_prediction.get('confidence', 0),
                'feature_importance': direction_prediction.get('feature_importance', {}),
                'model_type': direction_prediction.get('model_type', 'ensemble')
            }
        }
        
        logger.debug(f"ü§ñ ML —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {ml_signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_signal['confidence']:.2f})")
        return ml_signal
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
        return None

def _calculate_rsi(bot_instance, prices: pd.Series, period: int = 14) -> pd.Series:
    """–†–∞—Å—á–µ—Ç RSI"""
    try:
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi.fillna(50)
    except:
        return pd.Series([50] * len(prices))

def _calculate_macd(bot_instance, prices: pd.Series) -> pd.Series:
    """–†–∞—Å—á–µ—Ç MACD"""
    try:
        exp1 = prices.ewm(span=12).mean()
        exp2 = prices.ewm(span=26).mean()
        macd = exp1 - exp2
        return macd.fillna(0)
    except:
        return pd.Series([0] * len(prices))

def _calculate_bb_position(bot_instance, prices: pd.Series, period: int = 20) -> pd.Series:
    """–†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
    try:
        rolling_mean = prices.rolling(window=period).mean()
        rolling_std = prices.rolling(window=period).std()
        upper_band = rolling_mean + (rolling_std * 2)
        lower_band = rolling_mean - (rolling_std * 2)
        bb_position = (prices - lower_band) / (upper_band - lower_band)
        return bb_position.fillna(0.5)
    except:
        return pd.Series([0.5] * len(prices))

async def _analyze_with_basic_strategy(bot_instance, symbol: str, market_data: dict):
    """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        closes = market_data.get('close', [])
        volumes = market_data.get('volume', [])
        
        if len(closes) < 20:
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy arrays –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        import numpy as np
        closes = np.array(closes[-50:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
        volumes = np.array(volumes[-50:])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma_20 = np.mean(closes[-20:])
        sma_10 = np.mean(closes[-10:])
        sma_5 = np.mean(closes[-5:])
        current_price = closes[-1]
        
        # RSI
        rsi = _calculate_rsi_value(bot_instance, closes, 14)
        
        # –û–±—ä–µ–º
        volume_avg = np.mean(volumes[-20:])
        current_volume = volumes[-1]
        volume_ratio = current_volume / volume_avg if volume_avg > 0 else 1
        
        # MACD
        exp1 = pd.Series(closes).ewm(span=12).mean()
        exp2 = pd.Series(closes).ewm(span=26).mean()
        macd = exp1.iloc[-1] - exp2.iloc[-1]
        signal_line = (exp1 - exp2).ewm(span=9).mean().iloc[-1]
        macd_histogram = macd - signal_line
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_change_5 = (current_price - closes[-5]) / closes[-5] * 100
        price_change_10 = (current_price - closes[-10]) / closes[-10] * 100
        
        # === –£–õ–£–ß–®–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –°–ò–ì–ù–ê–õ–û–í ===
        
        # BUY —Å–∏–≥–Ω–∞–ª—ã (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
        buy_signals = 0
        
        # 1. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        if sma_5 > sma_10 and closes[-2] < np.mean(closes[-11:-1]):
            buy_signals += 1
            
        # 2. RSI –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        if 25 < rsi < 45:  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            buy_signals += 1
            
        # 3. MACD –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        if macd_histogram > 0 and macd > signal_line * 0.95:  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ
            buy_signals += 1
            
        # 4. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        if volume_ratio > 1.2:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            buy_signals += 1
            
        # 5. –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç
        if price_change_5 > 0.5:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            buy_signals += 1
        
        # SELL —Å–∏–≥–Ω–∞–ª—ã
        sell_signals = 0
        
        # 1. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        if sma_5 < sma_10 and closes[-2] > np.mean(closes[-11:-1]):
            sell_signals += 1
            
        # 2. RSI –≤ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
        if rsi > 65:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            sell_signals += 1
            
        # 3. MACD –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        if macd_histogram < 0 and macd < signal_line * 1.05:
            sell_signals += 1
            
        # 4. –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç
        if price_change_5 < -0.5:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            sell_signals += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 3)
        signal_type = 'HOLD'
        confidence = 0.0
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"{symbol}: BUY signals={buy_signals}, SELL signals={sell_signals}")
        
        if buy_signals >= 2:
            signal_type = 'BUY'
            confidence = min(0.8, buy_signals / 5.0)  # –ú–∏–Ω–∏–º—É–º 0.8 –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        elif sell_signals >= 2:
            signal_type = 'SELL'
            confidence = min(0.8, sell_signals / 4.0)
        
        if signal_type != 'HOLD':
            return {
                'symbol': symbol,
                'signal': signal_type,
                'price': current_price,
                'confidence': confidence,
                'stop_loss': current_price * (0.97 if signal_type == 'BUY' else 1.03),
                'take_profit': current_price * (1.06 if signal_type == 'BUY' else 0.94),
                'indicators': {
                    'rsi': rsi,
                    'macd': macd,
                    'volume_ratio': volume_ratio,
                    'sma_trend': 'up' if sma_5 > sma_20 else 'down',
                    'price_change_5': price_change_5
                }
            }
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def _calculate_rsi_value(bot_instance, prices: np.ndarray, period: int = 14) -> float:
    """–†–∞—Å—á–µ—Ç RSI –∏–∑ numpy array"""
    try:
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])
        
        if avg_loss == 0:
            return 100
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return rsi
    except:
        return 50

async def get_latest_candles(bot_instance, symbol: str, timeframe: str = '1h', limit: int = 100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    
    Args:
        bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
        timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '15m', '1h', '4h', '1d')
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        
    Returns:
        List[List]: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [timestamp, open, high, low, close, volume]
    """
    try:
        logger.debug(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è {symbol}:")
        logger.debug(f"   Exchange type: {type(bot_instance.exchange).__name__}")
        logger.debug(f"   Has get_klines: {hasattr(bot_instance.exchange, 'get_klines')}")
        logger.debug(f"   Has ccxt_exchange: {hasattr(bot_instance.exchange, 'ccxt_exchange')}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ exchange
        if hasattr(bot_instance.exchange, 'get_klines'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ exchange
            logger.debug(f"üìä –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({timeframe}, limit={limit})")
            candles = await bot_instance.exchange.get_klines(symbol, timeframe, limit)
            
            if candles and len(candles) > 0:
                logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if hasattr(bot_instance, 'db') and bot_instance.db:
                    await _save_candles_to_db(bot_instance, symbol, timeframe, candles)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                return _format_candles(candles)
            else:
                logger.warning(f"‚ö†Ô∏è {symbol} {timeframe}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
        elif hasattr(bot_instance.exchange, 'ccxt_exchange') and bot_instance.exchange.ccxt_exchange:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CCXT
            logger.debug(f"üìä –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ CCXT –¥–ª—è {symbol} ({timeframe}, limit={limit})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è CCXT
            ccxt_timeframe = _convert_timeframe_to_ccxt(timeframe)
            
            ohlcv = await bot_instance.exchange.ccxt_exchange.fetch_ohlcv(
                symbol, ccxt_timeframe, limit=limit
            )
            
            if ohlcv and len(ohlcv) > 0:
                logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} —á–µ—Ä–µ–∑ CCXT")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if hasattr(bot_instance, 'db') and bot_instance.db:
                    await _save_ohlcv_to_db(bot_instance, symbol, timeframe, ohlcv)
                
                return ohlcv
            else:
                logger.warning(f"‚ö†Ô∏è {symbol} {timeframe}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ CCXT")
        
        # –ï—Å–ª–∏ –ø—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
        if hasattr(bot_instance, 'db') and bot_instance.db:
            logger.debug(f"üìä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è {symbol}")
            return await _get_candles_from_db(bot_instance, symbol, timeframe, limit)
        
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe})")
        return []
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
        return []

def _convert_timeframe_to_ccxt(timeframe: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç CCXT"""
    mapping = {
        '1m': '1m',
        '5m': '5m', 
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '1d': '1d'
    }
    return mapping.get(timeframe, '1h')

def _format_candles(candles):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if not candles:
        return []
    
    formatted = []
    for candle in candles:
        if isinstance(candle, dict):
            # –ï—Å–ª–∏ —Å–≤–µ—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
            formatted.append([
                candle.get('timestamp', 0),
                float(candle.get('open', 0)),
                float(candle.get('high', 0)),
                float(candle.get('low', 0)),
                float(candle.get('close', 0)),
                float(candle.get('volume', 0))
            ])
        elif isinstance(candle, (list, tuple)) and len(candle) >= 6:
            # –ï—Å–ª–∏ —Å–≤–µ—á–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞
            formatted.append([
                candle[0],  # timestamp
                float(candle[1]),  # open
                float(candle[2]),  # high
                float(candle[3]),  # low
                float(candle[4]),  # close
                float(candle[5])   # volume
            ])
    
    return formatted

async def _get_candles_from_db(bot_instance, symbol: str, timeframe: str, limit: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not hasattr(bot_instance, 'db') or not bot_instance.db:
            return []
        
        from ..core.models import Candle
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session = bot_instance.db() if callable(bot_instance.db) else bot_instance.db
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ –ë–î
        candles = session.query(Candle).filter(
            Candle.symbol == symbol,
            Candle.interval == timeframe
        ).order_by(Candle.open_time.desc()).limit(limit).all()
        
        if candles:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            result = []
            for candle in reversed(candles):  # –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                result.append([
                    int(candle.open_time.timestamp() * 1000),  # timestamp –≤ –º—Å
                    float(candle.open),
                    float(candle.high),
                    float(candle.low),
                    float(candle.close),
                    float(candle.volume)
                ])
            
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} –∏–∑ –ë–î")
            return result
        
        return []
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏–∑ –ë–î –¥–ª—è {symbol}: {e}")
        return []

async def _save_candles_to_db(bot_instance, symbol: str, timeframe: str, candles):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not hasattr(bot_instance, 'db') or not bot_instance.db or not candles:
            return
        
        from ..core.models import Candle
        from datetime import datetime
        
        session = bot_instance.db() if callable(bot_instance.db) else bot_instance.db
        
        for candle_data in candles[-30:]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                if isinstance(candle_data, dict):
                    timestamp = candle_data.get('timestamp', 0)
                    open_price = candle_data.get('open', 0)
                    high_price = candle_data.get('high', 0)
                    low_price = candle_data.get('low', 0)
                    close_price = candle_data.get('close', 0)
                    volume = candle_data.get('volume', 0)
                elif isinstance(candle_data, (list, tuple)) and len(candle_data) >= 6:
                    timestamp = candle_data[0]
                    open_price = candle_data[1]
                    high_price = candle_data[2]
                    low_price = candle_data[3]
                    close_price = candle_data[4]
                    volume = candle_data[5]
                else:
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
                if isinstance(timestamp, (int, float)):
                    if timestamp > 1e12:  # timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                        open_time = datetime.fromtimestamp(timestamp / 1000)
                    else:  # timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        open_time = datetime.fromtimestamp(timestamp)
                else:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤–µ—á–∞
                existing = session.query(Candle).filter(
                    Candle.symbol == symbol,
                    Candle.interval == timeframe,
                    Candle.open_time == open_time
                ).first()
                
                if not existing:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                    candle = Candle(
                        symbol=symbol,
                        interval=timeframe,
                        open_time=open_time,
                        open=float(open_price),
                        high=float(high_price),
                        low=float(low_price),
                        close=float(close_price),
                        volume=float(volume)
                    )
                    session.add(candle)
            
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")
                continue
        
        session.commit()
        logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –ë–î: {e}")

async def _save_ohlcv_to_db(bot_instance, symbol: str, timeframe: str, ohlcv):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not hasattr(bot_instance, 'db') or not bot_instance.db or not ohlcv:
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º OHLCV –≤ —Ñ–æ—Ä–º–∞—Ç —Å–≤–µ—á–µ–π
        candles = []
        for item in ohlcv:
            if len(item) >= 6:
                candles.append({
                    'timestamp': item[0],
                    'open': item[1],
                    'high': item[2],
                    'low': item[3],
                    'close': item[4],
                    'volume': item[5]
                })
        
        await _save_candles_to_db(bot_instance, symbol, timeframe, candles)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OHLCV –≤ –ë–î: {e}")

async def _prepare_market_data(bot_instance, symbol: str):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        import pandas as pd
        
        logger.debug(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–≤–µ—á–µ–π
        if hasattr(bot_instance, 'candle_cache') and symbol in bot_instance.candle_cache:
            candles = list(bot_instance.candle_cache[symbol])
            
            if candles and len(candles) > 0:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã OHLCV
                timestamps, opens, highs, lows, closes, volumes = [], [], [], [], [], []
                
                for candle in candles:
                    try:
                        if isinstance(candle, dict):
                            timestamps.append(candle.get('timestamp', candle.get('open_time', 0)))
                            opens.append(float(candle.get('open', 0)))
                            highs.append(float(candle.get('high', 0)))
                            lows.append(float(candle.get('low', 0)))
                            closes.append(float(candle.get('close', 0)))
                            volumes.append(float(candle.get('volume', 0)))
                        elif isinstance(candle, (list, tuple)) and len(candle) >= 6:
                            timestamps.append(candle[0])
                            opens.append(float(candle[1]))
                            highs.append(float(candle[2]))
                            lows.append(float(candle[3]))
                            closes.append(float(candle[4]))
                            volumes.append(float(candle[5]))
                    except (ValueError, TypeError, IndexError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")
                        continue
                
                if len(closes) > 0:
                    return {
                        'timestamp': timestamps,
                        'open': opens,
                        'high': highs,
                        'low': lows,
                        'close': closes,
                        'volume': volumes,
                        'symbol': symbol
                    }
        
        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ data_collector
        if hasattr(bot_instance, 'data_collector') and bot_instance.data_collector:
            logger.debug(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ data_collector –¥–ª—è {symbol}")
            
            market_data = await bot_instance.data_collector.collect_market_data(symbol)
            
            if market_data and isinstance(market_data, dict) and 'candles' in market_data:
                candles = market_data['candles']
                if candles:
                    return {
                        'timestamp': [c.get('timestamp', c.get('open_time', 0)) for c in candles],
                        'open': [float(c.get('open', 0)) for c in candles],
                        'high': [float(c.get('high', 0)) for c in candles],
                        'low': [float(c.get('low', 0)) for c in candles],
                        'close': [float(c.get('close', 0)) for c in candles],
                        'volume': [float(c.get('volume', 0)) for c in candles],
                        'symbol': symbol
                    }
        
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None

async def validate_market_data(bot_instance, symbol: str, df: pd.DataFrame) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if df is None or df.empty:
            logger.warning(f"‚ö†Ô∏è {symbol}: –ü—É—Å—Ç–æ–π DataFrame")
            return False
            
        required_columns = ['open', 'high', 'low', 'close', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.warning(f"‚ö†Ô∏è {symbol}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        min_candles = 200
        if len(df) < min_candles:
            logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df)} < {min_candles})")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        latest_time = pd.to_datetime(df.index[-1])
        time_diff = (datetime.now() - latest_time).total_seconds()
        
        if time_diff > 300:  # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            logger.warning(f"‚ö†Ô∏è {symbol}: –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ {time_diff/60:.1f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if df[required_columns].isnull().any().any():
            logger.warning(f"‚ö†Ô∏è {symbol}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã null –∑–Ω–∞—á–µ–Ω–∏—è")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
        recent_volume = df['volume'].tail(10).mean()
        if recent_volume < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            logger.info(f"‚ÑπÔ∏è {symbol}: –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ ({recent_volume:.2f})")
            return False
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def get_market_conditions(bot_instance, symbol: str, df: pd.DataFrame) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    """
    try:
        # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        returns = df['close'].pct_change().dropna()
        volatility = returns.std() * np.sqrt(24 * 365)  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        sma_20 = df['close'].rolling(20).mean().iloc[-1]
        sma_50 = df['close'].rolling(50).mean().iloc[-1]
        sma_200 = df['close'].rolling(200).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        trend = 'neutral'
        if current_price > sma_20 > sma_50 > sma_200:
            trend = 'strong_uptrend'
        elif current_price > sma_20 and current_price > sma_50:
            trend = 'uptrend'
        elif current_price < sma_20 < sma_50 < sma_200:
            trend = 'strong_downtrend'
        elif current_price < sma_20 and current_price < sma_50:
            trend = 'downtrend'
            
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        volume_avg = df['volume'].rolling(20).mean().iloc[-1]
        volume_current = df['volume'].iloc[-1]
        volume_ratio = volume_current / volume_avg if volume_avg > 0 else 0
        
        # RSI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        rsi = calculate_rsi(bot_instance, df['close'], 14).iloc[-1]
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        recent_high = df['high'].tail(20).max()
        recent_low = df['low'].tail(20).min()
        price_position = (current_price - recent_low) / (recent_high - recent_low) if recent_high != recent_low else 0.5
        
        conditions = {
            'symbol': symbol,
            'price': current_price,
            'volatility': volatility,
            'trend': trend,
            'volume_ratio': volume_ratio,
            'rsi': rsi,
            'price_position': price_position,
            'support': recent_low,
            'resistance': recent_high,
            'timestamp': datetime.now()
        }
        
        logger.info(f"üìä {symbol}: –¢—Ä–µ–Ω–¥={trend}, RSI={rsi:.1f}, –û–±—ä–µ–º={volume_ratio:.2f}x, –ü–æ–∑–∏—Ü–∏—è={price_position:.2%}")
        
        return conditions
        
    except Exception as e:
        logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π: {e}")
        return {}

def calculate_rsi(bot_instance, prices: pd.Series, period: int = 14) -> pd.Series:
    """
    –†–∞—Å—á–µ—Ç RSI
    """
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

async def apply_entry_filters(bot_instance, opportunities: List[Dict]) -> List[Dict]:
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    filtered = []
    
    for opp in opportunities:
        symbol = opp['symbol']
        confidence = opp.get('confidence', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        df = await bot_instance.exchange.get_historical_data(symbol, '5m', limit=200)
        if not await validate_market_data(bot_instance, symbol, df):
            continue
            
        conditions = await get_market_conditions(bot_instance, symbol, df)
        
        # –§–∏–ª—å—Ç—Ä—ã –≤—Ö–æ–¥–∞
        filters_passed = []
        
        # 1. –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
        if conditions.get('volume_ratio', 0) > 1.2:
            filters_passed.append('volume')
            
        # 2. –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É
        if opp['direction'] == 'long' and conditions.get('trend') in ['uptrend', 'strong_uptrend']:
            filters_passed.append('trend')
        elif opp['direction'] == 'short' and conditions.get('trend') in ['downtrend', 'strong_downtrend']:
            filters_passed.append('trend')
            
        # 3. –§–∏–ª—å—Ç—Ä –ø–æ RSI
        rsi = conditions.get('rsi', 50)
        if opp['direction'] == 'long' and 30 < rsi < 70:
            filters_passed.append('rsi')
        elif opp['direction'] == 'short' and 30 < rsi < 70:
            filters_passed.append('rsi')
            
        # 4. –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—ã
        price_pos = conditions.get('price_position', 0.5)
        if opp['direction'] == 'long' and price_pos < 0.7:
            filters_passed.append('price_position')
        elif opp['direction'] == 'short' and price_pos > 0.3:
            filters_passed.append('price_position')
            
        # –ú–∏–Ω–∏–º—É–º 2 —Ñ–∏–ª—å—Ç—Ä–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        if len(filters_passed) >= 2:
            opp['filters_passed'] = filters_passed
            opp['market_conditions'] = conditions
            opp['final_confidence'] = confidence * (len(filters_passed) / 4)
            filtered.append(opp)
            logger.info(f"‚úÖ {symbol}: –ü—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä—ã: {filters_passed}, –∏—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {opp['final_confidence']:.2%}")
        else:
            logger.debug(f"‚ùå {symbol}: –ù–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä—ã (–ø—Ä–æ—à–ª–æ {len(filters_passed)}/4)")
            
    return filtered

async def log_analysis_summary(bot_instance, opportunities: List[Dict], filtered_opportunities: List[Dict]):
    """
    –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    logger.info("üìà –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê:")
    logger.info(f"‚îú‚îÄ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(bot_instance.trading_pairs)}")
    logger.info(f"‚îú‚îÄ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(opportunities)}")
    logger.info(f"‚îú‚îÄ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_opportunities)}")
    
    if opportunities and not filtered_opportunities:
        logger.info("‚îî‚îÄ ‚ö†Ô∏è –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.info("   ‚îú‚îÄ –°–ª–∞–±—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
        logger.info("   ‚îú‚îÄ –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤")
        logger.info("   ‚îî‚îÄ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥—É")
        
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    strategy_stats = {}
    for opp in opportunities:
        strategy = opp.get('strategy', 'unknown')
        strategy_stats[strategy] = strategy_stats.get(strategy, 0) + 1
        
    if strategy_stats:
        logger.info("üìä –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:")
        for strategy, count in strategy_stats.items():
            logger.info(f"   ‚îú‚îÄ {strategy}: {count}")

async def analyze_market(bot_instance) -> List[Dict]:
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    all_opportunities = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if bot_instance.config.get('TESTNET'):
        logger.info("üß™ –†–∞–±–æ—Ç–∞–µ–º –≤ TESTNET —Ä–µ–∂–∏–º–µ")
    else:
        logger.info("üí∞ –†–∞–±–æ—Ç–∞–µ–º —Å MAINNET –¥–∞–Ω–Ω—ã–º–∏ (Paper Trading)")
    
    tasks = []
    for symbol in bot_instance.trading_pairs:
        if bot_instance.can_open_position(symbol):
            task = asyncio.create_task(bot_instance.analyze_trading_pair(symbol))
            tasks.append(task)
        else:
            logger.debug(f"‚è≠Ô∏è {symbol}: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –ª–∏–º–∏—Ç)")
            
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    for result in results:
        if isinstance(result, Exception):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result}")
        elif result:
            all_opportunities.extend(result)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_opportunities = await apply_entry_filters(bot_instance, all_opportunities)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞
    await log_analysis_summary(bot_instance, all_opportunities, filtered_opportunities)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    filtered_opportunities.sort(key=lambda x: x.get('final_confidence', 0), reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    max_new_positions = min(
        bot_instance.max_positions - len(bot_instance.active_positions),
        bot_instance.config.get('MAX_CONCURRENT_TRADES', 3)
    )
    
    return filtered_opportunities[:max_new_positions]

async def check_api_limits(bot_instance):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ API Bybit
    """
    current_time = time.time()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    bot_instance.api_calls = [call_time for call_time in bot_instance.api_calls if current_time - call_time < 60]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    calls_per_minute = len(bot_instance.api_calls)
    max_calls = int(bot_instance.config.get('MAX_API_CALLS_PER_SECOND', 10) * 60 * 0.8)  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
    
    if calls_per_minute >= max_calls:
        wait_time = 60 - (current_time - bot_instance.api_calls[0])
        logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É API ({calls_per_minute}/{max_calls}). –ñ–¥–µ–º {wait_time:.1f}—Å")
        await asyncio.sleep(wait_time)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏
    if bot_instance.config.get('RANDOM_DELAY_MIN') and bot_instance.config.get('RANDOM_DELAY_MAX'):
        delay = random.uniform(
            float(bot_instance.config.get('RANDOM_DELAY_MIN', 2)),
            float(bot_instance.config.get('RANDOM_DELAY_MAX', 10))
        )
        await asyncio.sleep(delay)
        
    bot_instance.api_calls.append(current_time)

async def analyze_market_conditions(bot_instance):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    try:
        logger.debug("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await _update_market_data(bot_instance)
        
        # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        opportunities = await _find_all_trading_opportunities(bot_instance)
        
        return {
            'opportunities': opportunities,
            'market_phase': 'neutral',  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
            'volatility': 'medium',
            'timestamp': datetime.utcnow()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
        return {
            'opportunities': [],
            'market_phase': 'unknown',
            'volatility': 'unknown',
            'timestamp': datetime.utcnow()
        }

async def determine_market_phase(bot_instance):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
        # –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        return 'neutral'
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã: {e}")
        return 'unknown'