"""
–ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BotManager
–§–∞–π–ª: src/bot/internal/initialization.py

–í—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import traceback
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
import os

from src.core.database import SessionLocal, get_session
from src.core.unified_config import unified_config as config
from src.bot.internal.types import ComponentInfo, ComponentStatus
from src.core.unified_config import UnifiedConfig

logger = logging.getLogger(__name__)

def get_initialization(bot_instance):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    class Initialization:
        def __init__(self, bot):
            self.bot = bot
            
        async def initialize_all_components(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
            return await initialize_all_components(self.bot)
            
        async def init_exchange_client(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
            return await init_exchange_client(self.bot)
            
        async def initialize_enhanced_exchange(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ exchange –∫–ª–∏–µ–Ω—Ç–∞"""
            return await initialize_enhanced_exchange(self.bot)
            
        async def init_market_analyzer(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
            return await init_market_analyzer(self.bot)
            
        async def init_trader(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
            return await init_trader(self.bot)
            
        async def init_risk_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
            return await init_risk_manager(self.bot)
            
        async def init_portfolio_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            return await init_portfolio_manager(self.bot)
            
        async def init_notifier(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            return await init_notifier(self.bot)
            
        async def init_data_collector(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
            return await init_data_collector(self.bot)
            
        async def init_strategy_factory(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
            return await init_strategy_factory(self.bot)
            
        async def display_account_info(self):
            """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
            return await display_account_info(self.bot)
            
        async def _process_balance_info(self, balance_info: dict):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
            return await _process_balance_info(self.bot, balance_info)
            
        async def init_config_validator(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
            return await init_config_validator(self.bot)
            
        async def init_execution_engine(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
            return await init_execution_engine(self.bot)
            
        async def init_ml_system(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã"""
            return await init_ml_system(self.bot)
            
        async def init_news_analyzer(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
            return await init_news_analyzer(self.bot)
            
        async def init_websocket_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            return await init_websocket_manager(self.bot)
            
        async def init_export_manager(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
            return await init_export_manager(self.bot)
            
        async def init_health_monitor(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
            return await init_health_monitor(self.bot)
    
    return Initialization(bot_instance)


async def initialize_all_components(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        # ‚úÖ –°–ù–ê–ß–ê–õ–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú EXCHANGE –û–¢–î–ï–õ–¨–ù–û (–í–ù–ï –¶–ò–ö–õ–ê)
        if not bot_manager._exchange_initialized:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exchange_client...")
            exchange_success = await init_exchange_client(bot_manager)
            if not exchange_success:
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å exchange")
                return False
            bot_manager._exchange_initialized = True
            logger.info("‚úÖ exchange_client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("‚úÖ exchange_client —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ENHANCED EXCHANGE - –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange...")
        try:
            await initialize_enhanced_exchange(bot_manager)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Enhanced exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        initialization_order = [
            ('database', init_database, [], True),
            ('config_validator', init_config_validator, ['database'], True),
            ('data_collector', init_data_collector, [], True),
            ('market_analyzer', init_market_analyzer, ['data_collector'], True),
            ('risk_manager', init_risk_manager, ['market_analyzer'], True),
            ('portfolio_manager', init_portfolio_manager, ['risk_manager'], True),
            ('strategy_factory', init_strategy_factory, ['market_analyzer'], True),
            ('signal_strategies', init_signal_strategies, ['strategy_factory'], False),
            ('trader', init_trader, ['exchange_client', 'risk_manager'], True),
            ('execution_engine', init_execution_engine, ['exchange_client', 'risk_manager'], False),
            ('notifier', init_notifier, [], False),
            ('ml_system', init_ml_system, ['data_collector'], False),
            ('news_analyzer', init_news_analyzer, [], False),
            ('websocket_manager', init_websocket_manager, ['exchange_client'], False),
            ('export_manager', init_export_manager, ['database'], False),
            ('health_monitor', init_health_monitor, [], False)
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for comp_name, init_func, dependencies, is_critical in initialization_order:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç exchange_client
                if 'exchange_client' in dependencies and not bot_manager._exchange_initialized:
                    logger.warning(f"‚ö†Ô∏è {comp_name} –ø—Ä–æ–ø—É—â–µ–Ω - exchange_client –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                other_deps = [dep for dep in dependencies if dep != 'exchange_client']
                deps_ready = all(
                    bot_manager.components.get(dep, ComponentInfo('', ComponentStatus.NOT_INITIALIZED)).status == ComponentStatus.READY
                    for dep in other_deps
                )
                
                if not deps_ready and other_deps:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {comp_name} –Ω–µ –≥–æ—Ç–æ–≤—ã: {other_deps}")
                    if is_critical:
                        return False
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                comp_info = ComponentInfo(
                    name=comp_name,
                    status=ComponentStatus.INITIALIZING,
                    dependencies=dependencies,
                    is_critical=is_critical
                )
                bot_manager.components[comp_name] = comp_info
                
                logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {comp_name}...")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                result = await init_func(bot_manager)
                
                if result:
                    comp_info.status = ComponentStatus.READY
                    comp_info.last_heartbeat = datetime.utcnow()
                    logger.info(f"‚úÖ {comp_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    comp_info.status = ComponentStatus.FAILED
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}")
                    if is_critical:
                        return False
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}: {e}")
                if comp_name in bot_manager.components:
                    bot_manager.components[comp_name].status = ComponentStatus.FAILED
                    bot_manager.components[comp_name].error = str(e)
                if is_critical:
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        critical_components = [name for name, comp in bot_manager.components.items() if comp.is_critical]
        failed_critical = [name for name in critical_components 
                         if bot_manager.components[name].status != ComponentStatus.READY]
        
        if failed_critical:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {failed_critical}")
            return False
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len([c for c in bot_manager.components.values() if c.status == ComponentStatus.READY])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False


async def init_database(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç text –¥–ª—è SQLAlchemy 2.x
        from sqlalchemy import text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = SessionLocal()
        try:
            db.execute(text("SELECT 1"))  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
            db.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def init_config_validator(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.validate_config():
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def init_exchange_client(bot_manager):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É TypeError, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ
    —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è exchange
        from ...exchange import get_enhanced_exchange_client, BYBIT_INTEGRATION_AVAILABLE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å bybit_v5)
        if BYBIT_INTEGRATION_AVAILABLE:
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º EnhancedUnifiedExchangeClient")
            # –ü–†–ê–í–ò–õ–¨–ù–û: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (testnet –∏ —Ç.–¥.) –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
            bot_manager.exchange_client = get_enhanced_exchange_client()
        else:
            # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            logger.warning("‚ö†Ô∏è Enhanced –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            from ...exchange import UnifiedExchangeClient
            bot_manager.exchange_client = UnifiedExchangeClient()

        # --- –≠—Ç–∞–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–±—â–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤) ---

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        exchange_name = getattr(config, 'DEFAULT_EXCHANGE', 'bybit')
        testnet = getattr(config, 'BYBIT_TESTNET', True)

        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_name} (testnet={testnet})...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        success = await bot_manager.exchange_client.connect(exchange_name, testnet)

        if success:
            logger.info("‚úÖ Exchange –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è enhanced), –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
            if hasattr(bot_manager.exchange_client, 'initialize'):
                logger.info("üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced –∫–ª–∏–µ–Ω—Ç–∞...")
                await bot_manager.exchange_client.initialize()
                logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            return True
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
            return False

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        logger.error(traceback.format_exc()) # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return False


async def init_data_collector(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –†–ï–ê–õ–¨–ù–´–ô"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DataCollector
        from ...data.data_collector import DataCollector
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å exchange_client –∏ —Å–µ—Å—Å–∏–µ–π –ë–î
        bot_manager.data_collector = DataCollector(
            bot_manager.exchange_client, 
            SessionLocal  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π, –∞ –Ω–µ self.db
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫
        await bot_manager.data_collector.start()
        
        logger.info("‚úÖ DataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataCollector: {e}")
        return False


async def init_market_analyzer(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        from ...analysis.market_analyzer import MarketAnalyzer
        bot_manager.market_analyzer = MarketAnalyzer()
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
        return False



async def init_risk_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Risk Manager...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Enhanced Risk Manager
        from ...risk.enhanced_risk_manager import EnhancedRiskManager, get_risk_manager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        bot_manager.risk_manager = get_risk_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if bot_manager.risk_manager is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä risk_manager")
            return False
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        if hasattr(bot_manager.risk_manager, 'initialize'):
            await bot_manager.risk_manager.initialize()
        
        logger.info("‚úÖ Enhanced Risk Manager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Enhanced Risk Manager: {e}")
        logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π risk manager...")
        
        # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É risk manager
        try:
            from ...risk.risk_calculator import RiskCalculator
            bot_manager.risk_manager = RiskCalculator()
            logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π Risk Calculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ fallback")
            return True
        except Exception as fallback_error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π risk manager: {fallback_error}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ risk manager: {e}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return False


async def init_portfolio_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return False


async def init_strategy_factory(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        from ...strategies import strategy_factory, StrategyFactory

        # === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è float –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        def safe_get_float(key: str, default: float) -> float:
            """
            –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
            """
            value = getattr(config, key, default)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
            if isinstance(value, str) and value.strip() == '':
                logger.warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
                return default
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float
                return float(value)
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –¥–ª—è –∫–ª—é—á–∞ '{key}' –≤ float. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
                return default

        # === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–∞–±—Ä–∏–∫—É
        if strategy_factory:
            bot_manager.strategy_factory = strategy_factory
        else:
            bot_manager.strategy_factory = StrategyFactory()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        available_strategies = bot_manager.strategy_factory.list_strategies()
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(available_strategies)}")
        logger.info(f"üìã –°–ø–∏—Å–æ–∫: {', '.join(available_strategies)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        bot_manager.active_strategies = {}
        
        # === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        active_strategy_weights = {
            'multi_indicator': safe_get_float('MULTI_INDICATOR_WEIGHT', 1.0),
            'momentum': safe_get_float('MOMENTUM_WEIGHT', 0.8),
            'mean_reversion': safe_get_float('MEAN_REVERSION_WEIGHT', 0.7),
            'breakout': 0.6,  # –ù–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'scalping': safe_get_float('SCALPING_WEIGHT', 0.5),
            'swing': 0.6,  # –ù–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'whale_hunting': safe_get_float('WHALE_HUNTING_WEIGHT', 1.5),
            'sleeping_giants': safe_get_float('SLEEPING_GIANTS_WEIGHT', 1.3),
            'order_book_analysis': safe_get_float('ORDER_BOOK_WEIGHT', 1.2)
        }
        # === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        for strategy_name, weight in active_strategy_weights.items():
            if weight > 0 and strategy_name in available_strategies:
                try:
                    strategy = bot_manager.strategy_factory.create(strategy_name)
                    bot_manager.active_strategies[strategy_name] = {
                        'instance': strategy,
                        'weight': weight,
                        'enabled': True,
                        'performance': {
                            'total_signals': 0,
                            'successful_signals': 0,
                            'failed_signals': 0,
                            'total_profit': 0.0,
                            'win_rate': 0.0,
                            'last_signal': None
                        }
                    }
                    logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} —Å –≤–µ—Å–æ–º {weight}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∞–ª–∏–∑–µ
        bot_manager.strategy_weights = active_strategy_weights
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        total_weight = sum(w for w in active_strategy_weights.values() if w > 0)
        bot_manager.normalized_strategy_weights = {
            name: (weight / total_weight * 100) if total_weight > 0 else 0
            for name, weight in active_strategy_weights.items()
        }
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(bot_manager.active_strategies)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        logger.info("üìä –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        for name, weight in bot_manager.normalized_strategy_weights.items():
            if weight > 0:
                logger.info(f"   {name}: {weight:.1f}%")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False

        
async def init_signal_strategies(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    
    def safe_get_float(key: str, default: float) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ float –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ config
            if hasattr(config, key):
                value = getattr(config, key, default)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ config, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                value = os.environ.get(key, str(default))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
            if isinstance(value, (int, float)):
                return float(value)
            elif isinstance(value, str):
                if value.strip() == '' or value.lower() == 'none':
                    return default
                return float(value.strip())
            else:
                return default
        except (ValueError, TypeError, AttributeError):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {key}={value} –≤ float, –∏—Å–ø–æ–ª—å–∑—É–µ–º default={default}")
            return default
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        enabled_strategies = getattr(config, 'ENABLED_STRATEGIES', 'whale_hunting,sleeping_giants,order_book_analysis')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if isinstance(enabled_strategies, str):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–µ
            enabled_list = [s.strip() for s in enabled_strategies.split(',') if s.strip()]
        elif isinstance(enabled_strategies, list):
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            enabled_list = enabled_strategies
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è ENABLED_STRATEGIES: {type(enabled_strategies)}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            enabled_list = ['whale_hunting', 'sleeping_giants', 'order_book_analysis']

        bot_manager.signal_strategies = {}
        
        # Whale Hunting - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if 'whale_hunting' in enabled_list:
            try:
                from ...strategies.whale_hunting import WhaleHuntingStrategy
                min_usd_value = safe_get_float('WHALE_MIN_USD_VALUE', 100000.0)
                exchange_flow_threshold = safe_get_float('WHALE_EXCHANGE_FLOW_THRESHOLD', 500000.0)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                bot_manager.signal_strategies['whale_hunting'] = WhaleHuntingStrategy(
                    name='whale_hunting',  # –ø–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    min_usd_value=min_usd_value,
                    exchange_flow_threshold=exchange_flow_threshold
                )
                logger.info("‚úÖ WhaleHuntingStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhaleHunting: {e}", exc_info=True)
        
        # Sleeping Giants - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if 'sleeping_giants' in enabled_list:
            try:
                from ...strategies.sleeping_giants import SleepingGiantsStrategy
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–µ–∑ 'name')
                bot_manager.signal_strategies['sleeping_giants'] = SleepingGiantsStrategy(
                    volatility_threshold=safe_get_float('SLEEPING_GIANTS_VOLATILITY_THRESHOLD', 0.02),
                    volume_anomaly_threshold=safe_get_float('SLEEPING_GIANTS_VOLUME_THRESHOLD', 0.7),
                    hurst_threshold=safe_get_float('SLEEPING_GIANTS_HURST_THRESHOLD', 0.45),
                    ofi_threshold=safe_get_float('SLEEPING_GIANTS_OFI_THRESHOLD', 0.3),
                    min_confidence=safe_get_float('SLEEPING_GIANTS_MIN_CONFIDENCE', 0.6)
                )
                logger.info("‚úÖ SleepingGiantsStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SleepingGiants: {e}", exc_info=True)
        
        # Order Book Analysis - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if 'order_book_analysis' in enabled_list:
            try:
                from ...strategies.order_book_analysis import OrderBookAnalysisStrategy
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                order_book_config = {
                    'wall_threshold': safe_get_float('ORDER_BOOK_WALL_THRESHOLD', 5.0),
                    'spoofing_time_window': int(safe_get_float('ORDER_BOOK_SPOOFING_WINDOW', 300)),
                    'absorption_volume_ratio': safe_get_float('ORDER_BOOK_ABSORPTION_RATIO', 3.0),
                    'imbalance_threshold': safe_get_float('ORDER_BOOK_IMBALANCE_THRESHOLD', 2.0),
                    'lookback_minutes': int(safe_get_float('ORDER_BOOK_LOOKBACK_MINUTES', 30))
                }
                
                # –ü–µ—Ä–µ–¥–∞–µ–º config –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
                bot_manager.signal_strategies['order_book_analysis'] = OrderBookAnalysisStrategy(
                    config=order_book_config,
                    exchange_client=bot_manager.exchange_client  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú exchange_client
                )
                logger.info("‚úÖ OrderBookAnalysisStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OrderBookAnalysis: {e}", exc_info=True)
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(bot_manager.signal_strategies)} —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        return len(bot_manager.signal_strategies) > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False


async def init_trader(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫: {e}")
        return False


async def init_execution_engine(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        from ...exchange.execution_engine import OrderExecutionEngine, get_execution_engine
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
        bot_manager.execution_engine = get_execution_engine()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        if bot_manager.execution_engine:
            logger.info("‚úÖ OrderExecutionEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            bot_manager.execution_engine.validation_settings.update({
                'min_confidence': getattr(bot_manager.config, 'MIN_SIGNAL_CONFIDENCE', 0.6),
                'max_slippage': getattr(bot_manager.config, 'MAX_SLIPPAGE_PERCENT', 0.5) / 100,
                'min_volume_ratio': 0.01,
                'max_position_correlation': 0.7
            })
            
            return True
        else:
            logger.warning("‚ö†Ô∏è OrderExecutionEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OrderExecutionEngine: {e}")
        return False


async def init_notifier(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        if config.TELEGRAM_ENABLED and config.TELEGRAM_BOT_TOKEN:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.info("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False


async def init_ml_system(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ ML –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ml_enabled = getattr(config, 'ENABLE_ML', False) or getattr(config, 'ENABLE_ML_SYSTEM', False)
        
        if not ml_enabled:
            logger.info("‚ÑπÔ∏è –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã
            bot_manager.ml_system = None
            return True
            
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ML —Å–∏—Å—Ç–µ–º—É
        try:
            from ...ml import MLSystem, get_models_status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π
            models_status = get_models_status()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π: {models_status}")
            
            # –°–æ–∑–¥–∞–µ–º ML —Å–∏—Å—Ç–µ–º—É
            bot_manager.ml_system = MLSystem()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            await bot_manager.ml_system.initialize()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è RL –∞–≥–µ–Ω—Ç–∞
            if hasattr(bot_manager.ml_system, 'rl_agent') and bot_manager.ml_system.rl_agent:
                def create_state_from_df(df):
                    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è RL –∞–≥–µ–Ω—Ç–∞ –∏–∑ DataFrame"""
                    if df is None or len(df) == 0:
                        return np.array([0.0] * 10)  # Fallback —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    
                    return np.array([
                        df['close'].iloc[-1] / df['close'].iloc[-5] - 1,  # Price change
                        df['volume'].iloc[-1] / df['volume'].iloc[-5] - 1,  # Volume change
                        len(df),  # Data points
                        df['close'].pct_change().std(),  # Volatility
                        (df['close'].iloc[-1] - df['close'].min()) / (df['close'].max() - df['close'].min()),  # Position in range
                        df['close'].rolling(5).mean().iloc[-1] / df['close'].iloc[-1] - 1,  # MA5 vs current
                        df['close'].rolling(20).mean().iloc[-1] / df['close'].iloc[-1] - 1,  # MA20 vs current
                        df['volume'].iloc[-5:].mean() / df['volume'].iloc[-20:].mean(),  # Volume ratio
                        0.5  # Portfolio state placeholder
                    ])
                
                bot_manager.ml_system.create_state_from_df = create_state_from_df
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            training_enabled = getattr(config, 'ENABLE_ML_TRAINING', False)
            if training_enabled and hasattr(bot_manager, '_trading_loops'):
                from .trading_loops import ml_training_loop
                asyncio.create_task(ml_training_loop(bot_manager))
                logger.info("üéØ –ó–∞–ø—É—â–µ–Ω–æ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π")
            
            logger.info("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è ML –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            bot_manager.ml_system = None
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å–∏—Å—Ç–µ–º—ã: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            bot_manager.ml_system = None
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ init_ml_system: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        bot_manager.ml_system = None
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫


async def init_news_analyzer(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        if not config.ENABLE_NEWS_ANALYSIS:
            logger.info("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False


async def init_websocket_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False


async def init_export_manager(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False


async def init_health_monitor(bot_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è (–∑–∞–≥–ª—É—à–∫–∞)
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False


async def initialize_enhanced_exchange(bot_manager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange –∫–ª–∏–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced exchange...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å V5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        from ...exchange import check_bybit_v5_capabilities
        v5_capabilities = check_bybit_v5_capabilities()
        logger.info(f"üîç V5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {v5_capabilities}")
        
        if not v5_capabilities.get('enhanced_features', False):
            logger.warning("‚ö†Ô∏è Enhanced –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–µ–º enhanced –∫–ª–∏–µ–Ω—Ç
        from ...exchange import get_enhanced_exchange_client
        bot_manager.enhanced_exchange_client = get_enhanced_exchange_client()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if hasattr(bot_manager.enhanced_exchange_client, 'initialize'):
            success = await bot_manager.enhanced_exchange_client.initialize()
            if success:
                logger.info("‚úÖ Enhanced exchange –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health_check
                try:
                    if hasattr(bot_manager.enhanced_exchange_client, 'health_check'):
                        health_status = await bot_manager.enhanced_exchange_client.health_check()
                        status = health_status.get('overall_status', 'unknown')
                        logger.info(f"üîç Enhanced –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å: {status}")
                    else:
                        logger.info("üîç Enhanced –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å: initialized (no health_check)")
                except Exception as health_error:
                    logger.warning(f"‚ö†Ô∏è Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_error}")
                    # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                
                bot_manager.v5_integration_enabled = True
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å enhanced –∫–ª–∏–µ–Ω—Ç")
                return False
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ initialize - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤
            logger.info("‚úÖ Enhanced –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
            bot_manager.v5_integration_enabled = True
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ enhanced –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


async def display_account_info(bot_manager):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ"""
    try:
        logger.info("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ enhanced client (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        balance_info = None
        
        if bot_manager.enhanced_exchange_client:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å v5_client —á–µ—Ä–µ–∑ bybit_integration
                if hasattr(bot_manager.enhanced_exchange_client, 'bybit_integration') and \
                   hasattr(bot_manager.enhanced_exchange_client.bybit_integration, 'v5_client') and \
                   bot_manager.enhanced_exchange_client.bybit_integration.v5_client:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ v5_client
                    balance_info = await bot_manager.enhanced_exchange_client.bybit_integration.v5_client.get_wallet_balance()
                    logger.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ v5_client")
                else:
                    logger.warning("‚ö†Ô∏è V5 client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ enhanced client")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Enhanced client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        if not balance_info and bot_manager.exchange_client:
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ UnifiedExchangeClient
                if hasattr(bot_manager.exchange_client, 'exchange') and bot_manager.exchange_client.exchange:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ get_balance –∏–∑ UnifiedExchangeClient
                    unified_balance = await bot_manager.exchange_client.get_balance()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è _process_balance_info
                    if 'error' not in unified_balance:
                        balance_info = {
                            'retCode': 0,
                            'result': {
                                'list': [{
                                    'accountType': 'UNIFIED',
                                    'totalEquity': str(unified_balance.get('total_usdt', 0)),
                                    'totalAvailableBalance': str(unified_balance.get('free_usdt', 0)),
                                    'totalWalletBalance': str(unified_balance.get('total_usdt', 0)),
                                    'coin': []
                                }]
                            }
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º
                        for coin, details in unified_balance.get('assets', {}).items():
                            balance_info['result']['list'][0]['coin'].append({
                                'coin': coin,
                                'walletBalance': str(details.get('total', 0)),
                                'availableToWithdraw': str(details.get('free', 0)),
                                'equity': str(details.get('total', 0))
                            })
                        
                        logger.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ UnifiedExchangeClient")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        
        if balance_info and isinstance(balance_info, dict):
            await process_balance_info(bot_manager, balance_info)
            
        if hasattr(bot_manager.enhanced_exchange_client, 'v5_client'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            account_types = ['UNIFIED', 'CONTRACT', 'SPOT']
            for acc_type in account_types:
                try:
                    balance_info = await bot_manager.enhanced_exchange_client.v5_client.get_wallet_balance(
                        accountType=acc_type
                    )
                    logger.info(f"üí∞ {acc_type} –∞–∫–∫–∞—É–Ω—Ç: {balance_info}")
                except Exception as e:
                    logger.debug(f"‚ùå {acc_type} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
        logger.error(traceback.format_exc())


async def process_balance_info(bot_manager, balance_info: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        logger.info("üí∞ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–†–ì–û–í–û–ú –ê–ö–ö–ê–£–ù–¢–ï BYBIT")
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float
        def safe_float(value, default=0.0):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
            if value is None:
                return default
            if isinstance(value, (int, float)):
                return float(value)
            if isinstance(value, str):
                if value.strip() == '' or value.strip() == '0' or value.strip() == 'null':
                    return default
                try:
                    return float(value.strip())
                except (ValueError, AttributeError):
                    return default
            return default
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Bybit Unified Account
        if 'result' in balance_info and balance_info.get('retCode') == 0:
            result = balance_info.get('result', {})
            account_list = result.get('list', [])
            
            if account_list:
                account = account_list[0]
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                account_type = account.get('accountType', 'UNIFIED')
                total_equity = safe_float(account.get('totalEquity', 0))
                total_available = safe_float(account.get('totalAvailableBalance', 0))
                total_wallet = safe_float(account.get('totalWalletBalance', 0))
                
                logger.info(f"üíº –¢–ò–ü –ê–ö–ö–ê–£–ù–¢–ê: {account_type} (–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π)")
                logger.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_wallet:.2f}")
                logger.info(f"üìä –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_equity:.2f}")
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${total_available:.2f}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º
                coins = account.get('coin', [])
                logger.info("üìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ê–ö–¢–ò–í–ê–ú:")
                
                for coin_data in coins:
                    coin_symbol = coin_data.get('coin', '')
                    
                    if coin_symbol == 'USDT':
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –±–∞–ª–∞–Ω—Å–∞
                        wallet_balance = safe_float(coin_data.get('walletBalance', 0))
                        equity = safe_float(coin_data.get('equity', 0))
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        available_withdraw = safe_float(coin_data.get('availableToWithdraw', 0))
                        available_balance = safe_float(coin_data.get('availableBalance', 0))
                        free_balance = safe_float(coin_data.get('free', 0))
                        
                        # –î–ª—è SPOT –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å availableToBorrow
                        available_borrow = safe_float(coin_data.get('availableToBorrow', 0))
                        
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Unified Account
                        locked = safe_float(coin_data.get('locked', 0))
                        
                        # –î–ª—è Unified Account –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance - locked
                        # –ï—Å–ª–∏ locked = 0, —Ç–æ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω
                        if locked == 0 or locked < 1:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–ª–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                            available_final = wallet_balance
                            locked = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–ª–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        else:
                            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                            available_final = wallet_balance - locked
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                        if available_final < 1 and wallet_balance > 1:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –¥–∞–ª –º–∞–ª–æ
                            alternative_available = max(
                                available_withdraw, 
                                available_balance, 
                                free_balance, 
                                available_borrow,
                                wallet_balance * 0.99  # 99% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∫ fallback
                            )
                            
                            if alternative_available > available_final:
                                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {alternative_available:.2f}")
                                available_final = alternative_available
                                locked = wallet_balance - available_final
                        else:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            available_final = max(available_withdraw, available_balance, free_balance, available_borrow)
                        
                        logger.info(f"   üí∞ USDT:")
                        logger.info(f"      üìà –ë–∞–ª–∞–Ω—Å: {wallet_balance:.2f}")
                        logger.info(f"      ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_final:.2f}")
                        logger.info(f"      üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.2f}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                        bot_manager.balance = wallet_balance
                        bot_manager.available_balance = available_final
                        bot_manager.locked_balance = locked
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        logger.debug(f"üîç USDT –±–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª–∏:")
                        logger.debug(f"   walletBalance: {coin_data.get('walletBalance', 'N/A')}")
                        logger.debug(f"   availableToWithdraw: {coin_data.get('availableToWithdraw', 'N/A')}")
                        logger.debug(f"   availableBalance: {coin_data.get('availableBalance', 'N/A')}")
                        logger.debug(f"   free: {coin_data.get('free', 'N/A')}")
                        logger.debug(f"   locked: {coin_data.get('locked', 'N/A')}")
                        logger.debug(f"   equity: {coin_data.get('equity', 'N/A')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        elif isinstance(balance_info, dict) and any(key in balance_info for key in ['USDT', 'BTC', 'ETH']):
            logger.info("üè¶ –ë–ê–õ–ê–ù–° –ü–û –ê–ö–¢–ò–í–ê–ú:")
            
            main_currencies = ['USDT', 'BTC', 'ETH', 'BNB']
            
            for currency in main_currencies:
                if currency in balance_info:
                    balance_data = balance_info[currency]
                    if isinstance(balance_data, dict):
                        free = safe_float(balance_data.get('free', 0))
                        used = safe_float(balance_data.get('used', 0))
                        total = safe_float(balance_data.get('total', 0))
                        
                        if total > 0:
                            logger.info(f"   ü™ô {currency}: {total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:.4f})")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º USDT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
                    if currency == 'USDT' and isinstance(balance_data, dict):
                        bot_manager.balance = safe_float(balance_data.get('total', 0))
                        bot_manager.available_balance = safe_float(balance_data.get('free', 0))
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if not hasattr(bot_manager, 'balance') or bot_manager.balance is None:
            bot_manager.balance = 0.0
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 0")
        
        if not hasattr(bot_manager, 'available_balance') or bot_manager.available_balance is None:
            bot_manager.available_balance = 0.0
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 0")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        logger.info(f"üìä –ò–¢–û–ì–û –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        logger.info(f"   üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${bot_manager.balance:.2f}")
        logger.info(f"   üí∏ –î–æ—Å—Ç—É–ø–Ω–æ: ${bot_manager.available_balance:.2f}")
        logger.info(f"   üîí –í –ø–æ–∑–∏—Ü–∏—è—Ö: ${getattr(bot_manager, 'locked_balance', 0):.2f}")
        
        logger.info("üí∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        if getattr(UnifiedConfig, 'PAPER_TRADING', False):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π Paper Trading –±–∞–ª–∞–Ω—Å
            paper_balance = getattr(UnifiedConfig, 'INITIAL_CAPITAL', 10000.0)
            
            bot_manager.paper_balance = paper_balance
            bot_manager.paper_positions = {}
            bot_manager.paper_trades_history = []
            bot_manager.paper_stats = {
                'total_trades': 0,
                'winning_trades': 0,
                'losing_trades': 0,
                'total_pnl': 0.0,
                'total_commission': 0.0,
                'max_drawdown': 0.0,
                'best_trade': 0.0,
                'worst_trade': 0.0,
                'win_rate': 0.0
            }
            
            # –î–ª—è PAPER_TRADING —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–≤–Ω—ã–º INITIAL_CAPITAL
            bot_manager.balance = paper_balance
            bot_manager.available_balance = paper_balance
            
            logger.info("="*50)
            logger.info("üìù –†–ï–ñ–ò–ú PAPER TRADING –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
            logger.info(f"üí∞ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${paper_balance:,.2f}")
            logger.info(f"üí∏ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${paper_balance:,.2f}")
            logger.info("="*50)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        logger.error(traceback.format_exc())
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not hasattr(bot_manager, 'balance'):
            bot_manager.balance = 0.0
        if not hasattr(bot_manager, 'available_balance'):
            bot_manager.available_balance = 0.0
        
        logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –±–∞–ª–∞–Ω—Å=${bot_manager.balance:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ=${bot_manager.available_balance:.2f}")